
B-L475E_Flash_Sample_Ctrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ec0  08009ec0  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ec8  08009ec8  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ecc  08009ecc  00019ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08009ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f398  20000044  08009f14  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f3dc  08009f14  0002f3dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e6c  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a03  00000000  00000000  00042ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001da0  00000000  00000000  000468e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd0  00000000  00000000  00048688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a815  00000000  00000000  0004a258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016d4a  00000000  00000000  00074a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00112a50  00000000  00000000  0008b7b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0019e207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f64  00000000  00000000  0019e2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  001a625c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800965c 	.word	0x0800965c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	0800965c 	.word	0x0800965c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80004d6:	2110      	movs	r1, #16
 80004d8:	20d4      	movs	r0, #212	; 0xd4
 80004da:	f001 f923 	bl	8001724 <SENSOR_IO_Read>
 80004de:	4603      	mov	r3, r0
 80004e0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80004e6:	7bbb      	ldrb	r3, [r7, #14]
 80004e8:	f003 0303 	and.w	r3, r3, #3
 80004ec:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80004ee:	7bba      	ldrb	r2, [r7, #14]
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80004f6:	7bbb      	ldrb	r3, [r7, #14]
 80004f8:	461a      	mov	r2, r3
 80004fa:	2110      	movs	r1, #16
 80004fc:	20d4      	movs	r0, #212	; 0xd4
 80004fe:	f001 f8f7 	bl	80016f0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000502:	2112      	movs	r1, #18
 8000504:	20d4      	movs	r0, #212	; 0xd4
 8000506:	f001 f90d 	bl	8001724 <SENSOR_IO_Read>
 800050a:	4603      	mov	r3, r0
 800050c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	b29b      	uxth	r3, r3
 8000514:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000516:	7bbb      	ldrb	r3, [r7, #14]
 8000518:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800051c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800051e:	7bba      	ldrb	r2, [r7, #14]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	4313      	orrs	r3, r2
 8000524:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	461a      	mov	r2, r3
 800052a:	2112      	movs	r1, #18
 800052c:	20d4      	movs	r0, #212	; 0xd4
 800052e:	f001 f8df 	bl	80016f0 <SENSOR_IO_Write>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000544:	2110      	movs	r1, #16
 8000546:	20d4      	movs	r0, #212	; 0xd4
 8000548:	f001 f8ec 	bl	8001724 <SENSOR_IO_Read>
 800054c:	4603      	mov	r3, r0
 800054e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	461a      	mov	r2, r3
 800055c:	2110      	movs	r1, #16
 800055e:	20d4      	movs	r0, #212	; 0xd4
 8000560:	f001 f8c6 	bl	80016f0 <SENSOR_IO_Write>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000570:	f001 f8b4 	bl	80016dc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000574:	210f      	movs	r1, #15
 8000576:	20d4      	movs	r0, #212	; 0xd4
 8000578:	f001 f8d4 	bl	8001724 <SENSOR_IO_Read>
 800057c:	4603      	mov	r3, r0
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}

08000582 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000590:	2115      	movs	r1, #21
 8000592:	20d4      	movs	r0, #212	; 0xd4
 8000594:	f001 f8c6 	bl	8001724 <SENSOR_IO_Read>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f023 0310 	bic.w	r3, r3, #16
 80005a2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	461a      	mov	r2, r3
 80005b6:	2115      	movs	r1, #21
 80005b8:	20d4      	movs	r0, #212	; 0xd4
 80005ba:	f001 f899 	bl	80016f0 <SENSOR_IO_Write>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80005de:	2110      	movs	r1, #16
 80005e0:	20d4      	movs	r0, #212	; 0xd4
 80005e2:	f001 f89f 	bl	8001724 <SENSOR_IO_Read>
 80005e6:	4603      	mov	r3, r0
 80005e8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	2306      	movs	r3, #6
 80005f0:	2128      	movs	r1, #40	; 0x28
 80005f2:	20d4      	movs	r0, #212	; 0xd4
 80005f4:	f001 f8b4 	bl	8001760 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	77fb      	strb	r3, [r7, #31]
 80005fc:	e01f      	b.n	800063e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	3301      	adds	r3, #1
 8000604:	f107 0220 	add.w	r2, r7, #32
 8000608:	4413      	add	r3, r2
 800060a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800060e:	b29b      	uxth	r3, r3
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b29a      	uxth	r2, r3
 8000614:	7ffb      	ldrb	r3, [r7, #31]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	f107 0120 	add.w	r1, r7, #32
 800061c:	440b      	add	r3, r1
 800061e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000622:	b29b      	uxth	r3, r3
 8000624:	4413      	add	r3, r2
 8000626:	b29a      	uxth	r2, r3
 8000628:	7ffb      	ldrb	r3, [r7, #31]
 800062a:	b212      	sxth	r2, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	f107 0120 	add.w	r1, r7, #32
 8000632:	440b      	add	r3, r1
 8000634:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000638:	7ffb      	ldrb	r3, [r7, #31]
 800063a:	3301      	adds	r3, #1
 800063c:	77fb      	strb	r3, [r7, #31]
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d9dc      	bls.n	80005fe <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	f003 030c 	and.w	r3, r3, #12
 800064a:	2b0c      	cmp	r3, #12
 800064c:	d828      	bhi.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
 800064e:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <LSM6DSL_AccReadXYZ+0x8c>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000689 	.word	0x08000689
 8000658:	080006a1 	.word	0x080006a1
 800065c:	080006a1 	.word	0x080006a1
 8000660:	080006a1 	.word	0x080006a1
 8000664:	0800069b 	.word	0x0800069b
 8000668:	080006a1 	.word	0x080006a1
 800066c:	080006a1 	.word	0x080006a1
 8000670:	080006a1 	.word	0x080006a1
 8000674:	0800068f 	.word	0x0800068f
 8000678:	080006a1 	.word	0x080006a1
 800067c:	080006a1 	.word	0x080006a1
 8000680:	080006a1 	.word	0x080006a1
 8000684:	08000695 	.word	0x08000695
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <LSM6DSL_AccReadXYZ+0x124>)
 800068a:	61bb      	str	r3, [r7, #24]
    break;
 800068c:	e008      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <LSM6DSL_AccReadXYZ+0x128>)
 8000690:	61bb      	str	r3, [r7, #24]
    break;
 8000692:	e005      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <LSM6DSL_AccReadXYZ+0x12c>)
 8000696:	61bb      	str	r3, [r7, #24]
    break;
 8000698:	e002      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <LSM6DSL_AccReadXYZ+0x130>)
 800069c:	61bb      	str	r3, [r7, #24]
    break;    
 800069e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	77fb      	strb	r3, [r7, #31]
 80006a4:	e01b      	b.n	80006de <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80006a6:	7ffb      	ldrb	r3, [r7, #31]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	f107 0220 	add.w	r2, r7, #32
 80006ae:	4413      	add	r3, r2
 80006b0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d0:	ee17 2a90 	vmov	r2, s15
 80006d4:	b212      	sxth	r2, r2
 80006d6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80006d8:	7ffb      	ldrb	r3, [r7, #31]
 80006da:	3301      	adds	r3, #1
 80006dc:	77fb      	strb	r3, [r7, #31]
 80006de:	7ffb      	ldrb	r3, [r7, #31]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d9e0      	bls.n	80006a6 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	3d79db23 	.word	0x3d79db23
 80006f0:	3df9db23 	.word	0x3df9db23
 80006f4:	3e79db23 	.word	0x3e79db23
 80006f8:	3ef9db23 	.word	0x3ef9db23

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f002 f81e 	bl	8002742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 fa13 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 fcb9 	bl	8001080 <MX_GPIO_Init>
  MX_DMA_Init();
 800070e:	f000 fc91 	bl	8001034 <MX_DMA_Init>
  MX_DAC1_Init();
 8000712:	f000 fb13 	bl	8000d3c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000716:	f000 fc0f 	bl	8000f38 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 800071a:	f000 fbe7 	bl	8000eec <MX_QUADSPI_Init>
  MX_I2C2_Init();
 800071e:	f000 fba5 	bl	8000e6c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000722:	f000 fc57 	bl	8000fd4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000726:	f000 fa93 	bl	8000c50 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800072a:	f000 fb39 	bl	8000da0 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  if (BSP_ACCELERO_Init() != ACCELERO_OK){
 800072e:	f001 f835 	bl	800179c <BSP_ACCELERO_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d004      	beq.n	8000742 <main+0x46>
  	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2108      	movs	r1, #8
 800073c:	48a7      	ldr	r0, [pc, #668]	; (80009dc <main+0x2e0>)
 800073e:	f005 f87b 	bl	8005838 <HAL_GPIO_WritePin>
    }
  memset(&strBuf[0], 0, sizeof(strBuf));
 8000742:	2264      	movs	r2, #100	; 0x64
 8000744:	2100      	movs	r1, #0
 8000746:	48a6      	ldr	r0, [pc, #664]	; (80009e0 <main+0x2e4>)
 8000748:	f008 ff80 	bl	800964c <memset>

  // Poll ADC
  HAL_ADC_Start(&hadc1);
 800074c:	48a5      	ldr	r0, [pc, #660]	; (80009e4 <main+0x2e8>)
 800074e:	f002 fc15 	bl	8002f7c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000752:	f04f 31ff 	mov.w	r1, #4294967295
 8000756:	48a3      	ldr	r0, [pc, #652]	; (80009e4 <main+0x2e8>)
 8000758:	f002 fcfe 	bl	8003158 <HAL_ADC_PollForConversion>
  volume = HAL_ADC_GetValue(&hadc1)/3;
 800075c:	48a1      	ldr	r0, [pc, #644]	; (80009e4 <main+0x2e8>)
 800075e:	f002 fdcb 	bl	80032f8 <HAL_ADC_GetValue>
 8000762:	4602      	mov	r2, r0
 8000764:	4ba0      	ldr	r3, [pc, #640]	; (80009e8 <main+0x2ec>)
 8000766:	fba3 2302 	umull	r2, r3, r3, r2
 800076a:	085b      	lsrs	r3, r3, #1
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b9f      	ldr	r3, [pc, #636]	; (80009ec <main+0x2f0>)
 8000770:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000772:	489c      	ldr	r0, [pc, #624]	; (80009e4 <main+0x2e8>)
 8000774:	f002 fcbc 	bl	80030f0 <HAL_ADC_Stop>

  // Poll accelerometer
  BSP_ACCELERO_AccGetXYZ(raw_acc);
 8000778:	489d      	ldr	r0, [pc, #628]	; (80009f0 <main+0x2f4>)
 800077a:	f001 f84d 	bl	8001818 <BSP_ACCELERO_AccGetXYZ>
  conv_accX = MapFreqVal(raw_acc[0]);
 800077e:	4b9c      	ldr	r3, [pc, #624]	; (80009f0 <main+0x2f4>)
 8000780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fd51 	bl	800122c <MapFreqVal>
 800078a:	eef0 7a40 	vmov.f32	s15, s0
 800078e:	4b99      	ldr	r3, [pc, #612]	; (80009f4 <main+0x2f8>)
 8000790:	edc3 7a00 	vstr	s15, [r3]

  // ------------------------------- ERASE AND REWRITE FLASH WITH TEST TONE ------------------------------- //
  //                               (WILL BE REPLACED BY ACTUAL MIC RECORDING)                               //

  // Generate a C6 tone for testing
  GenerateTone(audioBuffer, 40, C6, TONE_BUFFER_SIZE);
 8000794:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000798:	eddf 0a97 	vldr	s1, [pc, #604]	; 80009f8 <main+0x2fc>
 800079c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80009fc <main+0x300>
 80007a0:	4897      	ldr	r0, [pc, #604]	; (8000a00 <main+0x304>)
 80007a2:	f000 fcf3 	bl	800118c <GenerateTone>

  BSP_QSPI_Init();
 80007a6:	f001 f84f 	bl	8001848 <BSP_QSPI_Init>
  // Loop and erase 1 block of FLASH memory at a time
  for (int i = 0; i < NUM_BLOCKS_FLASH; i++){
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e011      	b.n	80007d4 <main+0xd8>
  	  newStart = START_WRITE_ADR + i*(MX25R6435F_BLOCK_SIZE);
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	041b      	lsls	r3, r3, #16
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <main+0x308>)
 80007b8:	601a      	str	r2, [r3, #0]

  	  if (BSP_QSPI_Erase_Block(newStart) != QSPI_OK)
 80007ba:	4b92      	ldr	r3, [pc, #584]	; (8000a04 <main+0x308>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f972 	bl	8001aa8 <BSP_QSPI_Erase_Block>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <main+0xd2>
  		  Error_Handler();
 80007ca:	f000 fe8b 	bl	80014e4 <Error_Handler>
  for (int i = 0; i < NUM_BLOCKS_FLASH; i++){
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3301      	adds	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b0d      	cmp	r3, #13
 80007d8:	d9ea      	bls.n	80007b0 <main+0xb4>
//
//	  newStart = nextPosition;
//  }

  // Record 20 seconds and write to FLASH
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	4889      	ldr	r0, [pc, #548]	; (8000a08 <main+0x30c>)
 80007e2:	f005 f829 	bl	8005838 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80007e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ea:	f002 f81f 	bl	800282c <HAL_Delay>
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f4:	4884      	ldr	r0, [pc, #528]	; (8000a08 <main+0x30c>)
 80007f6:	f005 f81f 	bl	8005838 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80007fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007fe:	f002 f815 	bl	800282c <HAL_Delay>
//  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);

  newStart = START_WRITE_ADR;
 8000802:	4b80      	ldr	r3, [pc, #512]	; (8000a04 <main+0x308>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]

  for (uint8_t i = 0; i < 80; i++){
 8000808:	2300      	movs	r3, #0
 800080a:	74fb      	strb	r3, [r7, #19]
 800080c:	e04e      	b.n	80008ac <main+0x1b0>

	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000814:	487c      	ldr	r0, [pc, #496]	; (8000a08 <main+0x30c>)
 8000816:	f005 f80f 	bl	8005838 <HAL_GPIO_WritePin>
	  HAL_DFSDM_FilterRegularStart_DMA (&hdfsdm1_filter0, (int32_t *)recordBuffer , TONE_BUFFER_SIZE);
 800081a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800081e:	497b      	ldr	r1, [pc, #492]	; (8000a0c <main+0x310>)
 8000820:	487b      	ldr	r0, [pc, #492]	; (8000a10 <main+0x314>)
 8000822:	f004 f963 	bl	8004aec <HAL_DFSDM_FilterRegularStart_DMA>
	  while (!doneRecording); //doneRecording needs to be set to 1 by the ISR
 8000826:	bf00      	nop
 8000828:	4b7a      	ldr	r3, [pc, #488]	; (8000a14 <main+0x318>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0fa      	beq.n	8000828 <main+0x12c>
	  HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000832:	4877      	ldr	r0, [pc, #476]	; (8000a10 <main+0x314>)
 8000834:	f004 f9dc 	bl	8004bf0 <HAL_DFSDM_FilterRegularStop_DMA>

	  for (uint32_t i=0; i < RECSAMPLES; i++){
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	e011      	b.n	8000862 <main+0x166>
		  // trim the 32 bit signed number to 24 MSBs first, then instead of directly converting to 8 bits, 'amplify' the sound a bit
		  int32_t currSample = recordBuffer[i] >> (8 + (24-16));
 800083e:	4a73      	ldr	r2, [pc, #460]	; (8000a0c <main+0x310>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000846:	0c1b      	lsrs	r3, r3, #16
 8000848:	603b      	str	r3, [r7, #0]

		  // convert 8 bit signed to 8 bit unsigned
		  recordBufferProc[i] = (uint8_t)currSample + 80;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	3350      	adds	r3, #80	; 0x50
 8000850:	b2d9      	uxtb	r1, r3
 8000852:	4a71      	ldr	r2, [pc, #452]	; (8000a18 <main+0x31c>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	460a      	mov	r2, r1
 800085a:	701a      	strb	r2, [r3, #0]
	  for (uint32_t i=0; i < RECSAMPLES; i++){
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3301      	adds	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f642 3210 	movw	r2, #11024	; 0x2b10
 8000868:	4293      	cmp	r3, r2
 800086a:	d9e8      	bls.n	800083e <main+0x142>
	  }
	  doneRecording = 0;
 800086c:	4b69      	ldr	r3, [pc, #420]	; (8000a14 <main+0x318>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000878:	4863      	ldr	r0, [pc, #396]	; (8000a08 <main+0x30c>)
 800087a:	f004 ffdd 	bl	8005838 <HAL_GPIO_WritePin>
	  if (BSP_QSPI_Write(recordBufferProc, newStart, RECSAMPLES) != QSPI_OK)
 800087e:	4b61      	ldr	r3, [pc, #388]	; (8000a04 <main+0x308>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000886:	4619      	mov	r1, r3
 8000888:	4863      	ldr	r0, [pc, #396]	; (8000a18 <main+0x31c>)
 800088a:	f001 f88f 	bl	80019ac <BSP_QSPI_Write>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <main+0x19c>
		  Error_Handler();
 8000894:	f000 fe26 	bl	80014e4 <Error_Handler>

	  newStart += RECSAMPLES;
 8000898:	4b5a      	ldr	r3, [pc, #360]	; (8000a04 <main+0x308>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 80008a0:	3311      	adds	r3, #17
 80008a2:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <main+0x308>)
 80008a4:	6013      	str	r3, [r2, #0]
  for (uint8_t i = 0; i < 80; i++){
 80008a6:	7cfb      	ldrb	r3, [r7, #19]
 80008a8:	3301      	adds	r3, #1
 80008aa:	74fb      	strb	r3, [r7, #19]
 80008ac:	7cfb      	ldrb	r3, [r7, #19]
 80008ae:	2b4f      	cmp	r3, #79	; 0x4f
 80008b0:	d9ad      	bls.n	800080e <main+0x112>
  }

  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b8:	4853      	ldr	r0, [pc, #332]	; (8000a08 <main+0x30c>)
 80008ba:	f004 ffbd 	bl	8005838 <HAL_GPIO_WritePin>

  // Reset audio buffer
  memset(&audioBuffer[0], 0, sizeof(audioBuffer));
 80008be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c2:	2100      	movs	r1, #0
 80008c4:	484e      	ldr	r0, [pc, #312]	; (8000a00 <main+0x304>)
 80008c6:	f008 fec1 	bl	800964c <memset>

  // ------------------------------------------------------------------------------------------------------ //

  // Clear error led state
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // clear error led state
 80008ca:	2201      	movs	r2, #1
 80008cc:	2108      	movs	r1, #8
 80008ce:	4843      	ldr	r0, [pc, #268]	; (80009dc <main+0x2e0>)
 80008d0:	f004 ffb2 	bl	8005838 <HAL_GPIO_WritePin>

  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 80008d4:	4851      	ldr	r0, [pc, #324]	; (8000a1c <main+0x320>)
 80008d6:	f007 fdc1 	bl	800845c <HAL_TIM_Base_Start_IT>

  // Start DMA for DAC
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)audioBuffer, TONE_BUFFER_SIZE, DAC_ALIGN_8B_R);
 80008da:	2308      	movs	r3, #8
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008e2:	4a47      	ldr	r2, [pc, #284]	; (8000a00 <main+0x304>)
 80008e4:	2100      	movs	r1, #0
 80008e6:	484e      	ldr	r0, [pc, #312]	; (8000a20 <main+0x324>)
 80008e8:	f003 fc6e 	bl	80041c8 <HAL_DAC_Start_DMA>

  // Start in IDLE mode:
  currState_flash = IDLE;
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <main+0x328>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]

  // Start at the beginning of the flash recording
  newStart = START_WRITE_ADR;
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <main+0x308>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
  nextPosition = newStart;
 80008f8:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <main+0x308>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a4a      	ldr	r2, [pc, #296]	; (8000a28 <main+0x32c>)
 80008fe:	6013      	str	r3, [r2, #0]
  uint16_t nextLen = HALF_BUFFER_SIZE;
 8000900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000904:	817b      	strh	r3, [r7, #10]
  float modifier = 1;
 8000906:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800090a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// ----------------------------- LOAD AUDIO SAMPLES FROM FLASH TO DAC USING DMA ------------------------------
	switch (currState_flash){
 800090c:	4b45      	ldr	r3, [pc, #276]	; (8000a24 <main+0x328>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b01      	cmp	r3, #1
 8000914:	d004      	beq.n	8000920 <main+0x224>
 8000916:	2b02      	cmp	r3, #2
 8000918:	f000 8092 	beq.w	8000a40 <main+0x344>
 800091c:	2b00      	cmp	r3, #0
		case IDLE:
			break;
 800091e:	e0ed      	b.n	8000afc <main+0x400>

		case HALFPT:

			// Read first half of next note into tones[]
			HAL_ADC_Start(&hadc1);
 8000920:	4830      	ldr	r0, [pc, #192]	; (80009e4 <main+0x2e8>)
 8000922:	f002 fb2b 	bl	8002f7c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000926:	f04f 31ff 	mov.w	r1, #4294967295
 800092a:	482e      	ldr	r0, [pc, #184]	; (80009e4 <main+0x2e8>)
 800092c:	f002 fc14 	bl	8003158 <HAL_ADC_PollForConversion>
			vol_mod = (float)HAL_ADC_GetValue(&hadc1)/128.0;
 8000930:	482c      	ldr	r0, [pc, #176]	; (80009e4 <main+0x2e8>)
 8000932:	f002 fce1 	bl	80032f8 <HAL_ADC_GetValue>
 8000936:	ee07 0a90 	vmov	s15, r0
 800093a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800093e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8000a2c <main+0x330>
 8000942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000946:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <main+0x334>)
 8000948:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Stop(&hadc1);
 800094c:	4825      	ldr	r0, [pc, #148]	; (80009e4 <main+0x2e8>)
 800094e:	f002 fbcf 	bl	80030f0 <HAL_ADC_Stop>

			BSP_ACCELERO_AccGetXYZ(raw_acc);
 8000952:	4827      	ldr	r0, [pc, #156]	; (80009f0 <main+0x2f4>)
 8000954:	f000 ff60 	bl	8001818 <BSP_ACCELERO_AccGetXYZ>
			modifier = MapModifVal(raw_acc[0]);
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <main+0x2f4>)
 800095a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fc94 	bl	800128c <MapModifVal>
 8000964:	ed87 0a01 	vstr	s0, [r7, #4]

			nextLen = (uint16_t)(modifier * HALF_BUFFER_SIZE);
 8000968:	edd7 7a01 	vldr	s15, [r7, #4]
 800096c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000a34 <main+0x338>
 8000970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000978:	ee17 3a90 	vmov	r3, s15
 800097c:	817b      	strh	r3, [r7, #10]

			if (BSP_QSPI_Read(tempBuffer, newStart, nextLen) != QSPI_OK)
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <main+0x308>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	897a      	ldrh	r2, [r7, #10]
 8000984:	4619      	mov	r1, r3
 8000986:	482c      	ldr	r0, [pc, #176]	; (8000a38 <main+0x33c>)
 8000988:	f000 ffca 	bl	8001920 <BSP_QSPI_Read>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <main+0x29a>
				Error_Handler();
 8000992:	f000 fda7 	bl	80014e4 <Error_Handler>

			ModifyRecFreq(tempBuffer, audioBuffer, modifier, nextLen, vol_mod);
 8000996:	897a      	ldrh	r2, [r7, #10]
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <main+0x334>)
 800099a:	edd3 7a00 	vldr	s15, [r3]
 800099e:	eef0 0a67 	vmov.f32	s1, s15
 80009a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80009a6:	4916      	ldr	r1, [pc, #88]	; (8000a00 <main+0x304>)
 80009a8:	4823      	ldr	r0, [pc, #140]	; (8000a38 <main+0x33c>)
 80009aa:	f000 fcbb 	bl	8001324 <ModifyRecFreq>

			// Check if exceed number of samples
			nextPosition = newStart + nextLen; //change this
 80009ae:	897a      	ldrh	r2, [r7, #10]
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <main+0x308>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <main+0x32c>)
 80009b8:	6013      	str	r3, [r2, #0]
			if (nextPosition >= NUM_TOTAL_SAMPLES){
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <main+0x32c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <main+0x340>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d903      	bls.n	80009cc <main+0x2d0>
				HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80009c4:	2100      	movs	r1, #0
 80009c6:	4816      	ldr	r0, [pc, #88]	; (8000a20 <main+0x324>)
 80009c8:	f003 fcbc 	bl	8004344 <HAL_DAC_Stop_DMA>
			}

			newStart = nextPosition;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <main+0x32c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <main+0x308>)
 80009d2:	6013      	str	r3, [r2, #0]
			currState_flash = IDLE;
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <main+0x328>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
			break;
 80009da:	e08f      	b.n	8000afc <main+0x400>
 80009dc:	48001000 	.word	0x48001000
 80009e0:	2000bd8c 	.word	0x2000bd8c
 80009e4:	2000bdf0 	.word	0x2000bdf0
 80009e8:	aaaaaaab 	.word	0xaaaaaaab
 80009ec:	2000006c 	.word	0x2000006c
 80009f0:	20000070 	.word	0x20000070
 80009f4:	20000078 	.word	0x20000078
 80009f8:	4482c000 	.word	0x4482c000
 80009fc:	42200000 	.word	0x42200000
 8000a00:	2000eab4 	.word	0x2000eab4
 8000a04:	20000064 	.word	0x20000064
 8000a08:	48000400 	.word	0x48000400
 8000a0c:	200000ac 	.word	0x200000ac
 8000a10:	2000ad50 	.word	0x2000ad50
 8000a14:	20000060 	.word	0x20000060
 8000a18:	2000be54 	.word	0x2000be54
 8000a1c:	2000ea30 	.word	0x2000ea30
 8000a20:	2000acf0 	.word	0x2000acf0
 8000a24:	2000e965 	.word	0x2000e965
 8000a28:	20000068 	.word	0x20000068
 8000a2c:	43000000 	.word	0x43000000
 8000a30:	20000034 	.word	0x20000034
 8000a34:	447a0000 	.word	0x447a0000
 8000a38:	2000ada4 	.word	0x2000ada4
 8000a3c:	000d754f 	.word	0x000d754f

		case DONE:

			// Read second half of curr note into tones[]
			HAL_ADC_Start(&hadc1);
 8000a40:	482f      	ldr	r0, [pc, #188]	; (8000b00 <main+0x404>)
 8000a42:	f002 fa9b 	bl	8002f7c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a46:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4a:	482d      	ldr	r0, [pc, #180]	; (8000b00 <main+0x404>)
 8000a4c:	f002 fb84 	bl	8003158 <HAL_ADC_PollForConversion>
			vol_mod = (float)HAL_ADC_GetValue(&hadc1)/128.0;
 8000a50:	482b      	ldr	r0, [pc, #172]	; (8000b00 <main+0x404>)
 8000a52:	f002 fc51 	bl	80032f8 <HAL_ADC_GetValue>
 8000a56:	ee07 0a90 	vmov	s15, r0
 8000a5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a5e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000b04 <main+0x408>
 8000a62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <main+0x40c>)
 8000a68:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Stop(&hadc1);
 8000a6c:	4824      	ldr	r0, [pc, #144]	; (8000b00 <main+0x404>)
 8000a6e:	f002 fb3f 	bl	80030f0 <HAL_ADC_Stop>

			BSP_ACCELERO_AccGetXYZ(raw_acc);
 8000a72:	4826      	ldr	r0, [pc, #152]	; (8000b0c <main+0x410>)
 8000a74:	f000 fed0 	bl	8001818 <BSP_ACCELERO_AccGetXYZ>
			modifier = MapModifVal(raw_acc[0]);
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <main+0x410>)
 8000a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fc04 	bl	800128c <MapModifVal>
 8000a84:	ed87 0a01 	vstr	s0, [r7, #4]

			nextLen = (uint16_t)(modifier * HALF_BUFFER_SIZE);
 8000a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a8c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000b10 <main+0x414>
 8000a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a98:	ee17 3a90 	vmov	r3, s15
 8000a9c:	817b      	strh	r3, [r7, #10]

			if (BSP_QSPI_Read(tempBuffer, newStart, nextLen) != QSPI_OK)
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <main+0x418>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <main+0x41c>)
 8000aa8:	f000 ff3a 	bl	8001920 <BSP_QSPI_Read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <main+0x3ba>
				Error_Handler();
 8000ab2:	f000 fd17 	bl	80014e4 <Error_Handler>

			ModifyRecFreq(tempBuffer, &audioBuffer[HALF_BUFFER_SIZE-1], modifier, nextLen, vol_mod);
 8000ab6:	897a      	ldrh	r2, [r7, #10]
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <main+0x40c>)
 8000aba:	edd3 7a00 	vldr	s15, [r3]
 8000abe:	eef0 0a67 	vmov.f32	s1, s15
 8000ac2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ac6:	4915      	ldr	r1, [pc, #84]	; (8000b1c <main+0x420>)
 8000ac8:	4813      	ldr	r0, [pc, #76]	; (8000b18 <main+0x41c>)
 8000aca:	f000 fc2b 	bl	8001324 <ModifyRecFreq>

			// Check if exceed number of samples
			nextPosition = newStart + nextLen; //change this
 8000ace:	897a      	ldrh	r2, [r7, #10]
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <main+0x418>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <main+0x424>)
 8000ad8:	6013      	str	r3, [r2, #0]
			if (nextPosition >= NUM_TOTAL_SAMPLES){
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <main+0x424>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <main+0x428>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d903      	bls.n	8000aec <main+0x3f0>
				HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <main+0x42c>)
 8000ae8:	f003 fc2c 	bl	8004344 <HAL_DAC_Stop_DMA>
			}

			newStart = nextPosition;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <main+0x424>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <main+0x418>)
 8000af2:	6013      	str	r3, [r2, #0]
			currState_flash = IDLE;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <main+0x430>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			break;
 8000afa:	bf00      	nop
	switch (currState_flash){
 8000afc:	e706      	b.n	800090c <main+0x210>
 8000afe:	bf00      	nop
 8000b00:	2000bdf0 	.word	0x2000bdf0
 8000b04:	43000000 	.word	0x43000000
 8000b08:	20000034 	.word	0x20000034
 8000b0c:	20000070 	.word	0x20000070
 8000b10:	447a0000 	.word	0x447a0000
 8000b14:	20000064 	.word	0x20000064
 8000b18:	2000ada4 	.word	0x2000ada4
 8000b1c:	2000ee9b 	.word	0x2000ee9b
 8000b20:	20000068 	.word	0x20000068
 8000b24:	000d754f 	.word	0x000d754f
 8000b28:	2000acf0 	.word	0x2000acf0
 8000b2c:	2000e965 	.word	0x2000e965

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0b8      	sub	sp, #224	; 0xe0
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3a:	2244      	movs	r2, #68	; 0x44
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fd84 	bl	800964c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2288      	movs	r2, #136	; 0x88
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fd76 	bl	800964c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b60:	2310      	movs	r3, #16
 8000b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b72:	2360      	movs	r3, #96	; 0x60
 8000b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b8a:	2328      	movs	r3, #40	; 0x28
 8000b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b90:	2307      	movs	r3, #7
 8000b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 f966 	bl	8006e78 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000bb2:	f000 fc97 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f006 fd32 	bl	8007644 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000be6:	f000 fc7d 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <SystemClock_Config+0x11c>)
 8000bec:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bfa:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c02:	2301      	movs	r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c0a:	2318      	movs	r3, #24
 8000c0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c1e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4618      	mov	r0, r3
 8000c24:	f006 ff12 	bl	8007a4c <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000c2e:	f000 fc59 	bl	80014e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c36:	f005 fbe9 	bl	800640c <HAL_PWREx_ControlVoltageScaling>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000c40:	f000 fc50 	bl	80014e4 <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	37e0      	adds	r7, #224	; 0xe0
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	00014081 	.word	0x00014081

08000c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000c74:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000c76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000c80:	2210      	movs	r2, #16
 8000c82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c90:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000c92:	2204      	movs	r2, #4
 8000c94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd2:	4817      	ldr	r0, [pc, #92]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000cd4:	f001 fffe 	bl	8002cd4 <HAL_ADC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cde:	f000 fc01 	bl	80014e4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4810      	ldr	r0, [pc, #64]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000cee:	f003 f88b 	bl	8003e08 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000cf8:	f000 fbf4 	bl	80014e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_ADC1_Init+0xe8>)
 8000cfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d00:	2306      	movs	r3, #6
 8000d02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d08:	237f      	movs	r3, #127	; 0x7f
 8000d0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_ADC1_Init+0xe0>)
 8000d1a:	f002 fafb 	bl	8003314 <HAL_ADC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000d24:	f000 fbde 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000bdf0 	.word	0x2000bdf0
 8000d34:	50040000 	.word	0x50040000
 8000d38:	3ac04000 	.word	0x3ac04000

08000d3c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2224      	movs	r2, #36	; 0x24
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f008 fc7f 	bl	800964c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_DAC1_Init+0x5c>)
 8000d50:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <MX_DAC1_Init+0x60>)
 8000d52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <MX_DAC1_Init+0x5c>)
 8000d56:	f003 fa14 	bl	8004182 <HAL_DAC_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d60:	f000 fbc0 	bl	80014e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d68:	2324      	movs	r3, #36	; 0x24
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_DAC1_Init+0x5c>)
 8000d80:	f003 fb2f 	bl	80043e2 <HAL_DAC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f000 fbab 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000acf0 	.word	0x2000acf0
 8000d9c:	40007400 	.word	0x40007400

08000da0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <MX_DFSDM1_Init+0xbc>)
 8000da8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000dbe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000dc2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 75;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000dc6:	224b      	movs	r2, #75	; 0x4b
 8000dc8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000dd0:	4821      	ldr	r0, [pc, #132]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000dd2:	f003 fd6b 	bl	80048ac <HAL_DFSDM_FilterInit>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000ddc:	f000 fb82 	bl	80014e4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <MX_DFSDM1_Init+0xc4>)
 8000de4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 67;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000df4:	2243      	movs	r2, #67	; 0x43
 8000df6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_DFSDM1_Init+0xc0>)
 8000e30:	f003 fc7c 	bl	800472c <HAL_DFSDM_ChannelInit>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000e3a:	f000 fb53 	bl	80014e4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4909      	ldr	r1, [pc, #36]	; (8000e68 <MX_DFSDM1_Init+0xc8>)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_DFSDM1_Init+0xb8>)
 8000e44:	f003 fe0c 	bl	8004a60 <HAL_DFSDM_FilterConfigRegChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000e4e:	f000 fb49 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000ad50 	.word	0x2000ad50
 8000e5c:	40016100 	.word	0x40016100
 8000e60:	2000ea7c 	.word	0x2000ea7c
 8000e64:	40016040 	.word	0x40016040
 8000e68:	00020004 	.word	0x00020004

08000e6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_I2C2_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <MX_I2C2_Init+0x7c>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000ea8:	f004 fd01 	bl	80058ae <HAL_I2C_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eb2:	f000 fb17 	bl	80014e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000eba:	f005 fa01 	bl	80062c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ec4:	f000 fb0e 	bl	80014e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000ecc:	f005 fa43 	bl	8006356 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 fb05 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000ad04 	.word	0x2000ad04
 8000ee4:	40005800 	.word	0x40005800
 8000ee8:	10909cec 	.word	0x10909cec

08000eec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_QUADSPI_Init+0x44>)
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <MX_QUADSPI_Init+0x48>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_QUADSPI_Init+0x44>)
 8000ef8:	22ff      	movs	r2, #255	; 0xff
 8000efa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_QUADSPI_Init+0x44>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_QUADSPI_Init+0x44>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_QUADSPI_Init+0x44>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_QUADSPI_Init+0x44>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_QUADSPI_Init+0x44>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_QUADSPI_Init+0x44>)
 8000f1c:	f005 facc 	bl	80064b8 <HAL_QSPI_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000f26:	f000 fadd 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000f284 	.word	0x2000f284
 8000f34:	a0001000 	.word	0xa0001000

08000f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f6c:	f240 7216 	movw	r2, #1814	; 0x716
 8000f70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7e:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f80:	f007 fa14 	bl	80083ac <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f8a:	f000 faab 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000f9c:	f007 fbed 	bl	800877a <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fa6:	f000 fa9d 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000faa:	2320      	movs	r3, #32
 8000fac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM2_Init+0x98>)
 8000fb8:	f007 fdfe 	bl	8008bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fc2:	f000 fa8f 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000ea30 	.word	0x2000ea30

08000fd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_USART1_UART_Init+0x5c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USART1_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USART1_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USART1_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USART1_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_USART1_UART_Init+0x58>)
 8001018:	f007 fe74 	bl	8008d04 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001022:	f000 fa5f 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000e968 	.word	0x2000e968
 8001030:	40013800 	.word	0x40013800

08001034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_DMA_Init+0x48>)
 800103c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103e:	4a0f      	ldr	r2, [pc, #60]	; (800107c <MX_DMA_Init+0x48>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6493      	str	r3, [r2, #72]	; 0x48
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_DMA_Init+0x48>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200d      	movs	r0, #13
 8001058:	f003 f85d 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800105c:	200d      	movs	r0, #13
 800105e:	f003 f876 	bl	800414e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	200e      	movs	r0, #14
 8001068:	f003 f855 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800106c:	200e      	movs	r0, #14
 800106e:	f003 f86e 	bl	800414e <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <MX_GPIO_Init+0xf8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a37      	ldr	r2, [pc, #220]	; (8001178 <MX_GPIO_Init+0xf8>)
 800109c:	f043 0310 	orr.w	r3, r3, #16
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a25      	ldr	r2, [pc, #148]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	4820      	ldr	r0, [pc, #128]	; (800117c <MX_GPIO_Init+0xfc>)
 80010fc:	f004 fb9c 	bl	8005838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001106:	481e      	ldr	r0, [pc, #120]	; (8001180 <MX_GPIO_Init+0x100>)
 8001108:	f004 fb96 	bl	8005838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800110c:	2308      	movs	r3, #8
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4816      	ldr	r0, [pc, #88]	; (800117c <MX_GPIO_Init+0xfc>)
 8001124:	f004 f8ec 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MX_GPIO_Init+0x104>)
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4812      	ldr	r0, [pc, #72]	; (8001188 <MX_GPIO_Init+0x108>)
 800113e:	f004 f8df 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <MX_GPIO_Init+0x100>)
 800115c:	f004 f8d0 	bl	8005300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	f002 ffd6 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116a:	2028      	movs	r0, #40	; 0x28
 800116c:	f002 ffef 	bl	800414e <HAL_NVIC_EnableIRQ>

}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	48001000 	.word	0x48001000
 8001180:	48000400 	.word	0x48000400
 8001184:	10110000 	.word	0x10110000
 8001188:	48000800 	.word	0x48000800

0800118c <GenerateTone>:

/* USER CODE BEGIN 4 */

void GenerateTone(uint8_t *array, float vol, float freq, uint32_t nSamples){
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6178      	str	r0, [r7, #20]
 8001194:	ed87 0a04 	vstr	s0, [r7, #16]
 8001198:	edc7 0a03 	vstr	s1, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
	float twopi = 6.283185307;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <GenerateTone+0x98>)
 80011a0:	623b      	str	r3, [r7, #32]
	float angStep = twopi * freq / SAMPLING_FREQ;
 80011a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80011a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ae:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001228 <GenerateTone+0x9c>
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	edc7 7a07 	vstr	s15, [r7, #28]
	float currAngle = 0;
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < (nSamples); i++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
 80011c4:	e025      	b.n	8001212 <GenerateTone+0x86>
		currAngle = i * angStep;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	edc7 7a06 	vstr	s15, [r7, #24]
		array[i] = (uint8_t)(vol + (vol * arm_sin_f32(currAngle)));
 80011dc:	ed97 0a06 	vldr	s0, [r7, #24]
 80011e0:	f008 f9ca 	bl	8009578 <arm_sin_f32>
 80011e4:	eeb0 7a40 	vmov.f32	s14, s0
 80011e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	4413      	add	r3, r2
 80011fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001202:	edc7 7a01 	vstr	s15, [r7, #4]
 8001206:	793a      	ldrb	r2, [r7, #4]
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < (nSamples); i++){
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	3301      	adds	r3, #1
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
 8001212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	429a      	cmp	r2, r3
 8001218:	d3d5      	bcc.n	80011c6 <GenerateTone+0x3a>
	}

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40c90fdb 	.word	0x40c90fdb
 8001228:	472c4400 	.word	0x472c4400

0800122c <MapFreqVal>:

float MapFreqVal(int16_t x){
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]

	float x_l;
	if (x < -1000){
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800123e:	da02      	bge.n	8001246 <MapFreqVal+0x1a>
	  x_l = -1000;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MapFreqVal+0x54>)
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e007      	b.n	8001256 <MapFreqVal+0x2a>
	}
	else{
	  x_l = (float)x;
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001252:	edc7 7a03 	vstr	s15, [r7, #12]
	//  float in_min = -1000;
	//  float in_max = 1000;
	//  float out_min = 4300;
	//  float out_max = 300;
	//  return (((x_l - in_min) * (out_max - out_min) / (in_max - in_min) + out_min));
	return (((x_l + 1000) * (-2) + 4300));
 8001256:	edd7 7a03 	vldr	s15, [r7, #12]
 800125a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001284 <MapFreqVal+0x58>
 800125e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001262:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001288 <MapFreqVal+0x5c>
 800126e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	c47a0000 	.word	0xc47a0000
 8001284:	447a0000 	.word	0x447a0000
 8001288:	45866000 	.word	0x45866000

0800128c <MapModifVal>:

float MapModifVal(int16_t x){
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]

	float x_l;

	if (x < -714)
 8001296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <MapModifVal+0x8c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	da03      	bge.n	80012a8 <MapModifVal+0x1c>
		x_l = 0.25;
 80012a0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e02d      	b.n	8001304 <MapModifVal+0x78>
	else if (x < -429)
 80012a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ac:	f513 7fd7 	cmn.w	r3, #430	; 0x1ae
 80012b0:	dc02      	bgt.n	80012b8 <MapModifVal+0x2c>
		x_l = 0.333;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MapModifVal+0x90>)
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e025      	b.n	8001304 <MapModifVal+0x78>
	else if (x < -143)
 80012b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012bc:	f113 0f8f 	cmn.w	r3, #143	; 0x8f
 80012c0:	da03      	bge.n	80012ca <MapModifVal+0x3e>
		x_l = 0.5;
 80012c2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	e01c      	b.n	8001304 <MapModifVal+0x78>
	else if (x < 143)
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	2b8e      	cmp	r3, #142	; 0x8e
 80012d0:	dc03      	bgt.n	80012da <MapModifVal+0x4e>
		x_l = 1;
 80012d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e014      	b.n	8001304 <MapModifVal+0x78>
	else if (x < 429)
 80012da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012de:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 80012e2:	dc03      	bgt.n	80012ec <MapModifVal+0x60>
		x_l = 2;
 80012e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e00b      	b.n	8001304 <MapModifVal+0x78>
	else if (x < 714)
 80012ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f0:	f240 22c9 	movw	r2, #713	; 0x2c9
 80012f4:	4293      	cmp	r3, r2
 80012f6:	dc02      	bgt.n	80012fe <MapModifVal+0x72>
		x_l = 3;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MapModifVal+0x94>)
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	e002      	b.n	8001304 <MapModifVal+0x78>
	else
		x_l = 4;
 80012fe:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001302:	60fb      	str	r3, [r7, #12]

	return x_l;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	ee07 3a90 	vmov	s15, r3
}
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	fffffd36 	.word	0xfffffd36
 800131c:	3eaa7efa 	.word	0x3eaa7efa
 8001320:	40400000 	.word	0x40400000

08001324 <ModifyRecFreq>:

void ModifyRecFreq(uint8_t *inArr, uint8_t *outArr, float mod, uint32_t nSamples, float vol_mod){
 8001324:	b480      	push	{r7}
 8001326:	b08d      	sub	sp, #52	; 0x34
 8001328:	af00      	add	r7, sp, #0
 800132a:	6178      	str	r0, [r7, #20]
 800132c:	6139      	str	r1, [r7, #16]
 800132e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001332:	60ba      	str	r2, [r7, #8]
 8001334:	edc7 0a01 	vstr	s1, [r7, #4]

	// Repeat samples
	if (mod < 1){
 8001338:	edd7 7a03 	vldr	s15, [r7, #12]
 800133c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	d53b      	bpl.n	80013c2 <ModifyRecFreq+0x9e>
		uint8_t scale = (uint8_t)(1 / mod);
 800134a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800134e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800135a:	edc7 7a00 	vstr	s15, [r7]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	77bb      	strb	r3, [r7, #30]

		for (uint32_t i = 0; i < nSamples; i++){
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	e027      	b.n	80013b8 <ModifyRecFreq+0x94>
			for (uint32_t j = 0; j < scale; j++){
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
 800136c:	e01d      	b.n	80013aa <ModifyRecFreq+0x86>
				outArr[scale*i+j] = vol_mod * inArr[i];
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001386:	7fbb      	ldrb	r3, [r7, #30]
 8001388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800138a:	fb02 f203 	mul.w	r2, r2, r3
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4413      	add	r3, r2
 8001396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139a:	edc7 7a00 	vstr	s15, [r7]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
			for (uint32_t j = 0; j < scale; j++){
 80013a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a6:	3301      	adds	r3, #1
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013aa:	7fbb      	ldrb	r3, [r7, #30]
 80013ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3dd      	bcc.n	800136e <ModifyRecFreq+0x4a>
		for (uint32_t i = 0; i < nSamples; i++){
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	3301      	adds	r3, #1
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3d3      	bcc.n	8001368 <ModifyRecFreq+0x44>
			}
		}
		return;
 80013c0:	e04f      	b.n	8001462 <ModifyRecFreq+0x13e>
	}

	uint8_t scale = (uint8_t)(mod);
 80013c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ca:	edc7 7a00 	vstr	s15, [r7]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	77fb      	strb	r3, [r7, #31]

	if (scale == 1){
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d120      	bne.n	800141a <ModifyRecFreq+0xf6>
		for (uint32_t i = 0; i < nSamples; i++){
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
 80013dc:	e018      	b.n	8001410 <ModifyRecFreq+0xec>
			outArr[i] = vol_mod * inArr[i];
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	4413      	add	r3, r2
 80013fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001400:	edc7 7a00 	vstr	s15, [r7]
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < nSamples; i++){
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	3301      	adds	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
 8001410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3e2      	bcc.n	80013de <ModifyRecFreq+0xba>
 8001418:	e023      	b.n	8001462 <ModifyRecFreq+0x13e>
	}

	// Subsample
	else{

		for (uint32_t i = 0; i < nSamples; i+=scale){
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
 800141e:	e01c      	b.n	800145a <ModifyRecFreq+0x136>
			outArr[(uint32_t)(i/scale)] = vol_mod * inArr[i];
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001430:	edd7 7a01 	vldr	s15, [r7, #4]
 8001434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	6a3a      	ldr	r2, [r7, #32]
 800143c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4413      	add	r3, r2
 8001444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001448:	edc7 7a00 	vstr	s15, [r7]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < nSamples; i+=scale){
 8001452:	7ffb      	ldrb	r3, [r7, #31]
 8001454:	6a3a      	ldr	r2, [r7, #32]
 8001456:	4413      	add	r3, r2
 8001458:	623b      	str	r3, [r7, #32]
 800145a:	6a3a      	ldr	r2, [r7, #32]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3de      	bcc.n	8001420 <ModifyRecFreq+0xfc>
		}

	}
}
 8001462:	3734      	adds	r7, #52	; 0x34
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d102      	bne.n	8001484 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>
		currState_flash = HALFPT;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
	}
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40007400 	.word	0x40007400
 8001494:	2000e965 	.word	0x2000e965

08001498 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <HAL_DAC_ConvCpltCallbackCh1+0x24>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d102      	bne.n	80014b0 <HAL_DAC_ConvCpltCallbackCh1+0x18>
		currState_flash = DONE;
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 80014ac:	2202      	movs	r2, #2
 80014ae:	701a      	strb	r2, [r3, #0]
	}
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40007400 	.word	0x40007400
 80014c0:	2000e965 	.word	0x2000e965

080014c4 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
//	if (hdfsdm_filter->Instance == DFSDM1_Filter0){
		doneRecording = 1;
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
//	}
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000060 	.word	0x20000060

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2108      	movs	r1, #8
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <Error_Handler+0x14>)
 80014ee:	f004 f9a3 	bl	8005838 <HAL_GPIO_WritePin>
  __BKPT();
 80014f2:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	48001000 	.word	0x48001000

080014fc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <I2Cx_MspInit+0xa8>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <I2Cx_MspInit+0xa8>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <I2Cx_MspInit+0xa8>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800151c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001520:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001522:	2312      	movs	r3, #18
 8001524:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001526:	2301      	movs	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800152e:	2304      	movs	r3, #4
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	481b      	ldr	r0, [pc, #108]	; (80015a8 <I2Cx_MspInit+0xac>)
 800153a:	f003 fee1 	bl	8005300 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <I2Cx_MspInit+0xac>)
 8001546:	f003 fedb 	bl	8005300 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <I2Cx_MspInit+0xa8>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <I2Cx_MspInit+0xa8>)
 8001550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001554:	6593      	str	r3, [r2, #88]	; 0x58
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <I2Cx_MspInit+0xa8>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <I2Cx_MspInit+0xa8>)
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <I2Cx_MspInit+0xa8>)
 8001568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800156c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <I2Cx_MspInit+0xa8>)
 8001570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <I2Cx_MspInit+0xa8>)
 8001574:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001578:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	210f      	movs	r1, #15
 800157e:	2021      	movs	r0, #33	; 0x21
 8001580:	f002 fdc9 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001584:	2021      	movs	r0, #33	; 0x21
 8001586:	f002 fde2 	bl	800414e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	210f      	movs	r1, #15
 800158e:	2022      	movs	r0, #34	; 0x22
 8001590:	f002 fdc1 	bl	8004116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001594:	2022      	movs	r0, #34	; 0x22
 8001596:	f002 fdda 	bl	800414e <HAL_NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400

080015ac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <I2Cx_Init+0x54>)
 80015b8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <I2Cx_Init+0x58>)
 80015be:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff89 	bl	80014fc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f004 f95f 	bl	80058ae <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80015f0:	2100      	movs	r1, #0
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f004 fe64 	bl	80062c0 <HAL_I2CEx_ConfigAnalogFilter>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40005800 	.word	0x40005800
 8001604:	00702681 	.word	0x00702681

08001608 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af04      	add	r7, sp, #16
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	72fb      	strb	r3, [r7, #11]
 800161a:	460b      	mov	r3, r1
 800161c:	813b      	strh	r3, [r7, #8]
 800161e:	4613      	mov	r3, r2
 8001620:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	b299      	uxth	r1, r3
 800162a:	88f8      	ldrh	r0, [r7, #6]
 800162c:	893a      	ldrh	r2, [r7, #8]
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4603      	mov	r3, r0
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f004 fb08 	bl	8005c54 <HAL_I2C_Mem_Read>
 8001644:	4603      	mov	r3, r0
 8001646:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	4619      	mov	r1, r3
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f832 	bl	80016bc <I2Cx_Error>
  }
  return status;
 8001658:	7dfb      	ldrb	r3, [r7, #23]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b08a      	sub	sp, #40	; 0x28
 8001666:	af04      	add	r7, sp, #16
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	4608      	mov	r0, r1
 800166c:	4611      	mov	r1, r2
 800166e:	461a      	mov	r2, r3
 8001670:	4603      	mov	r3, r0
 8001672:	72fb      	strb	r3, [r7, #11]
 8001674:	460b      	mov	r3, r1
 8001676:	813b      	strh	r3, [r7, #8]
 8001678:	4613      	mov	r3, r2
 800167a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	b299      	uxth	r1, r3
 8001684:	88f8      	ldrh	r0, [r7, #6]
 8001686:	893a      	ldrh	r2, [r7, #8]
 8001688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4603      	mov	r3, r0
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f004 f9c7 	bl	8005a2c <HAL_I2C_Mem_Write>
 800169e:	4603      	mov	r3, r0
 80016a0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80016a8:	7afb      	ldrb	r3, [r7, #11]
 80016aa:	4619      	mov	r1, r3
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f805 	bl	80016bc <I2Cx_Error>
  }
  return status;
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f004 f97f 	bl	80059cc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff6c 	bl	80015ac <I2Cx_Init>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <SENSOR_IO_Init+0x10>)
 80016e2:	f7ff ff63 	bl	80015ac <I2Cx_Init>
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000f348 	.word	0x2000f348

080016f0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	460b      	mov	r3, r1
 80016fc:	71bb      	strb	r3, [r7, #6]
 80016fe:	4613      	mov	r3, r2
 8001700:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	b29a      	uxth	r2, r3
 8001706:	79f9      	ldrb	r1, [r7, #7]
 8001708:	2301      	movs	r3, #1
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	1d7b      	adds	r3, r7, #5
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <SENSOR_IO_Write+0x30>)
 8001714:	f7ff ffa5 	bl	8001662 <I2Cx_WriteMultiple>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000f348 	.word	0x2000f348

08001724 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4603      	mov	r3, r0
 800172c:	460a      	mov	r2, r1
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	4613      	mov	r3, r2
 8001732:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	b29a      	uxth	r2, r3
 800173c:	79f9      	ldrb	r1, [r7, #7]
 800173e:	2301      	movs	r3, #1
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	f107 030f 	add.w	r3, r7, #15
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2301      	movs	r3, #1
 800174a:	4804      	ldr	r0, [pc, #16]	; (800175c <SENSOR_IO_Read+0x38>)
 800174c:	f7ff ff5c 	bl	8001608 <I2Cx_ReadMultiple>

  return read_value;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000f348 	.word	0x2000f348

08001760 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af02      	add	r7, sp, #8
 8001766:	603a      	str	r2, [r7, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	460b      	mov	r3, r1
 8001770:	71bb      	strb	r3, [r7, #6]
 8001772:	4613      	mov	r3, r2
 8001774:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	b29a      	uxth	r2, r3
 800177a:	79f9      	ldrb	r1, [r7, #7]
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <SENSOR_IO_ReadMultiple+0x38>)
 8001788:	f7ff ff3e 	bl	8001608 <I2Cx_ReadMultiple>
 800178c:	4603      	mov	r3, r0
 800178e:	b29b      	uxth	r3, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000f348 	.word	0x2000f348

0800179c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80017a6:	2300      	movs	r3, #0
 80017a8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <BSP_ACCELERO_Init+0x74>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	4798      	blx	r3
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b6a      	cmp	r3, #106	; 0x6a
 80017b4:	d002      	beq.n	80017bc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e024      	b.n	8001806 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <BSP_ACCELERO_Init+0x78>)
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <BSP_ACCELERO_Init+0x74>)
 80017c0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80017c2:	2330      	movs	r3, #48	; 0x30
 80017c4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80017ca:	2300      	movs	r3, #0
 80017cc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80017ce:	2340      	movs	r3, #64	; 0x40
 80017d0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80017da:	797a      	ldrb	r2, [r7, #5]
 80017dc:	7abb      	ldrb	r3, [r7, #10]
 80017de:	4313      	orrs	r3, r2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80017e4:	7a3b      	ldrb	r3, [r7, #8]
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <BSP_ACCELERO_Init+0x78>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	89ba      	ldrh	r2, [r7, #12]
 8001802:	4610      	mov	r0, r2
 8001804:	4798      	blx	r3
  }  

  return ret;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000000 	.word	0x20000000
 8001814:	2000007c 	.word	0x2000007c

08001818 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
    }
  }
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000007c 	.word	0x2000007c

08001848 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <BSP_QSPI_Init+0xd0>)
 8001850:	4a32      	ldr	r2, [pc, #200]	; (800191c <BSP_QSPI_Init+0xd4>)
 8001852:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001854:	4830      	ldr	r0, [pc, #192]	; (8001918 <BSP_QSPI_Init+0xd0>)
 8001856:	f004 fea5 	bl	80065a4 <HAL_QSPI_DeInit>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e054      	b.n	800190e <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001864:	f000 f964 	bl	8001b30 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <BSP_QSPI_Init+0xd0>)
 800186a:	2202      	movs	r2, #2
 800186c:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <BSP_QSPI_Init+0xd0>)
 8001870:	2204      	movs	r2, #4
 8001872:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <BSP_QSPI_Init+0xd0>)
 8001876:	2210      	movs	r2, #16
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800187e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8001892:	2320      	movs	r3, #32
 8001894:	e003      	b.n	800189e <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 800189e:	3b01      	subs	r3, #1
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018a4:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80018b2:	4819      	ldr	r0, [pc, #100]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018b4:	f004 fe00 	bl	80064b8 <HAL_QSPI_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e025      	b.n	800190e <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80018c2:	4815      	ldr	r0, [pc, #84]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018c4:	f000 f974 	bl	8001bb0 <QSPI_ResetMemory>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 80018ce:	2304      	movs	r3, #4
 80018d0:	e01d      	b.n	800190e <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80018d2:	2101      	movs	r1, #1
 80018d4:	4810      	ldr	r0, [pc, #64]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018d6:	f000 fa35 	bl	8001d44 <QSPI_QuadMode>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e014      	b.n	800190e <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80018e4:	2101      	movs	r1, #1
 80018e6:	480c      	ldr	r0, [pc, #48]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018e8:	f000 fad4 	bl	8001e94 <QSPI_HighPerfMode>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00b      	b.n	800190e <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <BSP_QSPI_Init+0xd0>)
 80018fe:	f004 fddb 	bl	80064b8 <HAL_QSPI_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000f394 	.word	0x2000f394
 800191c:	a0001000 	.word	0xa0001000

08001920 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b092      	sub	sp, #72	; 0x48
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 800192c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8001932:	23eb      	movs	r3, #235	; 0xeb
 8001934:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8001936:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 800193c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001940:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001946:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8001950:	23aa      	movs	r3, #170	; 0xaa
 8001952:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8001954:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800195a:	2304      	movs	r3, #4
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8001966:	2300      	movs	r3, #0
 8001968:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800196a:	2300      	movs	r3, #0
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4619      	mov	r1, r3
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <BSP_QSPI_Read+0x88>)
 800197a:	f004 fe37 	bl	80065ec <HAL_QSPI_Command>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e00b      	b.n	80019a0 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <BSP_QSPI_Read+0x88>)
 8001990:	f004 ff21 	bl	80067d6 <HAL_QSPI_Receive>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3748      	adds	r7, #72	; 0x48
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000f394 	.word	0x2000f394

080019ac <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b096      	sub	sp, #88	; 0x58
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019c0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80019c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d901      	bls.n	80019ce <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80019da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 80019e0:	2338      	movs	r3, #56	; 0x38
 80019e2:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80019e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80019ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ee:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80019f4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a02:	2300      	movs	r3, #0
 8001a04:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a06:	2300      	movs	r3, #0
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0c:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001a12:	4824      	ldr	r0, [pc, #144]	; (8001aa4 <BSP_QSPI_Write+0xf8>)
 8001a14:	f000 f910 	bl	8001c38 <QSPI_WriteEnable>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e03b      	b.n	8001a9a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481d      	ldr	r0, [pc, #116]	; (8001aa4 <BSP_QSPI_Write+0xf8>)
 8001a2e:	f004 fddd 	bl	80065ec <HAL_QSPI_Command>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e02e      	b.n	8001a9a <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	68f9      	ldr	r1, [r7, #12]
 8001a42:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <BSP_QSPI_Write+0xf8>)
 8001a44:	f004 fe30 	bl	80066a8 <HAL_QSPI_Transmit>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e023      	b.n	8001a9a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001a52:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a56:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <BSP_QSPI_Write+0xf8>)
 8001a58:	f000 f93a 	bl	8001cd0 <QSPI_AutoPollingMemReady>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e019      	b.n	8001a9a <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001a66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6a:	4413      	add	r3, r2
 8001a6c:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8001a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d203      	bcs.n	8001a8a <BSP_QSPI_Write+0xde>
 8001a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	e001      	b.n	8001a8e <BSP_QSPI_Write+0xe2>
 8001a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8e:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001a90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d3b8      	bcc.n	8001a0a <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3758      	adds	r7, #88	; 0x58
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000f394 	.word	0x2000f394

08001aa8 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b090      	sub	sp, #64	; 0x40
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab4:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8001ab6:	23d8      	movs	r3, #216	; 0xd8
 8001ab8:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac4:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ada:	2300      	movs	r3, #0
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001ae2:	4812      	ldr	r0, [pc, #72]	; (8001b2c <BSP_QSPI_Erase_Block+0x84>)
 8001ae4:	f000 f8a8 	bl	8001c38 <QSPI_WriteEnable>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e017      	b.n	8001b22 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4619      	mov	r1, r3
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <BSP_QSPI_Erase_Block+0x84>)
 8001afe:	f004 fd75 	bl	80065ec <HAL_QSPI_Command>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e00a      	b.n	8001b22 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001b0c:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001b10:	4806      	ldr	r0, [pc, #24]	; (8001b2c <BSP_QSPI_Erase_Block+0x84>)
 8001b12:	f000 f8dd 	bl	8001cd0 <QSPI_AutoPollingMemReady>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3740      	adds	r7, #64	; 0x40
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000f394 	.word	0x2000f394

08001b30 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6513      	str	r3, [r2, #80]	; 0x50
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b6c:	f043 0310 	orr.w	r3, r3, #16
 8001b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <BSP_QSPI_MspInit+0x78>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8001b7e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b82:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b90:	230a      	movs	r3, #10
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <BSP_QSPI_MspInit+0x7c>)
 8001b9c:	f003 fbb0 	bl	8005300 <HAL_GPIO_Init>
}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48001000 	.word	0x48001000

08001bb0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bbc:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001bbe:	2366      	movs	r3, #102	; 0x66
 8001bc0:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4619      	mov	r1, r3
 8001be8:	4812      	ldr	r0, [pc, #72]	; (8001c34 <QSPI_ResetMemory+0x84>)
 8001bea:	f004 fcff 	bl	80065ec <HAL_QSPI_Command>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e019      	b.n	8001c2c <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001bf8:	2399      	movs	r3, #153	; 0x99
 8001bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4619      	mov	r1, r3
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <QSPI_ResetMemory+0x84>)
 8001c08:	f004 fcf0 	bl	80065ec <HAL_QSPI_Command>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00a      	b.n	8001c2c <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001c16:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <QSPI_ResetMemory+0x84>)
 8001c1c:	f000 f858 	bl	8001cd0 <QSPI_AutoPollingMemReady>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3740      	adds	r7, #64	; 0x40
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000f394 	.word	0x2000f394

08001c38 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b096      	sub	sp, #88	; 0x58
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001c46:	2306      	movs	r3, #6
 8001c48:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001c62:	2300      	movs	r3, #0
 8001c64:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4816      	ldr	r0, [pc, #88]	; (8001ccc <QSPI_WriteEnable+0x94>)
 8001c72:	f004 fcbb 	bl	80065ec <HAL_QSPI_Command>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e020      	b.n	8001cc2 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8001c80:	2302      	movs	r3, #2
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8001c84:	2302      	movs	r3, #2
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001c90:	2310      	movs	r3, #16
 8001c92:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c98:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001c9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ca2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ca4:	f107 0208 	add.w	r2, r7, #8
 8001ca8:	f107 0120 	add.w	r1, r7, #32
 8001cac:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cb0:	4806      	ldr	r0, [pc, #24]	; (8001ccc <QSPI_WriteEnable+0x94>)
 8001cb2:	f004 fe32 	bl	800691a <HAL_QSPI_AutoPolling>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3758      	adds	r7, #88	; 0x58
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000f394 	.word	0x2000f394

08001cd0 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b096      	sub	sp, #88	; 0x58
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001d12:	2310      	movs	r3, #16
 8001d14:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1a:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001d1c:	f107 0208 	add.w	r2, r7, #8
 8001d20:	f107 0120 	add.w	r1, r7, #32
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <QSPI_AutoPollingMemReady+0x70>)
 8001d28:	f004 fdf7 	bl	800691a <HAL_QSPI_AutoPolling>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3758      	adds	r7, #88	; 0x58
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000f394 	.word	0x2000f394

08001d44 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b092      	sub	sp, #72	; 0x48
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001d56:	2305      	movs	r3, #5
 8001d58:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001d74:	2300      	movs	r3, #0
 8001d76:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4619      	mov	r1, r3
 8001d86:	4842      	ldr	r0, [pc, #264]	; (8001e90 <QSPI_QuadMode+0x14c>)
 8001d88:	f004 fc30 	bl	80065ec <HAL_QSPI_Command>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e077      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d96:	f107 030f 	add.w	r3, r7, #15
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4619      	mov	r1, r3
 8001da0:	483b      	ldr	r0, [pc, #236]	; (8001e90 <QSPI_QuadMode+0x14c>)
 8001da2:	f004 fd18 	bl	80067d6 <HAL_QSPI_Receive>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e06a      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001db0:	4837      	ldr	r0, [pc, #220]	; (8001e90 <QSPI_QuadMode+0x14c>)
 8001db2:	f7ff ff41 	bl	8001c38 <QSPI_WriteEnable>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e062      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e004      	b.n	8001ddc <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4619      	mov	r1, r3
 8001dea:	4829      	ldr	r0, [pc, #164]	; (8001e90 <QSPI_QuadMode+0x14c>)
 8001dec:	f004 fbfe 	bl	80065ec <HAL_QSPI_Command>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e045      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dfa:	f107 030f 	add.w	r3, r7, #15
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4619      	mov	r1, r3
 8001e04:	4822      	ldr	r0, [pc, #136]	; (8001e90 <QSPI_QuadMode+0x14c>)
 8001e06:	f004 fc4f 	bl	80066a8 <HAL_QSPI_Transmit>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e038      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001e14:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e18:	481d      	ldr	r0, [pc, #116]	; (8001e90 <QSPI_QuadMode+0x14c>)
 8001e1a:	f7ff ff59 	bl	8001cd0 <QSPI_AutoPollingMemReady>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e02e      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4619      	mov	r1, r3
 8001e36:	4816      	ldr	r0, [pc, #88]	; (8001e90 <QSPI_QuadMode+0x14c>)
 8001e38:	f004 fbd8 	bl	80065ec <HAL_QSPI_Command>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e01f      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e46:	f107 030f 	add.w	r3, r7, #15
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480f      	ldr	r0, [pc, #60]	; (8001e90 <QSPI_QuadMode+0x14c>)
 8001e52:	f004 fcc0 	bl	80067d6 <HAL_QSPI_Receive>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e012      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <QSPI_QuadMode+0x12c>
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d007      	beq.n	8001e80 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3748      	adds	r7, #72	; 0x48
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000f394 	.word	0x2000f394

08001e94 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b092      	sub	sp, #72	; 0x48
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4853      	ldr	r0, [pc, #332]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001ed8:	f004 fb88 	bl	80065ec <HAL_QSPI_Command>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e09a      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4619      	mov	r1, r3
 8001ef0:	484c      	ldr	r0, [pc, #304]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001ef2:	f004 fc70 	bl	80067d6 <HAL_QSPI_Receive>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e08d      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001f00:	2315      	movs	r3, #21
 8001f02:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4619      	mov	r1, r3
 8001f12:	4844      	ldr	r0, [pc, #272]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001f14:	f004 fb6a 	bl	80065ec <HAL_QSPI_Command>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07c      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	3301      	adds	r3, #1
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	483d      	ldr	r0, [pc, #244]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001f30:	f004 fc51 	bl	80067d6 <HAL_QSPI_Receive>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06e      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001f3e:	4839      	ldr	r0, [pc, #228]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001f40:	f7ff fe7a 	bl	8001c38 <QSPI_WriteEnable>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e066      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001f54:	7bbb      	ldrb	r3, [r7, #14]
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	73bb      	strb	r3, [r7, #14]
 8001f5e:	e004      	b.n	8001f6a <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001f60:	7bbb      	ldrb	r3, [r7, #14]
 8001f62:	f023 0302 	bic.w	r3, r3, #2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4829      	ldr	r0, [pc, #164]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001f7e:	f004 fb35 	bl	80065ec <HAL_QSPI_Command>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e047      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4619      	mov	r1, r3
 8001f96:	4823      	ldr	r0, [pc, #140]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001f98:	f004 fb86 	bl	80066a8 <HAL_QSPI_Transmit>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e03a      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001fa6:	f241 3188 	movw	r1, #5000	; 0x1388
 8001faa:	481e      	ldr	r0, [pc, #120]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001fac:	f7ff fe90 	bl	8001cd0 <QSPI_AutoPollingMemReady>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e030      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001fba:	2315      	movs	r3, #21
 8001fbc:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4815      	ldr	r0, [pc, #84]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001fce:	f004 fb0d 	bl	80065ec <HAL_QSPI_Command>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e01f      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480f      	ldr	r0, [pc, #60]	; (8002024 <QSPI_HighPerfMode+0x190>)
 8001fe8:	f004 fbf5 	bl	80067d6 <HAL_QSPI_Receive>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e012      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001ff6:	7b7b      	ldrb	r3, [r7, #13]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <QSPI_HighPerfMode+0x172>
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d007      	beq.n	8002016 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002006:	7b7b      	ldrb	r3, [r7, #13]
 8002008:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3748      	adds	r7, #72	; 0x48
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000f394 	.word	0x2000f394

08002028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_MspInit+0x44>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_MspInit+0x44>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6613      	str	r3, [r2, #96]	; 0x60
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_MspInit+0x44>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_MspInit+0x44>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_MspInit+0x44>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6593      	str	r3, [r2, #88]	; 0x58
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_MspInit+0x44>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_ADC_MspInit+0x74>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d123      	bne.n	80020da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_ADC_MspInit+0x78>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_ADC_MspInit+0x78>)
 8002098:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_ADC_MspInit+0x78>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_ADC_MspInit+0x78>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_ADC_MspInit+0x78>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_ADC_MspInit+0x78>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020c2:	2320      	movs	r3, #32
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020c6:	230b      	movs	r3, #11
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <HAL_ADC_MspInit+0x7c>)
 80020d6:	f003 f913 	bl	8005300 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	50040000 	.word	0x50040000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000800 	.word	0x48000800

080020f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <HAL_DAC_MspInit+0xc8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d14d      	bne.n	80021ae <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_DAC_MspInit+0xcc>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	4a29      	ldr	r2, [pc, #164]	; (80021bc <HAL_DAC_MspInit+0xcc>)
 8002118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_DAC_MspInit+0xcc>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_DAC_MspInit+0xcc>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_DAC_MspInit+0xcc>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_DAC_MspInit+0xcc>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002142:	2310      	movs	r3, #16
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002146:	2303      	movs	r3, #3
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002158:	f003 f8d2 	bl	8005300 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_DAC_MspInit+0xd4>)
 8002160:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 8002164:	2206      	movs	r2, #6
 8002166:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 800216a:	2210      	movs	r2, #16
 800216c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 8002188:	2220      	movs	r2, #32
 800218a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 8002194:	f002 fe7e 	bl	8004e94 <HAL_DMA_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800219e:	f7ff f9a1 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <HAL_DAC_MspInit+0xd0>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40007400 	.word	0x40007400
 80021bc:	40021000 	.word	0x40021000
 80021c0:	2000bd44 	.word	0x2000bd44
 80021c4:	40020030 	.word	0x40020030

080021c8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_DFSDM_FilterMspInit+0xf8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d131      	bne.n	800224c <HAL_DFSDM_FilterMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80021e8:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <HAL_DFSDM_FilterMspInit+0xfc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a35      	ldr	r2, [pc, #212]	; (80022c4 <HAL_DFSDM_FilterMspInit+0xfc>)
 80021f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_DFSDM_FilterMspInit+0xfc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10b      	bne.n	8002212 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_DFSDM_FilterMspInit+0x100>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	4a32      	ldr	r2, [pc, #200]	; (80022c8 <HAL_DFSDM_FilterMspInit+0x100>)
 8002200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002204:	6613      	str	r3, [r2, #96]	; 0x60
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_DFSDM_FilterMspInit+0x100>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_DFSDM_FilterMspInit+0x100>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	4a2c      	ldr	r2, [pc, #176]	; (80022c8 <HAL_DFSDM_FilterMspInit+0x100>)
 8002218:	f043 0310 	orr.w	r3, r3, #16
 800221c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_DFSDM_FilterMspInit+0x100>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800222a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800223c:	2306      	movs	r3, #6
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4821      	ldr	r0, [pc, #132]	; (80022cc <HAL_DFSDM_FilterMspInit+0x104>)
 8002248:	f003 f85a 	bl	8005300 <HAL_GPIO_Init>
  /* USER CODE END DFSDM1_MspInit 1 */
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_DFSDM_FilterMspInit+0x108>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d130      	bne.n	80022b8 <HAL_DFSDM_FilterMspInit+0xf0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <HAL_DFSDM_FilterMspInit+0x110>)
 800225a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8002276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 800227e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002282:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8002290:	4810      	ldr	r0, [pc, #64]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8002292:	f002 fdff 	bl	8004e94 <HAL_DMA_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_DFSDM_FilterMspInit+0xd8>
    {
      Error_Handler();
 800229c:	f7ff f922 	bl	80014e4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_DFSDM_FilterMspInit+0x10c>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000084 	.word	0x20000084
 80022c4:	20000080 	.word	0x20000080
 80022c8:	40021000 	.word	0x40021000
 80022cc:	48001000 	.word	0x48001000
 80022d0:	40016100 	.word	0x40016100
 80022d4:	2000e9e8 	.word	0x2000e9e8
 80022d8:	40020044 	.word	0x40020044

080022dc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d131      	bne.n	8002360 <HAL_DFSDM_ChannelMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_DFSDM_ChannelMspInit+0x90>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a1a      	ldr	r2, [pc, #104]	; (800236c <HAL_DFSDM_ChannelMspInit+0x90>)
 8002304:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_DFSDM_ChannelMspInit+0x90>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10b      	bne.n	8002326 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_DFSDM_ChannelMspInit+0x94>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_DFSDM_ChannelMspInit+0x94>)
 8002314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002318:	6613      	str	r3, [r2, #96]	; 0x60
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_DFSDM_ChannelMspInit+0x94>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_DFSDM_ChannelMspInit+0x94>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_DFSDM_ChannelMspInit+0x94>)
 800232c:	f043 0310 	orr.w	r3, r3, #16
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_DFSDM_ChannelMspInit+0x94>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800233e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002350:	2306      	movs	r3, #6
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <HAL_DFSDM_ChannelMspInit+0x98>)
 800235c:	f002 ffd0 	bl	8005300 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	; 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000084 	.word	0x20000084
 800236c:	20000080 	.word	0x20000080
 8002370:	40021000 	.word	0x40021000
 8002374:	48001000 	.word	0x48001000

08002378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_I2C_MspInit+0x7c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d128      	bne.n	80023ec <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_I2C_MspInit+0x80>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <HAL_I2C_MspInit+0x80>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_I2C_MspInit+0x80>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b8:	2312      	movs	r3, #18
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023bc:	2301      	movs	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023c4:	2304      	movs	r3, #4
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	480b      	ldr	r0, [pc, #44]	; (80023fc <HAL_I2C_MspInit+0x84>)
 80023d0:	f002 ff96 	bl	8005300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_I2C_MspInit+0x80>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_I2C_MspInit+0x80>)
 80023da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_I2C_MspInit+0x80>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40005800 	.word	0x40005800
 80023f8:	40021000 	.word	0x40021000
 80023fc:	48000400 	.word	0x48000400

08002400 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_I2C_MspDeInit+0x3c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10f      	bne.n	8002432 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_I2C_MspDeInit+0x40>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_I2C_MspDeInit+0x40>)
 8002418:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800241c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800241e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002422:	4808      	ldr	r0, [pc, #32]	; (8002444 <HAL_I2C_MspDeInit+0x44>)
 8002424:	f003 f914 	bl	8005650 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_I2C_MspDeInit+0x44>)
 800242e:	f003 f90f 	bl	8005650 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40005800 	.word	0x40005800
 8002440:	40021000 	.word	0x40021000
 8002444:	48000400 	.word	0x48000400

08002448 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <HAL_QSPI_MspInit+0x7c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d128      	bne.n	80024bc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_QSPI_MspInit+0x80>)
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <HAL_QSPI_MspInit+0x80>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6513      	str	r3, [r2, #80]	; 0x50
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_QSPI_MspInit+0x80>)
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_QSPI_MspInit+0x80>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <HAL_QSPI_MspInit+0x80>)
 8002488:	f043 0310 	orr.w	r3, r3, #16
 800248c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_QSPI_MspInit+0x80>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800249a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800249e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80024ac:	230a      	movs	r3, #10
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <HAL_QSPI_MspInit+0x84>)
 80024b8:	f002 ff22 	bl	8005300 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80024bc:	bf00      	nop
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	a0001000 	.word	0xa0001000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	48001000 	.word	0x48001000

080024d0 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a08      	ldr	r2, [pc, #32]	; (8002500 <HAL_QSPI_MspDeInit+0x30>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d10a      	bne.n	80024f8 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_QSPI_MspDeInit+0x34>)
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_QSPI_MspDeInit+0x34>)
 80024e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ec:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80024ee:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80024f2:	4805      	ldr	r0, [pc, #20]	; (8002508 <HAL_QSPI_MspDeInit+0x38>)
 80024f4:	f003 f8ac 	bl	8005650 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	a0001000 	.word	0xa0001000
 8002504:	40021000 	.word	0x40021000
 8002508:	48001000 	.word	0x48001000

0800250c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251c:	d113      	bne.n	8002546 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_TIM_Base_MspInit+0x44>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <HAL_TIM_Base_MspInit+0x44>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_TIM_Base_MspInit+0x44>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	201c      	movs	r0, #28
 800253c:	f001 fdeb 	bl	8004116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002540:	201c      	movs	r0, #28
 8002542:	f001 fe04 	bl	800414e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <HAL_UART_MspInit+0x80>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d129      	bne.n	80025ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_UART_MspInit+0x84>)
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_UART_MspInit+0x84>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6613      	str	r3, [r2, #96]	; 0x60
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_UART_MspInit+0x84>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_UART_MspInit+0x84>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_UART_MspInit+0x84>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_UART_MspInit+0x84>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b8:	2307      	movs	r3, #7
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4619      	mov	r1, r3
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c6:	f002 fe9b 	bl	8005300 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40021000 	.word	0x40021000

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <MemManage_Handler+0x4>

080025f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <BusFault_Handler+0x4>

080025fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <UsageFault_Handler+0x4>

08002602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002630:	f000 f8dc 	bl	80027ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <DMA1_Channel3_IRQHandler+0x10>)
 800263e:	f002 fd7f 	bl	8005140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000bd44 	.word	0x2000bd44

0800264c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <DMA1_Channel4_IRQHandler+0x10>)
 8002652:	f002 fd75 	bl	8005140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000e9e8 	.word	0x2000e9e8

08002660 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <TIM2_IRQHandler+0x10>)
 8002666:	f005 ff69 	bl	800853c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000ea30 	.word	0x2000ea30

08002674 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800267c:	f003 f8f4 	bl	8005868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <SystemInit+0x64>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <SystemInit+0x64>)
 8002690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <SystemInit+0x68>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a13      	ldr	r2, [pc, #76]	; (80026ec <SystemInit+0x68>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <SystemInit+0x68>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <SystemInit+0x68>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <SystemInit+0x68>)
 80026b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80026b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <SystemInit+0x68>)
 80026bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <SystemInit+0x68>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <SystemInit+0x68>)
 80026c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <SystemInit+0x68>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SystemInit+0x64>)
 80026d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026da:	609a      	str	r2, [r3, #8]
#endif
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00
 80026ec:	40021000 	.word	0x40021000

080026f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026f4:	f7ff ffc6 	bl	8002684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026fa:	e003      	b.n	8002704 <LoopCopyDataInit>

080026fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002700:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002702:	3104      	adds	r1, #4

08002704 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002704:	480a      	ldr	r0, [pc, #40]	; (8002730 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002708:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800270a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800270c:	d3f6      	bcc.n	80026fc <CopyDataInit>
	ldr	r2, =_sbss
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002710:	e002      	b.n	8002718 <LoopFillZerobss>

08002712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002712:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002714:	f842 3b04 	str.w	r3, [r2], #4

08002718 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <LoopForever+0x16>)
	cmp	r2, r3
 800271a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800271c:	d3f9      	bcc.n	8002712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800271e:	f006 ff71 	bl	8009604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002722:	f7fd ffeb 	bl	80006fc <main>

08002726 <LoopForever>:

LoopForever:
    b LoopForever
 8002726:	e7fe      	b.n	8002726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002728:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800272c:	08009ed0 	.word	0x08009ed0
	ldr	r0, =_sdata
 8002730:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002734:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8002738:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 800273c:	2000f3dc 	.word	0x2000f3dc

08002740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC1_2_IRQHandler>

08002742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274c:	2003      	movs	r0, #3
 800274e:	f001 fcd7 	bl	8004100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002752:	2000      	movs	r0, #0
 8002754:	f000 f80e 	bl	8002774 <HAL_InitTick>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	71fb      	strb	r3, [r7, #7]
 8002762:	e001      	b.n	8002768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002764:	f7ff fc60 	bl	8002028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002768:	79fb      	ldrb	r3, [r7, #7]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_InitTick+0x6c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d023      	beq.n	80027d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <HAL_InitTick+0x70>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <HAL_InitTick+0x6c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002796:	fbb3 f3f1 	udiv	r3, r3, r1
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fce3 	bl	800416a <HAL_SYSTICK_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b0f      	cmp	r3, #15
 80027ae:	d809      	bhi.n	80027c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b0:	2200      	movs	r2, #0
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f001 fcad 	bl	8004116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_InitTick+0x74>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e007      	b.n	80027d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e004      	b.n	80027d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e001      	b.n	80027d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000040 	.word	0x20000040
 80027e4:	20000038 	.word	0x20000038
 80027e8:	2000003c 	.word	0x2000003c

080027ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x20>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_IncTick+0x24>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <HAL_IncTick+0x24>)
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000040 	.word	0x20000040
 8002810:	2000f3d8 	.word	0x2000f3d8

08002814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return uwTick;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_GetTick+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	2000f3d8 	.word	0x2000f3d8

0800282c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff ffee 	bl	8002814 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d005      	beq.n	8002852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_Delay+0x40>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002852:	bf00      	nop
 8002854:	f7ff ffde 	bl	8002814 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d8f7      	bhi.n	8002854 <HAL_Delay+0x28>
  {
  }
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000040 	.word	0x20000040

08002870 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	609a      	str	r2, [r3, #8]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <LL_ADC_SetOffset+0x44>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	4313      	orrs	r3, r2
 8002908:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	03fff000 	.word	0x03fff000

08002920 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3360      	adds	r3, #96	; 0x60
 800292e:	461a      	mov	r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3360      	adds	r3, #96	; 0x60
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3330      	adds	r3, #48	; 0x30
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	4413      	add	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	211f      	movs	r1, #31
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 011f 	and.w	r1, r3, #31
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3314      	adds	r3, #20
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0e5b      	lsrs	r3, r3, #25
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0d1b      	lsrs	r3, r3, #20
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2107      	movs	r1, #7
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	401a      	ands	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	0d1b      	lsrs	r3, r3, #20
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	431a      	orrs	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0318 	and.w	r3, r3, #24
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a7c:	40d9      	lsrs	r1, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	400b      	ands	r3, r1
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	431a      	orrs	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	0007ffff 	.word	0x0007ffff

08002aa0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 031f 	and.w	r3, r3, #31
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6093      	str	r3, [r2, #8]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b10:	d101      	bne.n	8002b16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b60:	d101      	bne.n	8002b66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bb0:	f043 0202 	orr.w	r2, r3, #2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <LL_ADC_IsEnabled+0x18>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <LL_ADC_IsEnabled+0x1a>
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d101      	bne.n	8002c02 <LL_ADC_IsDisableOngoing+0x18>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_ADC_IsDisableOngoing+0x1a>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c4c:	f043 0210 	orr.w	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d101      	bne.n	8002c78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d101      	bne.n	8002cc6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e134      	b.n	8002f58 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff f9b7 	bl	8002070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fef1 	bl	8002afc <LL_ADC_IsDeepPowerDownEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fed7 	bl	8002ad8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff0c 	bl	8002b4c <LL_ADC_IsInternalRegulatorEnabled>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d113      	bne.n	8002d62 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fef0 	bl	8002b24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d44:	4b86      	ldr	r3, [pc, #536]	; (8002f60 <HAL_ADC_Init+0x28c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	4a86      	ldr	r2, [pc, #536]	; (8002f64 <HAL_ADC_Init+0x290>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d54:	e002      	b.n	8002d5c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f9      	bne.n	8002d56 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fef0 	bl	8002b4c <LL_ADC_IsInternalRegulatorEnabled>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f043 0210 	orr.w	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff64 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8002d98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 80cf 	bne.w	8002f46 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 80cb 	bne.w	8002f46 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002db8:	f043 0202 	orr.w	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fefd 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d115      	bne.n	8002dfc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dd0:	4865      	ldr	r0, [pc, #404]	; (8002f68 <HAL_ADC_Init+0x294>)
 8002dd2:	f7ff fef7 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4864      	ldr	r0, [pc, #400]	; (8002f6c <HAL_ADC_Init+0x298>)
 8002dda:	f7ff fef3 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002dde:	4603      	mov	r3, r0
 8002de0:	431c      	orrs	r4, r3
 8002de2:	4863      	ldr	r0, [pc, #396]	; (8002f70 <HAL_ADC_Init+0x29c>)
 8002de4:	f7ff feee 	bl	8002bc4 <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4323      	orrs	r3, r4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4619      	mov	r1, r3
 8002df6:	485f      	ldr	r0, [pc, #380]	; (8002f74 <HAL_ADC_Init+0x2a0>)
 8002df8:	f7ff fd3a 	bl	8002870 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7e5b      	ldrb	r3, [r3, #25]
 8002e00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d106      	bne.n	8002e38 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	045b      	lsls	r3, r3, #17
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_ADC_Init+0x2a4>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	430b      	orrs	r3, r1
 8002e66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fef7 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8002e72:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff18 	bl	8002cae <LL_ADC_INJ_IsConversionOngoing>
 8002e7e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d13d      	bne.n	8002f02 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d13a      	bne.n	8002f02 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e90:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e98:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea8:	f023 0302 	bic.w	r3, r3, #2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	69b9      	ldr	r1, [r7, #24]
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d118      	bne.n	8002ef2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	611a      	str	r2, [r3, #16]
 8002ef0:	e007      	b.n	8002f02 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10c      	bne.n	8002f24 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f023 010f 	bic.w	r1, r3, #15
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	1e5a      	subs	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
 8002f22:	e007      	b.n	8002f34 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 020f 	bic.w	r2, r2, #15
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f023 0303 	bic.w	r3, r3, #3
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
 8002f44:	e007      	b.n	8002f56 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f043 0210 	orr.w	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3724      	adds	r7, #36	; 0x24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	20000038 	.word	0x20000038
 8002f64:	053e2d63 	.word	0x053e2d63
 8002f68:	50040000 	.word	0x50040000
 8002f6c:	50040100 	.word	0x50040100
 8002f70:	50040200 	.word	0x50040200
 8002f74:	50040300 	.word	0x50040300
 8002f78:	fff0c007 	.word	0xfff0c007

08002f7c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f84:	4857      	ldr	r0, [pc, #348]	; (80030e4 <HAL_ADC_Start+0x168>)
 8002f86:	f7ff fd8b 	bl	8002aa0 <LL_ADC_GetMultimode>
 8002f8a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fe65 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f040 809c 	bne.w	80030d6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_Start+0x30>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e097      	b.n	80030dc <HAL_ADC_Start+0x160>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fe4f 	bl	8003c58 <ADC_Enable>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 8083 	bne.w	80030cc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a42      	ldr	r2, [pc, #264]	; (80030e8 <HAL_ADC_Start+0x16c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d002      	beq.n	8002fea <HAL_ADC_Start+0x6e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	e000      	b.n	8002fec <HAL_ADC_Start+0x70>
 8002fea:	4b40      	ldr	r3, [pc, #256]	; (80030ec <HAL_ADC_Start+0x170>)
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d002      	beq.n	8002ffa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	d106      	bne.n	8003022 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	f023 0206 	bic.w	r2, r3, #6
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	659a      	str	r2, [r3, #88]	; 0x58
 8003020:	e002      	b.n	8003028 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	221c      	movs	r2, #28
 800302e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <HAL_ADC_Start+0x16c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d002      	beq.n	8003048 <HAL_ADC_Start+0xcc>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	e000      	b.n	800304a <HAL_ADC_Start+0xce>
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_ADC_Start+0x170>)
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	4293      	cmp	r3, r2
 8003050:	d008      	beq.n	8003064 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d002      	beq.n	8003064 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b09      	cmp	r3, #9
 8003062:	d114      	bne.n	800308e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800307a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fdc2 	bl	8002c10 <LL_ADC_REG_StartConversion>
 800308c:	e025      	b.n	80030da <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <HAL_ADC_Start+0x16c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d002      	beq.n	80030aa <HAL_ADC_Start+0x12e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	e000      	b.n	80030ac <HAL_ADC_Start+0x130>
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_ADC_Start+0x170>)
 80030ac:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00f      	beq.n	80030da <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
 80030ca:	e006      	b.n	80030da <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80030d4:	e001      	b.n	80030da <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
 80030d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	50040300 	.word	0x50040300
 80030e8:	50040100 	.word	0x50040100
 80030ec:	50040000 	.word	0x50040000

080030f0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_ADC_Stop+0x16>
 8003102:	2302      	movs	r3, #2
 8003104:	e023      	b.n	800314e <HAL_ADC_Stop+0x5e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800310e:	2103      	movs	r1, #3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fced 	bl	8003af0 <ADC_ConversionStop>
 8003116:	4603      	mov	r3, r0
 8003118:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fdf3 	bl	8003d0c <ADC_Disable>
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003162:	4862      	ldr	r0, [pc, #392]	; (80032ec <HAL_ADC_PollForConversion+0x194>)
 8003164:	f7ff fc9c 	bl	8002aa0 <LL_ADC_GetMultimode>
 8003168:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b08      	cmp	r3, #8
 8003170:	d102      	bne.n	8003178 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003172:	2308      	movs	r3, #8
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e02a      	b.n	80031ce <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d002      	beq.n	800318a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b09      	cmp	r3, #9
 8003188:	d111      	bne.n	80031ae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e09d      	b.n	80032e4 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031a8:	2304      	movs	r3, #4
 80031aa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031ac:	e00f      	b.n	80031ce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031ae:	484f      	ldr	r0, [pc, #316]	; (80032ec <HAL_ADC_PollForConversion+0x194>)
 80031b0:	f7ff fc84 	bl	8002abc <LL_ADC_GetMultiDMATransfer>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e08c      	b.n	80032e4 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031ca:	2304      	movs	r3, #4
 80031cc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031ce:	f7ff fb21 	bl	8002814 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031d4:	e01a      	b.n	800320c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d016      	beq.n	800320c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80031de:	f7ff fb19 	bl	8002814 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d302      	bcc.n	80031f4 <HAL_ADC_PollForConversion+0x9c>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e06b      	b.n	80032e4 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0dd      	beq.n	80031d6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fba9 	bl	8002982 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01c      	beq.n	8003270 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7e5b      	ldrb	r3, [r3, #25]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d118      	bne.n	8003270 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b08      	cmp	r3, #8
 800324a:	d111      	bne.n	8003270 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_ADC_PollForConversion+0x198>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d002      	beq.n	8003280 <HAL_ADC_PollForConversion+0x128>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	e000      	b.n	8003282 <HAL_ADC_PollForConversion+0x12a>
 8003280:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <HAL_ADC_PollForConversion+0x19c>)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	4293      	cmp	r3, r2
 8003288:	d008      	beq.n	800329c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d002      	beq.n	800329c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b09      	cmp	r3, #9
 800329a:	d104      	bne.n	80032a6 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	e00c      	b.n	80032c0 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <HAL_ADC_PollForConversion+0x198>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d002      	beq.n	80032b6 <HAL_ADC_PollForConversion+0x15e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	e000      	b.n	80032b8 <HAL_ADC_PollForConversion+0x160>
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_ADC_PollForConversion+0x19c>)
 80032b8:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d104      	bne.n	80032d0 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2208      	movs	r2, #8
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e008      	b.n	80032e2 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d103      	bne.n	80032e2 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	220c      	movs	r2, #12
 80032e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	50040300 	.word	0x50040300
 80032f0:	50040100 	.word	0x50040100
 80032f4:	50040000 	.word	0x50040000

080032f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b0b6      	sub	sp, #216	; 0xd8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x22>
 8003332:	2302      	movs	r3, #2
 8003334:	e3c6      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x7b0>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fc8c 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 83a7 	bne.w	8003a9e <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d824      	bhi.n	80033a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	3b02      	subs	r3, #2
 800335e:	2b03      	cmp	r3, #3
 8003360:	d81b      	bhi.n	800339a <HAL_ADC_ConfigChannel+0x86>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <HAL_ADC_ConfigChannel+0x54>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	08003379 	.word	0x08003379
 800336c:	08003381 	.word	0x08003381
 8003370:	08003389 	.word	0x08003389
 8003374:	08003391 	.word	0x08003391
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	220c      	movs	r2, #12
 800337c:	605a      	str	r2, [r3, #4]
          break;
 800337e:	e011      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2212      	movs	r2, #18
 8003384:	605a      	str	r2, [r3, #4]
          break;
 8003386:	e00d      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2218      	movs	r2, #24
 800338c:	605a      	str	r2, [r3, #4]
          break;
 800338e:	e009      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003396:	605a      	str	r2, [r3, #4]
          break;
 8003398:	e004      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2206      	movs	r2, #6
 800339e:	605a      	str	r2, [r3, #4]
          break;
 80033a0:	e000      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80033a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f7ff faf9 	bl	80029a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fc50 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 80033c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fc70 	bl	8002cae <LL_ADC_INJ_IsConversionOngoing>
 80033ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 81a6 	bne.w	8003728 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 81a1 	bne.w	8003728 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7ff fb04 	bl	8002a00 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	08db      	lsrs	r3, r3, #3
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d00a      	beq.n	8003430 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6919      	ldr	r1, [r3, #16]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800342a:	f7ff fa55 	bl	80028d8 <LL_ADC_SetOffset>
 800342e:	e17b      	b.n	8003728 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fa72 	bl	8002920 <LL_ADC_GetOffsetChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10a      	bne.n	800345c <HAL_ADC_ConfigChannel+0x148>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fa67 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003452:	4603      	mov	r3, r0
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	f003 021f 	and.w	r2, r3, #31
 800345a:	e01e      	b.n	800349a <HAL_ADC_ConfigChannel+0x186>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fa5c 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003468:	4603      	mov	r3, r0
 800346a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800347a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800347e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 800348a:	2320      	movs	r3, #32
 800348c:	e004      	b.n	8003498 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 800348e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x19e>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	0e9b      	lsrs	r3, r3, #26
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	e018      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x1d0>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80034c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80034ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e004      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80034da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d106      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fa2b 	bl	800294c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2101      	movs	r1, #1
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fa0f 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003502:	4603      	mov	r3, r0
 8003504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x20e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fa04 	bl	8002920 <LL_ADC_GetOffsetChannel>
 8003518:	4603      	mov	r3, r0
 800351a:	0e9b      	lsrs	r3, r3, #26
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	e01e      	b.n	8003560 <HAL_ADC_ConfigChannel+0x24c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2101      	movs	r1, #1
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f9f9 	bl	8002920 <LL_ADC_GetOffsetChannel>
 800352e:	4603      	mov	r3, r0
 8003530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e004      	b.n	800355e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x264>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0e9b      	lsrs	r3, r3, #26
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	e018      	b.n	80035aa <HAL_ADC_ConfigChannel+0x296>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800358c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800359c:	2320      	movs	r3, #32
 800359e:	e004      	b.n	80035aa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80035a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d106      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2200      	movs	r2, #0
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f9c8 	bl	800294c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f9ac 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x2d4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2102      	movs	r1, #2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f9a1 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80035de:	4603      	mov	r3, r0
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	f003 021f 	and.w	r2, r3, #31
 80035e6:	e01e      	b.n	8003626 <HAL_ADC_ConfigChannel+0x312>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2102      	movs	r1, #2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f996 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800360a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800360e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003616:	2320      	movs	r3, #32
 8003618:	e004      	b.n	8003624 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800361a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_ADC_ConfigChannel+0x32a>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0e9b      	lsrs	r3, r3, #26
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	e016      	b.n	800366c <HAL_ADC_ConfigChannel+0x358>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800365e:	2320      	movs	r3, #32
 8003660:	e004      	b.n	800366c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800366c:	429a      	cmp	r2, r3
 800366e:	d106      	bne.n	800367e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff f967 	bl	800294c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2103      	movs	r1, #3
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff f94b 	bl	8002920 <LL_ADC_GetOffsetChannel>
 800368a:	4603      	mov	r3, r0
 800368c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x396>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2103      	movs	r1, #3
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff f940 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	0e9b      	lsrs	r3, r3, #26
 80036a4:	f003 021f 	and.w	r2, r3, #31
 80036a8:	e017      	b.n	80036da <HAL_ADC_ConfigChannel+0x3c6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2103      	movs	r1, #3
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff f935 	bl	8002920 <LL_ADC_GetOffsetChannel>
 80036b6:	4603      	mov	r3, r0
 80036b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80036c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80036c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80036cc:	2320      	movs	r3, #32
 80036ce:	e003      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80036d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x3de>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	0e9b      	lsrs	r3, r3, #26
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	e011      	b.n	8003716 <HAL_ADC_ConfigChannel+0x402>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003702:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800370a:	2320      	movs	r3, #32
 800370c:	e003      	b.n	8003716 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003716:	429a      	cmp	r2, r3
 8003718:	d106      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	2103      	movs	r1, #3
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f912 	bl	800294c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fa49 	bl	8002bc4 <LL_ADC_IsEnabled>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	f040 813f 	bne.w	80039b8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	461a      	mov	r2, r3
 8003748:	f7ff f986 	bl	8002a58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a8e      	ldr	r2, [pc, #568]	; (800398c <HAL_ADC_ConfigChannel+0x678>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f040 8130 	bne.w	80039b8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x46c>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0e9b      	lsrs	r3, r3, #26
 800376e:	3301      	adds	r3, #1
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2b09      	cmp	r3, #9
 8003776:	bf94      	ite	ls
 8003778:	2301      	movls	r3, #1
 800377a:	2300      	movhi	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e019      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x4a0>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800378e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003790:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003798:	2320      	movs	r3, #32
 800379a:	e003      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800379c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	bf94      	ite	ls
 80037ae:	2301      	movls	r3, #1
 80037b0:	2300      	movhi	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d079      	beq.n	80038ac <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x4c0>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	3301      	adds	r3, #1
 80037cc:	069b      	lsls	r3, r3, #26
 80037ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d2:	e015      	b.n	8003800 <HAL_ADC_ConfigChannel+0x4ec>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e003      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80037f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	069b      	lsls	r3, r3, #26
 80037fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x50c>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	3301      	adds	r3, #1
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	e017      	b.n	8003850 <HAL_ADC_ConfigChannel+0x53c>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800382e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003830:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e003      	b.n	8003844 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800383c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	ea42 0103 	orr.w	r1, r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x562>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0e9b      	lsrs	r3, r3, #26
 8003866:	3301      	adds	r3, #1
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	051b      	lsls	r3, r3, #20
 8003874:	e018      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x594>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800388e:	2320      	movs	r3, #32
 8003890:	e003      	b.n	800389a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a8:	430b      	orrs	r3, r1
 80038aa:	e080      	b.n	80039ae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x5b4>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	0e9b      	lsrs	r3, r3, #26
 80038be:	3301      	adds	r3, #1
 80038c0:	069b      	lsls	r3, r3, #26
 80038c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c6:	e015      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x5e0>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80038e0:	2320      	movs	r3, #32
 80038e2:	e003      	b.n	80038ec <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	069b      	lsls	r3, r3, #26
 80038f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d109      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x600>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0e9b      	lsrs	r3, r3, #26
 8003906:	3301      	adds	r3, #1
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	2101      	movs	r1, #1
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	e017      	b.n	8003944 <HAL_ADC_ConfigChannel+0x630>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	61fb      	str	r3, [r7, #28]
  return result;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e003      	b.n	8003938 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3301      	adds	r3, #1
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	ea42 0103 	orr.w	r1, r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x65c>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	0e9b      	lsrs	r3, r3, #26
 800395a:	3301      	adds	r3, #1
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	3b1e      	subs	r3, #30
 8003968:	051b      	lsls	r3, r3, #20
 800396a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800396e:	e01d      	b.n	80039ac <HAL_ADC_ConfigChannel+0x698>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	613b      	str	r3, [r7, #16]
  return result;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e005      	b.n	8003998 <HAL_ADC_ConfigChannel+0x684>
 800398c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3301      	adds	r3, #1
 800399a:	f003 021f 	and.w	r2, r3, #31
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	3b1e      	subs	r3, #30
 80039a6:	051b      	lsls	r3, r3, #20
 80039a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ac:	430b      	orrs	r3, r1
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	6892      	ldr	r2, [r2, #8]
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7ff f824 	bl	8002a00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_ADC_ConfigChannel+0x7b8>)
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d079      	beq.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039c4:	4842      	ldr	r0, [pc, #264]	; (8003ad0 <HAL_ADC_ConfigChannel+0x7bc>)
 80039c6:	f7fe ff79 	bl	80028bc <LL_ADC_GetCommonPathInternalCh>
 80039ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a40      	ldr	r2, [pc, #256]	; (8003ad4 <HAL_ADC_ConfigChannel+0x7c0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d12b      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d125      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a3b      	ldr	r2, [pc, #236]	; (8003ad8 <HAL_ADC_ConfigChannel+0x7c4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_ADC_ConfigChannel+0x6e4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a3a      	ldr	r2, [pc, #232]	; (8003adc <HAL_ADC_ConfigChannel+0x7c8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d15c      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a00:	4619      	mov	r1, r3
 8003a02:	4833      	ldr	r0, [pc, #204]	; (8003ad0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a04:	f7fe ff47 	bl	8002896 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	4a35      	ldr	r2, [pc, #212]	; (8003ae4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099a      	lsrs	r2, r3, #6
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a20:	e002      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f9      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a2e:	e040      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2c      	ldr	r2, [pc, #176]	; (8003ae8 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d118      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x758>
 8003a3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d112      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_ADC_ConfigChannel+0x746>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <HAL_ADC_ConfigChannel+0x7c8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d12d      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a62:	4619      	mov	r1, r3
 8003a64:	481a      	ldr	r0, [pc, #104]	; (8003ad0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a66:	f7fe ff16 	bl	8002896 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a6a:	e024      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_ADC_ConfigChannel+0x7d8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d120      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11a      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d115      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a94:	4619      	mov	r1, r3
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a98:	f7fe fefd 	bl	8002896 <LL_ADC_SetCommonPathInternalCh>
 8003a9c:	e00c      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ab0:	e002      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ab6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ac0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	37d8      	adds	r7, #216	; 0xd8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	80080000 	.word	0x80080000
 8003ad0:	50040300 	.word	0x50040300
 8003ad4:	c7520000 	.word	0xc7520000
 8003ad8:	50040000 	.word	0x50040000
 8003adc:	50040200 	.word	0x50040200
 8003ae0:	20000038 	.word	0x20000038
 8003ae4:	053e2d63 	.word	0x053e2d63
 8003ae8:	cb840000 	.word	0xcb840000
 8003aec:	80000001 	.word	0x80000001

08003af0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff f8aa 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8003b0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f8cb 	bl	8002cae <LL_ADC_INJ_IsConversionOngoing>
 8003b18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d103      	bne.n	8003b28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8090 	beq.w	8003c48 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02a      	beq.n	8003b8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7e5b      	ldrb	r3, [r3, #25]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d126      	bne.n	8003b8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	7e1b      	ldrb	r3, [r3, #24]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d122      	bne.n	8003b8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003b46:	2301      	movs	r3, #1
 8003b48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b4a:	e014      	b.n	8003b76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4a41      	ldr	r2, [pc, #260]	; (8003c54 <ADC_ConversionStop+0x164>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d90d      	bls.n	8003b70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f043 0210 	orr.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e06c      	b.n	8003c4a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	3301      	adds	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d1e3      	bne.n	8003b4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2240      	movs	r2, #64	; 0x40
 8003b8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d014      	beq.n	8003bbc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff f862 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff f81f 	bl	8002bea <LL_ADC_IsDisableOngoing>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff f83e 	bl	8002c38 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d014      	beq.n	8003bec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f871 	bl	8002cae <LL_ADC_INJ_IsConversionOngoing>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00c      	beq.n	8003bec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff f807 	bl	8002bea <LL_ADC_IsDisableOngoing>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d104      	bne.n	8003bec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff f84d 	bl	8002c86 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d004      	beq.n	8003bfc <ADC_ConversionStop+0x10c>
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d105      	bne.n	8003c02 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	617b      	str	r3, [r7, #20]
        break;
 8003bfa:	e005      	b.n	8003c08 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	617b      	str	r3, [r7, #20]
        break;
 8003c00:	e002      	b.n	8003c08 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c02:	2304      	movs	r3, #4
 8003c04:	617b      	str	r3, [r7, #20]
        break;
 8003c06:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c08:	f7fe fe04 	bl	8002814 <HAL_GetTick>
 8003c0c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c0e:	e014      	b.n	8003c3a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c10:	f7fe fe00 	bl	8002814 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d90d      	bls.n	8003c3a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f043 0210 	orr.w	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e007      	b.n	8003c4a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e3      	bne.n	8003c10 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	a33fffff 	.word	0xa33fffff

08003c58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe ffad 	bl	8002bc4 <LL_ADC_IsEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d146      	bne.n	8003cfe <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <ADC_Enable+0xb0>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f043 0210 	orr.w	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e032      	b.n	8003d00 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe ff68 	bl	8002b74 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ca4:	f7fe fdb6 	bl	8002814 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003caa:	e021      	b.n	8003cf0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe ff87 	bl	8002bc4 <LL_ADC_IsEnabled>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe ff57 	bl	8002b74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cc6:	f7fe fda5 	bl	8002814 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d90d      	bls.n	8003cf0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	f043 0210 	orr.w	r2, r3, #16
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e007      	b.n	8003d00 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d1d6      	bne.n	8003cac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	8000003f 	.word	0x8000003f

08003d0c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe ff66 	bl	8002bea <LL_ADC_IsDisableOngoing>
 8003d1e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe ff4d 	bl	8002bc4 <LL_ADC_IsEnabled>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d040      	beq.n	8003db2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d13d      	bne.n	8003db2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030d 	and.w	r3, r3, #13
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10c      	bne.n	8003d5e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe ff27 	bl	8002b9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2203      	movs	r2, #3
 8003d54:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d56:	f7fe fd5d 	bl	8002814 <HAL_GetTick>
 8003d5a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d5c:	e022      	b.n	8003da4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f043 0210 	orr.w	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e01c      	b.n	8003db4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d7a:	f7fe fd4b 	bl	8002814 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d90d      	bls.n	8003da4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f043 0210 	orr.w	r2, r3, #16
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	f043 0201 	orr.w	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e007      	b.n	8003db4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e3      	bne.n	8003d7a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <LL_ADC_IsEnabled>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <LL_ADC_IsEnabled+0x18>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <LL_ADC_IsEnabled+0x1a>
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d101      	bne.n	8003dfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b09f      	sub	sp, #124	; 0x7c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e08f      	b.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a47      	ldr	r2, [pc, #284]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d102      	bne.n	8003e3e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003e38:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	e001      	b.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f043 0220 	orr.w	r2, r3, #32
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e072      	b.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ffbd 	bl	8003de2 <LL_ADC_REG_IsConversionOngoing>
 8003e68:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff ffb7 	bl	8003de2 <LL_ADC_REG_IsConversionOngoing>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d154      	bne.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d151      	bne.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e80:	4b35      	ldr	r3, [pc, #212]	; (8003f58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02c      	beq.n	8003ee6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e9e:	035b      	lsls	r3, r3, #13
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ea8:	4829      	ldr	r0, [pc, #164]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003eaa:	f7ff ff87 	bl	8003dbc <LL_ADC_IsEnabled>
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4828      	ldr	r0, [pc, #160]	; (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003eb2:	f7ff ff83 	bl	8003dbc <LL_ADC_IsEnabled>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	431c      	orrs	r4, r3
 8003eba:	4828      	ldr	r0, [pc, #160]	; (8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ebc:	f7ff ff7e 	bl	8003dbc <LL_ADC_IsEnabled>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4323      	orrs	r3, r4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d137      	bne.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ed0:	f023 030f 	bic.w	r3, r3, #15
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	6811      	ldr	r1, [r2, #0]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	6892      	ldr	r2, [r2, #8]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee4:	e028      	b.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ef2:	4817      	ldr	r0, [pc, #92]	; (8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003ef4:	f7ff ff62 	bl	8003dbc <LL_ADC_IsEnabled>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	4816      	ldr	r0, [pc, #88]	; (8003f54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003efc:	f7ff ff5e 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f00:	4603      	mov	r3, r0
 8003f02:	431c      	orrs	r4, r3
 8003f04:	4815      	ldr	r0, [pc, #84]	; (8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f06:	f7ff ff59 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4323      	orrs	r3, r4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d112      	bne.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f1a:	f023 030f 	bic.w	r3, r3, #15
 8003f1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f20:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f22:	e009      	b.n	8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f36:	e000      	b.n	8003f3a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	377c      	adds	r7, #124	; 0x7c
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd90      	pop	{r4, r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	50040000 	.word	0x50040000
 8003f54:	50040100 	.word	0x50040100
 8003f58:	50040300 	.word	0x50040300
 8003f5c:	50040200 	.word	0x50040200

08003f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f92:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	60d3      	str	r3, [r2, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	f003 0307 	and.w	r3, r3, #7
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000ed00 	.word	0xe000ed00

08003fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	db0b      	blt.n	8003fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	f003 021f 	and.w	r2, r3, #31
 8003fdc:	4907      	ldr	r1, [pc, #28]	; (8003ffc <__NVIC_EnableIRQ+0x38>)
 8003fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000e100 	.word	0xe000e100

08004000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004010:	2b00      	cmp	r3, #0
 8004012:	db0a      	blt.n	800402a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	490c      	ldr	r1, [pc, #48]	; (800404c <__NVIC_SetPriority+0x4c>)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	0112      	lsls	r2, r2, #4
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	440b      	add	r3, r1
 8004024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004028:	e00a      	b.n	8004040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	4908      	ldr	r1, [pc, #32]	; (8004050 <__NVIC_SetPriority+0x50>)
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	3b04      	subs	r3, #4
 8004038:	0112      	lsls	r2, r2, #4
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	440b      	add	r3, r1
 800403e:	761a      	strb	r2, [r3, #24]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	e000e100 	.word	0xe000e100
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004054:	b480      	push	{r7}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f1c3 0307 	rsb	r3, r3, #7
 800406e:	2b04      	cmp	r3, #4
 8004070:	bf28      	it	cs
 8004072:	2304      	movcs	r3, #4
 8004074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3304      	adds	r3, #4
 800407a:	2b06      	cmp	r3, #6
 800407c:	d902      	bls.n	8004084 <NVIC_EncodePriority+0x30>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3b03      	subs	r3, #3
 8004082:	e000      	b.n	8004086 <NVIC_EncodePriority+0x32>
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004088:	f04f 32ff 	mov.w	r2, #4294967295
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	401a      	ands	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800409c:	f04f 31ff 	mov.w	r1, #4294967295
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	43d9      	mvns	r1, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ac:	4313      	orrs	r3, r2
         );
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3724      	adds	r7, #36	; 0x24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040cc:	d301      	bcc.n	80040d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ce:	2301      	movs	r3, #1
 80040d0:	e00f      	b.n	80040f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <SysTick_Config+0x40>)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040da:	210f      	movs	r1, #15
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	f7ff ff8e 	bl	8004000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <SysTick_Config+0x40>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <SysTick_Config+0x40>)
 80040ec:	2207      	movs	r2, #7
 80040ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	e000e010 	.word	0xe000e010

08004100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff29 	bl	8003f60 <__NVIC_SetPriorityGrouping>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af00      	add	r7, sp, #0
 800411c:	4603      	mov	r3, r0
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004128:	f7ff ff3e 	bl	8003fa8 <__NVIC_GetPriorityGrouping>
 800412c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	6978      	ldr	r0, [r7, #20]
 8004134:	f7ff ff8e 	bl	8004054 <NVIC_EncodePriority>
 8004138:	4602      	mov	r2, r0
 800413a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff ff5d 	bl	8004000 <__NVIC_SetPriority>
}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	4603      	mov	r3, r0
 8004156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff ff31 	bl	8003fc4 <__NVIC_EnableIRQ>
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ffa2 	bl	80040bc <SysTick_Config>
 8004178:	4603      	mov	r3, r0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e014      	b.n	80041be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7fd ffa3 	bl	80020f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	795b      	ldrb	r3, [r3, #5]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_DAC_Start_DMA+0x1e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e09e      	b.n	8004324 <HAL_DAC_Start_DMA+0x15c>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2202      	movs	r2, #2
 80041f0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d12a      	bne.n	800424e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a4b      	ldr	r2, [pc, #300]	; (800432c <HAL_DAC_Start_DMA+0x164>)
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a4a      	ldr	r2, [pc, #296]	; (8004330 <HAL_DAC_Start_DMA+0x168>)
 8004206:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a49      	ldr	r2, [pc, #292]	; (8004334 <HAL_DAC_Start_DMA+0x16c>)
 800420e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800421e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	2b04      	cmp	r3, #4
 8004224:	d009      	beq.n	800423a <HAL_DAC_Start_DMA+0x72>
 8004226:	2b08      	cmp	r3, #8
 8004228:	d00c      	beq.n	8004244 <HAL_DAC_Start_DMA+0x7c>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d000      	beq.n	8004230 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800422e:	e039      	b.n	80042a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3308      	adds	r3, #8
 8004236:	613b      	str	r3, [r7, #16]
        break;
 8004238:	e034      	b.n	80042a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	613b      	str	r3, [r7, #16]
        break;
 8004242:	e02f      	b.n	80042a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3310      	adds	r3, #16
 800424a:	613b      	str	r3, [r7, #16]
        break;
 800424c:	e02a      	b.n	80042a4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a39      	ldr	r2, [pc, #228]	; (8004338 <HAL_DAC_Start_DMA+0x170>)
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4a38      	ldr	r2, [pc, #224]	; (800433c <HAL_DAC_Start_DMA+0x174>)
 800425c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4a37      	ldr	r2, [pc, #220]	; (8004340 <HAL_DAC_Start_DMA+0x178>)
 8004264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004274:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	2b04      	cmp	r3, #4
 800427a:	d009      	beq.n	8004290 <HAL_DAC_Start_DMA+0xc8>
 800427c:	2b08      	cmp	r3, #8
 800427e:	d00c      	beq.n	800429a <HAL_DAC_Start_DMA+0xd2>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d000      	beq.n	8004286 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004284:	e00e      	b.n	80042a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3314      	adds	r3, #20
 800428c:	613b      	str	r3, [r7, #16]
        break;
 800428e:	e009      	b.n	80042a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3318      	adds	r3, #24
 8004296:	613b      	str	r3, [r7, #16]
        break;
 8004298:	e004      	b.n	80042a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	331c      	adds	r3, #28
 80042a0:	613b      	str	r3, [r7, #16]
        break;
 80042a2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d111      	bne.n	80042ce <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6898      	ldr	r0, [r3, #8]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	f000 fe9e 	bl	8005004 <HAL_DMA_Start_IT>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]
 80042cc:	e010      	b.n	80042f0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80042dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68d8      	ldr	r0, [r3, #12]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	f000 fe8c 	bl	8005004 <HAL_DMA_Start_IT>
 80042ec:	4603      	mov	r3, r0
 80042ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10c      	bne.n	8004316 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2201      	movs	r2, #1
 800430a:	409a      	lsls	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e005      	b.n	8004322 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f043 0204 	orr.w	r2, r3, #4
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004322:	7dfb      	ldrb	r3, [r7, #23]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	08004617 	.word	0x08004617
 8004330:	08004639 	.word	0x08004639
 8004334:	08004655 	.word	0x08004655
 8004338:	080046bf 	.word	0x080046bf
 800433c:	080046e1 	.word	0x080046e1
 8004340:	080046fd 	.word	0x080046fd

08004344 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	400a      	ands	r2, r1
 800436a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2201      	movs	r2, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43da      	mvns	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	400a      	ands	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10d      	bne.n	80043aa <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fe96 	bl	80050c4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e00c      	b.n	80043c4 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fe88 	bl	80050c4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80043c2:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b088      	sub	sp, #32
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	795b      	ldrb	r3, [r3, #5]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_DAC_ConfigChannel+0x1c>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e107      	b.n	800460e <HAL_DAC_ConfigChannel+0x22c>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2202      	movs	r2, #2
 8004408:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d174      	bne.n	80044fc <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004412:	f7fe f9ff 	bl	8002814 <HAL_GetTick>
 8004416:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d134      	bne.n	8004488 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800441e:	e011      	b.n	8004444 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004420:	f7fe f9f8 	bl	8002814 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	d90a      	bls.n	8004444 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f043 0208 	orr.w	r2, r3, #8
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2203      	movs	r2, #3
 800443e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e0e4      	b.n	800460e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e6      	bne.n	8004420 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004452:	2001      	movs	r0, #1
 8004454:	f7fe f9ea 	bl	800282c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	6992      	ldr	r2, [r2, #24]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
 8004462:	e01e      	b.n	80044a2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004464:	f7fe f9d6 	bl	8002814 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d90a      	bls.n	8004488 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f043 0208 	orr.w	r2, r3, #8
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2203      	movs	r2, #3
 8004482:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0c2      	b.n	800460e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	2b00      	cmp	r3, #0
 8004490:	dbe8      	blt.n	8004464 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004492:	2001      	movs	r0, #1
 8004494:	f7fe f9ca 	bl	800282c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	6992      	ldr	r2, [r2, #24]
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	ea02 0103 	and.w	r1, r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	409a      	lsls	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	21ff      	movs	r1, #255	; 0xff
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	ea02 0103 	and.w	r1, r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d11d      	bne.n	8004540 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	221f      	movs	r2, #31
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2207      	movs	r2, #7
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	431a      	orrs	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43da      	mvns	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	400a      	ands	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	f640 72fc 	movw	r2, #4092	; 0xffc
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	22c0      	movs	r2, #192	; 0xc0
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43da      	mvns	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	400a      	ands	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7fc ff37 	bl	8001498 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	711a      	strb	r2, [r3, #4]
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7fc ff10 	bl	800146c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f043 0204 	orr.w	r2, r3, #4
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fead 	bl	80043ce <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	711a      	strb	r2, [r3, #4]
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff ffd8 	bl	8004682 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	711a      	strb	r2, [r3, #4]
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff ffd1 	bl	8004696 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f043 0204 	orr.w	r2, r3, #4
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ffc7 	bl	80046aa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	711a      	strb	r2, [r3, #4]
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0ac      	b.n	8004898 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fab6 	bl	8004cb4 <DFSDM_GetChannelFromInstance>
 8004748:	4602      	mov	r2, r0
 800474a:	4b55      	ldr	r3, [pc, #340]	; (80048a0 <HAL_DFSDM_ChannelInit+0x174>)
 800474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e09f      	b.n	8004898 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fd fdbf 	bl	80022dc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800475e:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <HAL_DFSDM_ChannelInit+0x178>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a4f      	ldr	r2, [pc, #316]	; (80048a4 <HAL_DFSDM_ChannelInit+0x178>)
 8004766:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004768:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <HAL_DFSDM_ChannelInit+0x178>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d125      	bne.n	80047bc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004770:	4b4d      	ldr	r3, [pc, #308]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a4c      	ldr	r2, [pc, #304]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004776:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800477a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800477c:	4b4a      	ldr	r3, [pc, #296]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4948      	ldr	r1, [pc, #288]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a46      	ldr	r2, [pc, #280]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004790:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004794:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	791b      	ldrb	r3, [r3, #4]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d108      	bne.n	80047b0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800479e:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	041b      	lsls	r3, r3, #16
 80047aa:	493f      	ldr	r1, [pc, #252]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80047b0:	4b3d      	ldr	r3, [pc, #244]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a3c      	ldr	r2, [pc, #240]	; (80048a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80047b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80047ca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80047da:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80047e0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 020f 	bic.w	r2, r2, #15
 80047f8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004820:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6899      	ldr	r1, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	3b01      	subs	r3, #1
 8004832:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 0207 	and.w	r2, r2, #7
 800484c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004878:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fa14 	bl	8004cb4 <DFSDM_GetChannelFromInstance>
 800488c:	4601      	mov	r1, r0
 800488e:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <HAL_DFSDM_ChannelInit+0x174>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	2000008c 	.word	0x2000008c
 80048a4:	20000088 	.word	0x20000088
 80048a8:	40016000 	.word	0x40016000

080048ac <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e0ca      	b.n	8004a54 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a66      	ldr	r2, [pc, #408]	; (8004a5c <HAL_DFSDM_FilterInit+0x1b0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d109      	bne.n	80048dc <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d003      	beq.n	80048d8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0bb      	b.n	8004a54 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fd fc67 	bl	80021c8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004908:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7a1b      	ldrb	r3, [r3, #8]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d108      	bne.n	8004924 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e007      	b.n	8004934 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004932:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7a5b      	ldrb	r3, [r3, #9]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d108      	bne.n	800494e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e007      	b.n	800495e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 800496c:	f023 0308 	bic.w	r3, r3, #8
 8004970:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d108      	bne.n	800498c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7c1b      	ldrb	r3, [r3, #16]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d108      	bne.n	80049a6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0210 	orr.w	r2, r2, #16
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e007      	b.n	80049b6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0210 	bic.w	r2, r2, #16
 80049b4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7c5b      	ldrb	r3, [r3, #17]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d108      	bne.n	80049d0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0220 	orr.w	r2, r2, #32
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e007      	b.n	80049e0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0220 	bic.w	r2, r2, #32
 80049de:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80049ee:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80049f2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6959      	ldr	r1, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004a06:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004a0e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	7c1a      	ldrb	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40016100 	.word	0x40016100

08004a60 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02e      	beq.n	8004ad8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004a80:	2bff      	cmp	r3, #255	; 0xff
 8004a82:	d029      	beq.n	8004ad8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d10d      	bne.n	8004aba <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e00a      	b.n	8004ad0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6819      	ldr	r1, [r3, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ad6:	e001      	b.n	8004adc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	75fb      	strb	r3, [r7, #23]
 8004b0c:	e064      	b.n	8004bd8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b1c:	d002      	beq.n	8004b24 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
 8004b22:	e059      	b.n	8004bd8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10e      	bne.n	8004b4a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d002      	beq.n	8004b4a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
 8004b48:	e046      	b.n	8004bd8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d102      	bne.n	8004b6a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
 8004b68:	e036      	b.n	8004bd8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d004      	beq.n	8004b7e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d12a      	bne.n	8004bd4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d101      	bne.n	8004b9c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8004b9a:	e000      	b.n	8004b9e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8004b9c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	331c      	adds	r3, #28
 8004bae:	4619      	mov	r1, r3
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f000 fa26 	bl	8005004 <HAL_DMA_Start_IT>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	22ff      	movs	r2, #255	; 0xff
 8004bc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004bca:	e005      	b.n	8004bd8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 f8bd 	bl	8004d4c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004bd2:	e001      	b.n	8004bd8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	08004c75 	.word	0x08004c75
 8004be8:	08004c91 	.word	0x08004c91
 8004bec:	08004c59 	.word	0x08004c59

08004bf0 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d007      	beq.n	8004c16 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d002      	beq.n	8004c16 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
 8004c14:	e007      	b.n	8004c26 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fa52 	bl	80050c4 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8e9 	bl	8004df8 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff ffe2 	bl	8004c30 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7fc fc1e 	bl	80014c4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff ffcd 	bl	8004c44 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <DFSDM_GetChannelFromInstance+0x7c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d102      	bne.n	8004cca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	e02b      	b.n	8004d22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	; (8004d34 <DFSDM_GetChannelFromInstance+0x80>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d102      	bne.n	8004cd8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e024      	b.n	8004d22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <DFSDM_GetChannelFromInstance+0x84>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d102      	bne.n	8004ce6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	e01d      	b.n	8004d22 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <DFSDM_GetChannelFromInstance+0x88>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d102      	bne.n	8004cf4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e016      	b.n	8004d22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <DFSDM_GetChannelFromInstance+0x8c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d102      	bne.n	8004d02 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004cfc:	2305      	movs	r3, #5
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e00f      	b.n	8004d22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a0f      	ldr	r2, [pc, #60]	; (8004d44 <DFSDM_GetChannelFromInstance+0x90>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d102      	bne.n	8004d10 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004d0a:	2306      	movs	r3, #6
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e008      	b.n	8004d22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0d      	ldr	r2, [pc, #52]	; (8004d48 <DFSDM_GetChannelFromInstance+0x94>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d102      	bne.n	8004d1e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004d18:	2307      	movs	r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e001      	b.n	8004d22 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004d22:	68fb      	ldr	r3, [r7, #12]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	40016000 	.word	0x40016000
 8004d34:	40016020 	.word	0x40016020
 8004d38:	40016040 	.word	0x40016040
 8004d3c:	40016080 	.word	0x40016080
 8004d40:	400160a0 	.word	0x400160a0
 8004d44:	400160c0 	.word	0x400160c0
 8004d48:	400160e0 	.word	0x400160e0

08004d4c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e033      	b.n	8004dd6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0201 	bic.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004d8c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0201 	orr.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d116      	bne.n	8004dd6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d107      	bne.n	8004dc0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0202 	orr.w	r2, r2, #2
 8004dbe:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d102      	bne.n	8004dd0 <DFSDM_RegConvStart+0x84>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	e000      	b.n	8004dd2 <DFSDM_RegConvStart+0x86>
 8004dd0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <DFSDM_RegConvStart+0x98>
 8004de0:	2202      	movs	r2, #2
 8004de2:	e000      	b.n	8004de6 <DFSDM_RegConvStart+0x9a>
 8004de4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004e26:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d116      	bne.n	8004e70 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0202 	orr.w	r2, r2, #2
 8004e58:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d102      	bne.n	8004e6a <DFSDM_RegConvStop+0x72>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	e000      	b.n	8004e6c <DFSDM_RegConvStop+0x74>
 8004e6a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d101      	bne.n	8004e7e <DFSDM_RegConvStop+0x86>
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	e000      	b.n	8004e80 <DFSDM_RegConvStop+0x88>
 8004e7e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e098      	b.n	8004fd8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4b4d      	ldr	r3, [pc, #308]	; (8004fe4 <HAL_DMA_Init+0x150>)
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d80f      	bhi.n	8004ed2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4b4b      	ldr	r3, [pc, #300]	; (8004fe8 <HAL_DMA_Init+0x154>)
 8004eba:	4413      	add	r3, r2
 8004ebc:	4a4b      	ldr	r2, [pc, #300]	; (8004fec <HAL_DMA_Init+0x158>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	009a      	lsls	r2, r3, #2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a48      	ldr	r2, [pc, #288]	; (8004ff0 <HAL_DMA_Init+0x15c>)
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40
 8004ed0:	e00e      	b.n	8004ef0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4b46      	ldr	r3, [pc, #280]	; (8004ff4 <HAL_DMA_Init+0x160>)
 8004eda:	4413      	add	r3, r2
 8004edc:	4a43      	ldr	r2, [pc, #268]	; (8004fec <HAL_DMA_Init+0x158>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	009a      	lsls	r2, r3, #2
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a42      	ldr	r2, [pc, #264]	; (8004ff8 <HAL_DMA_Init+0x164>)
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	d039      	beq.n	8004fc0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	4a27      	ldr	r2, [pc, #156]	; (8004ff0 <HAL_DMA_Init+0x15c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d11a      	bne.n	8004f8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <HAL_DMA_Init+0x168>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f003 031c 	and.w	r3, r3, #28
 8004f62:	210f      	movs	r1, #15
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	4924      	ldr	r1, [pc, #144]	; (8004ffc <HAL_DMA_Init+0x168>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004f70:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <HAL_DMA_Init+0x168>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f003 031c 	and.w	r3, r3, #28
 8004f80:	fa01 f303 	lsl.w	r3, r1, r3
 8004f84:	491d      	ldr	r1, [pc, #116]	; (8004ffc <HAL_DMA_Init+0x168>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]
 8004f8a:	e019      	b.n	8004fc0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <HAL_DMA_Init+0x16c>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	f003 031c 	and.w	r3, r3, #28
 8004f98:	210f      	movs	r1, #15
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	4917      	ldr	r1, [pc, #92]	; (8005000 <HAL_DMA_Init+0x16c>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004fa6:	4b16      	ldr	r3, [pc, #88]	; (8005000 <HAL_DMA_Init+0x16c>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	f003 031c 	and.w	r3, r3, #28
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	4911      	ldr	r1, [pc, #68]	; (8005000 <HAL_DMA_Init+0x16c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	40020407 	.word	0x40020407
 8004fe8:	bffdfff8 	.word	0xbffdfff8
 8004fec:	cccccccd 	.word	0xcccccccd
 8004ff0:	40020000 	.word	0x40020000
 8004ff4:	bffdfbf8 	.word	0xbffdfbf8
 8004ff8:	40020400 	.word	0x40020400
 8004ffc:	400200a8 	.word	0x400200a8
 8005000:	400204a8 	.word	0x400204a8

08005004 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_DMA_Start_IT+0x20>
 8005020:	2302      	movs	r3, #2
 8005022:	e04b      	b.n	80050bc <HAL_DMA_Start_IT+0xb8>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d13a      	bne.n	80050ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f91e 	bl	800529e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 020e 	orr.w	r2, r2, #14
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e00f      	b.n	800509c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0204 	bic.w	r2, r2, #4
 800508a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 020a 	orr.w	r2, r2, #10
 800509a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e005      	b.n	80050ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
 80050b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d008      	beq.n	80050ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2204      	movs	r2, #4
 80050e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e022      	b.n	8005134 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 020e 	bic.w	r2, r2, #14
 80050fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	f003 021c 	and.w	r2, r3, #28
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	2101      	movs	r1, #1
 800511c:	fa01 f202 	lsl.w	r2, r1, r2
 8005120:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	f003 031c 	and.w	r3, r3, #28
 8005160:	2204      	movs	r2, #4
 8005162:	409a      	lsls	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d026      	beq.n	80051ba <HAL_DMA_IRQHandler+0x7a>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d021      	beq.n	80051ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	f003 021c 	and.w	r2, r3, #28
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	2104      	movs	r1, #4
 80051a2:	fa01 f202 	lsl.w	r2, r1, r2
 80051a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d071      	beq.n	8005294 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80051b8:	e06c      	b.n	8005294 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	f003 031c 	and.w	r3, r3, #28
 80051c2:	2202      	movs	r2, #2
 80051c4:	409a      	lsls	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02e      	beq.n	800522c <HAL_DMA_IRQHandler+0xec>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d029      	beq.n	800522c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 020a 	bic.w	r2, r2, #10
 80051f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f003 021c 	and.w	r2, r3, #28
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	2102      	movs	r1, #2
 800520c:	fa01 f202 	lsl.w	r2, r1, r2
 8005210:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d038      	beq.n	8005294 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800522a:	e033      	b.n	8005294 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005230:	f003 031c 	and.w	r3, r3, #28
 8005234:	2208      	movs	r2, #8
 8005236:	409a      	lsls	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d02a      	beq.n	8005296 <HAL_DMA_IRQHandler+0x156>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d025      	beq.n	8005296 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 020e 	bic.w	r2, r2, #14
 8005258:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	f003 021c 	and.w	r2, r3, #28
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2101      	movs	r1, #1
 8005268:	fa01 f202 	lsl.w	r2, r1, r2
 800526c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005294:	bf00      	nop
 8005296:	bf00      	nop
}
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	f003 021c 	and.w	r2, r3, #28
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	2101      	movs	r1, #1
 80052ba:	fa01 f202 	lsl.w	r2, r1, r2
 80052be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d108      	bne.n	80052e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052e0:	e007      	b.n	80052f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	60da      	str	r2, [r3, #12]
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800530e:	e17f      	b.n	8005610 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	2101      	movs	r1, #1
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	fa01 f303 	lsl.w	r3, r1, r3
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8171 	beq.w	800560a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d00b      	beq.n	8005348 <HAL_GPIO_Init+0x48>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d007      	beq.n	8005348 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800533c:	2b11      	cmp	r3, #17
 800533e:	d003      	beq.n	8005348 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b12      	cmp	r3, #18
 8005346:	d130      	bne.n	80053aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	2203      	movs	r2, #3
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4013      	ands	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800537e:	2201      	movs	r2, #1
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4013      	ands	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	f003 0201 	and.w	r2, r3, #1
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d118      	bne.n	80053e8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80053bc:	2201      	movs	r2, #1
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4013      	ands	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	08db      	lsrs	r3, r3, #3
 80053d2:	f003 0201 	and.w	r2, r3, #1
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	2203      	movs	r2, #3
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4013      	ands	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d003      	beq.n	8005428 <HAL_GPIO_Init+0x128>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b12      	cmp	r3, #18
 8005426:	d123      	bne.n	8005470 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	08da      	lsrs	r2, r3, #3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3208      	adds	r2, #8
 8005430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005434:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	220f      	movs	r2, #15
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4013      	ands	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	08da      	lsrs	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3208      	adds	r2, #8
 800546a:	6939      	ldr	r1, [r7, #16]
 800546c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2203      	movs	r2, #3
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4013      	ands	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 0203 	and.w	r2, r3, #3
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80ac 	beq.w	800560a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054b2:	4b5e      	ldr	r3, [pc, #376]	; (800562c <HAL_GPIO_Init+0x32c>)
 80054b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b6:	4a5d      	ldr	r2, [pc, #372]	; (800562c <HAL_GPIO_Init+0x32c>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	6613      	str	r3, [r2, #96]	; 0x60
 80054be:	4b5b      	ldr	r3, [pc, #364]	; (800562c <HAL_GPIO_Init+0x32c>)
 80054c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054ca:	4a59      	ldr	r2, [pc, #356]	; (8005630 <HAL_GPIO_Init+0x330>)
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	089b      	lsrs	r3, r3, #2
 80054d0:	3302      	adds	r3, #2
 80054d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	220f      	movs	r2, #15
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054f4:	d025      	beq.n	8005542 <HAL_GPIO_Init+0x242>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a4e      	ldr	r2, [pc, #312]	; (8005634 <HAL_GPIO_Init+0x334>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01f      	beq.n	800553e <HAL_GPIO_Init+0x23e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a4d      	ldr	r2, [pc, #308]	; (8005638 <HAL_GPIO_Init+0x338>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d019      	beq.n	800553a <HAL_GPIO_Init+0x23a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a4c      	ldr	r2, [pc, #304]	; (800563c <HAL_GPIO_Init+0x33c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_GPIO_Init+0x236>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a4b      	ldr	r2, [pc, #300]	; (8005640 <HAL_GPIO_Init+0x340>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00d      	beq.n	8005532 <HAL_GPIO_Init+0x232>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a4a      	ldr	r2, [pc, #296]	; (8005644 <HAL_GPIO_Init+0x344>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <HAL_GPIO_Init+0x22e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a49      	ldr	r2, [pc, #292]	; (8005648 <HAL_GPIO_Init+0x348>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <HAL_GPIO_Init+0x22a>
 8005526:	2306      	movs	r3, #6
 8005528:	e00c      	b.n	8005544 <HAL_GPIO_Init+0x244>
 800552a:	2307      	movs	r3, #7
 800552c:	e00a      	b.n	8005544 <HAL_GPIO_Init+0x244>
 800552e:	2305      	movs	r3, #5
 8005530:	e008      	b.n	8005544 <HAL_GPIO_Init+0x244>
 8005532:	2304      	movs	r3, #4
 8005534:	e006      	b.n	8005544 <HAL_GPIO_Init+0x244>
 8005536:	2303      	movs	r3, #3
 8005538:	e004      	b.n	8005544 <HAL_GPIO_Init+0x244>
 800553a:	2302      	movs	r3, #2
 800553c:	e002      	b.n	8005544 <HAL_GPIO_Init+0x244>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <HAL_GPIO_Init+0x244>
 8005542:	2300      	movs	r3, #0
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	f002 0203 	and.w	r2, r2, #3
 800554a:	0092      	lsls	r2, r2, #2
 800554c:	4093      	lsls	r3, r2
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005554:	4936      	ldr	r1, [pc, #216]	; (8005630 <HAL_GPIO_Init+0x330>)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	3302      	adds	r3, #2
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005562:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_GPIO_Init+0x34c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	43db      	mvns	r3, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005586:	4a31      	ldr	r2, [pc, #196]	; (800564c <HAL_GPIO_Init+0x34c>)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800558c:	4b2f      	ldr	r3, [pc, #188]	; (800564c <HAL_GPIO_Init+0x34c>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	43db      	mvns	r3, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4013      	ands	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055b0:	4a26      	ldr	r2, [pc, #152]	; (800564c <HAL_GPIO_Init+0x34c>)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055b6:	4b25      	ldr	r3, [pc, #148]	; (800564c <HAL_GPIO_Init+0x34c>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	43db      	mvns	r3, r3
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4013      	ands	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055da:	4a1c      	ldr	r2, [pc, #112]	; (800564c <HAL_GPIO_Init+0x34c>)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <HAL_GPIO_Init+0x34c>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4013      	ands	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005604:	4a11      	ldr	r2, [pc, #68]	; (800564c <HAL_GPIO_Init+0x34c>)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	3301      	adds	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	f47f ae78 	bne.w	8005310 <HAL_GPIO_Init+0x10>
  }
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	40021000 	.word	0x40021000
 8005630:	40010000 	.word	0x40010000
 8005634:	48000400 	.word	0x48000400
 8005638:	48000800 	.word	0x48000800
 800563c:	48000c00 	.word	0x48000c00
 8005640:	48001000 	.word	0x48001000
 8005644:	48001400 	.word	0x48001400
 8005648:	48001800 	.word	0x48001800
 800564c:	40010400 	.word	0x40010400

08005650 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800565e:	e0cd      	b.n	80057fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005660:	2201      	movs	r2, #1
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80c0 	beq.w	80057f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005676:	4a68      	ldr	r2, [pc, #416]	; (8005818 <HAL_GPIO_DeInit+0x1c8>)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	3302      	adds	r3, #2
 800567e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005682:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	220f      	movs	r2, #15
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4013      	ands	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800569e:	d025      	beq.n	80056ec <HAL_GPIO_DeInit+0x9c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a5e      	ldr	r2, [pc, #376]	; (800581c <HAL_GPIO_DeInit+0x1cc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01f      	beq.n	80056e8 <HAL_GPIO_DeInit+0x98>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a5d      	ldr	r2, [pc, #372]	; (8005820 <HAL_GPIO_DeInit+0x1d0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d019      	beq.n	80056e4 <HAL_GPIO_DeInit+0x94>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a5c      	ldr	r2, [pc, #368]	; (8005824 <HAL_GPIO_DeInit+0x1d4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <HAL_GPIO_DeInit+0x90>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a5b      	ldr	r2, [pc, #364]	; (8005828 <HAL_GPIO_DeInit+0x1d8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00d      	beq.n	80056dc <HAL_GPIO_DeInit+0x8c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a5a      	ldr	r2, [pc, #360]	; (800582c <HAL_GPIO_DeInit+0x1dc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d007      	beq.n	80056d8 <HAL_GPIO_DeInit+0x88>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a59      	ldr	r2, [pc, #356]	; (8005830 <HAL_GPIO_DeInit+0x1e0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d101      	bne.n	80056d4 <HAL_GPIO_DeInit+0x84>
 80056d0:	2306      	movs	r3, #6
 80056d2:	e00c      	b.n	80056ee <HAL_GPIO_DeInit+0x9e>
 80056d4:	2307      	movs	r3, #7
 80056d6:	e00a      	b.n	80056ee <HAL_GPIO_DeInit+0x9e>
 80056d8:	2305      	movs	r3, #5
 80056da:	e008      	b.n	80056ee <HAL_GPIO_DeInit+0x9e>
 80056dc:	2304      	movs	r3, #4
 80056de:	e006      	b.n	80056ee <HAL_GPIO_DeInit+0x9e>
 80056e0:	2303      	movs	r3, #3
 80056e2:	e004      	b.n	80056ee <HAL_GPIO_DeInit+0x9e>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e002      	b.n	80056ee <HAL_GPIO_DeInit+0x9e>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <HAL_GPIO_DeInit+0x9e>
 80056ec:	2300      	movs	r3, #0
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	f002 0203 	and.w	r2, r2, #3
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	4093      	lsls	r3, r2
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d132      	bne.n	8005764 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80056fe:	4b4d      	ldr	r3, [pc, #308]	; (8005834 <HAL_GPIO_DeInit+0x1e4>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	43db      	mvns	r3, r3
 8005706:	494b      	ldr	r1, [pc, #300]	; (8005834 <HAL_GPIO_DeInit+0x1e4>)
 8005708:	4013      	ands	r3, r2
 800570a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800570c:	4b49      	ldr	r3, [pc, #292]	; (8005834 <HAL_GPIO_DeInit+0x1e4>)
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	43db      	mvns	r3, r3
 8005714:	4947      	ldr	r1, [pc, #284]	; (8005834 <HAL_GPIO_DeInit+0x1e4>)
 8005716:	4013      	ands	r3, r2
 8005718:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800571a:	4b46      	ldr	r3, [pc, #280]	; (8005834 <HAL_GPIO_DeInit+0x1e4>)
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	43db      	mvns	r3, r3
 8005722:	4944      	ldr	r1, [pc, #272]	; (8005834 <HAL_GPIO_DeInit+0x1e4>)
 8005724:	4013      	ands	r3, r2
 8005726:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005728:	4b42      	ldr	r3, [pc, #264]	; (8005834 <HAL_GPIO_DeInit+0x1e4>)
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	43db      	mvns	r3, r3
 8005730:	4940      	ldr	r1, [pc, #256]	; (8005834 <HAL_GPIO_DeInit+0x1e4>)
 8005732:	4013      	ands	r3, r2
 8005734:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	220f      	movs	r2, #15
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005746:	4a34      	ldr	r2, [pc, #208]	; (8005818 <HAL_GPIO_DeInit+0x1c8>)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3302      	adds	r3, #2
 800574e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	43da      	mvns	r2, r3
 8005756:	4830      	ldr	r0, [pc, #192]	; (8005818 <HAL_GPIO_DeInit+0x1c8>)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	089b      	lsrs	r3, r3, #2
 800575c:	400a      	ands	r2, r1
 800575e:	3302      	adds	r3, #2
 8005760:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	2103      	movs	r1, #3
 800576e:	fa01 f303 	lsl.w	r3, r1, r3
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	08da      	lsrs	r2, r3, #3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3208      	adds	r2, #8
 8005780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	220f      	movs	r2, #15
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	08d2      	lsrs	r2, r2, #3
 8005798:	4019      	ands	r1, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3208      	adds	r2, #8
 800579e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	2103      	movs	r1, #3
 80057ac:	fa01 f303 	lsl.w	r3, r1, r3
 80057b0:	43db      	mvns	r3, r3
 80057b2:	401a      	ands	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	2101      	movs	r1, #1
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	fa01 f303 	lsl.w	r3, r1, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	401a      	ands	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	2103      	movs	r1, #3
 80057d6:	fa01 f303 	lsl.w	r3, r1, r3
 80057da:	43db      	mvns	r3, r3
 80057dc:	401a      	ands	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	2101      	movs	r1, #1
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	43db      	mvns	r3, r3
 80057f0:	401a      	ands	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	3301      	adds	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	f47f af2b 	bne.w	8005660 <HAL_GPIO_DeInit+0x10>
  }
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000
 800581c:	48000400 	.word	0x48000400
 8005820:	48000800 	.word	0x48000800
 8005824:	48000c00 	.word	0x48000c00
 8005828:	48001000 	.word	0x48001000
 800582c:	48001400 	.word	0x48001400
 8005830:	48001800 	.word	0x48001800
 8005834:	40010400 	.word	0x40010400

08005838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	807b      	strh	r3, [r7, #2]
 8005844:	4613      	mov	r3, r2
 8005846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005848:	787b      	ldrb	r3, [r7, #1]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005854:	e002      	b.n	800585c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005872:	4b08      	ldr	r3, [pc, #32]	; (8005894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f806 	bl	8005898 <HAL_GPIO_EXTI_Callback>
  }
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40010400 	.word	0x40010400

08005898 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e081      	b.n	80059c4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fc fd4f 	bl	8002378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2224      	movs	r2, #36	; 0x24
 80058de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0201 	bic.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800590e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d107      	bne.n	8005928 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005924:	609a      	str	r2, [r3, #8]
 8005926:	e006      	b.n	8005936 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005934:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d104      	bne.n	8005948 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005946:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800596a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	ea42 0103 	orr.w	r1, r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	021a      	lsls	r2, r3, #8
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69d9      	ldr	r1, [r3, #28]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1a      	ldr	r2, [r3, #32]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e021      	b.n	8005a22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2224      	movs	r2, #36	; 0x24
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fc fd02 	bl	8002400 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	813b      	strh	r3, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	f040 80f9 	bne.w	8005c46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_I2C_Mem_Write+0x34>
 8005a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0ed      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_I2C_Mem_Write+0x4e>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e0e6      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a82:	f7fc fec7 	bl	8002814 <HAL_GetTick>
 8005a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2319      	movs	r3, #25
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fac3 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0d1      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2221      	movs	r2, #33	; 0x21
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005acc:	88f8      	ldrh	r0, [r7, #6]
 8005ace:	893a      	ldrh	r2, [r7, #8]
 8005ad0:	8979      	ldrh	r1, [r7, #10]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	4603      	mov	r3, r0
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f9d3 	bl	8005e88 <I2C_RequestMemoryWrite>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0a9      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2bff      	cmp	r3, #255	; 0xff
 8005afc:	d90e      	bls.n	8005b1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	8979      	ldrh	r1, [r7, #10]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fba5 	bl	8006264 <I2C_TransferConfig>
 8005b1a:	e00f      	b.n	8005b3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	8979      	ldrh	r1, [r7, #10]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 fb94 	bl	8006264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 faad 	bl	80060a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e07b      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d034      	beq.n	8005bf4 <HAL_I2C_Mem_Write+0x1c8>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d130      	bne.n	8005bf4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fa3f 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e04d      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2bff      	cmp	r3, #255	; 0xff
 8005bb4:	d90e      	bls.n	8005bd4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	22ff      	movs	r2, #255	; 0xff
 8005bba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	8979      	ldrh	r1, [r7, #10]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fb49 	bl	8006264 <I2C_TransferConfig>
 8005bd2:	e00f      	b.n	8005bf4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	8979      	ldrh	r1, [r7, #10]
 8005be6:	2300      	movs	r3, #0
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fb38 	bl	8006264 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d19e      	bne.n	8005b3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fa8c 	bl	8006120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e01a      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2220      	movs	r2, #32
 8005c18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6859      	ldr	r1, [r3, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_I2C_Mem_Write+0x224>)
 8005c26:	400b      	ands	r3, r1
 8005c28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e000      	b.n	8005c48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c46:	2302      	movs	r3, #2
  }
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	fe00e800 	.word	0xfe00e800

08005c54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	4611      	mov	r1, r2
 8005c60:	461a      	mov	r2, r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	817b      	strh	r3, [r7, #10]
 8005c66:	460b      	mov	r3, r1
 8005c68:	813b      	strh	r3, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	f040 80fd 	bne.w	8005e76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_I2C_Mem_Read+0x34>
 8005c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0f1      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_I2C_Mem_Read+0x4e>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e0ea      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005caa:	f7fc fdb3 	bl	8002814 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2319      	movs	r3, #25
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f9af 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0d5      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2222      	movs	r2, #34	; 0x22
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cf4:	88f8      	ldrh	r0, [r7, #6]
 8005cf6:	893a      	ldrh	r2, [r7, #8]
 8005cf8:	8979      	ldrh	r1, [r7, #10]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	4603      	mov	r3, r0
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f913 	bl	8005f30 <I2C_RequestMemoryRead>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0ad      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2bff      	cmp	r3, #255	; 0xff
 8005d24:	d90e      	bls.n	8005d44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	22ff      	movs	r2, #255	; 0xff
 8005d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	8979      	ldrh	r1, [r7, #10]
 8005d34:	4b52      	ldr	r3, [pc, #328]	; (8005e80 <HAL_I2C_Mem_Read+0x22c>)
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fa91 	bl	8006264 <I2C_TransferConfig>
 8005d42:	e00f      	b.n	8005d64 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	8979      	ldrh	r1, [r7, #10]
 8005d56:	4b4a      	ldr	r3, [pc, #296]	; (8005e80 <HAL_I2C_Mem_Read+0x22c>)
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fa80 	bl	8006264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2104      	movs	r1, #4
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f956 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07c      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d034      	beq.n	8005e24 <HAL_I2C_Mem_Read+0x1d0>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d130      	bne.n	8005e24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2180      	movs	r1, #128	; 0x80
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f927 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e04d      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2bff      	cmp	r3, #255	; 0xff
 8005de4:	d90e      	bls.n	8005e04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	22ff      	movs	r2, #255	; 0xff
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	8979      	ldrh	r1, [r7, #10]
 8005df4:	2300      	movs	r3, #0
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fa31 	bl	8006264 <I2C_TransferConfig>
 8005e02:	e00f      	b.n	8005e24 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	8979      	ldrh	r1, [r7, #10]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fa20 	bl	8006264 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d19a      	bne.n	8005d64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f974 	bl	8006120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e01a      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2220      	movs	r2, #32
 8005e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_I2C_Mem_Read+0x230>)
 8005e56:	400b      	ands	r3, r1
 8005e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e000      	b.n	8005e78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e76:	2302      	movs	r3, #2
  }
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	80002400 	.word	0x80002400
 8005e84:	fe00e800 	.word	0xfe00e800

08005e88 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	4608      	mov	r0, r1
 8005e92:	4611      	mov	r1, r2
 8005e94:	461a      	mov	r2, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	817b      	strh	r3, [r7, #10]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	813b      	strh	r3, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	8979      	ldrh	r1, [r7, #10]
 8005ea8:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <I2C_RequestMemoryWrite+0xa4>)
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f9d7 	bl	8006264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	69b9      	ldr	r1, [r7, #24]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f8f0 	bl	80060a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e02c      	b.n	8005f24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d105      	bne.n	8005edc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ed0:	893b      	ldrh	r3, [r7, #8]
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8005eda:	e015      	b.n	8005f08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005edc:	893b      	ldrh	r3, [r7, #8]
 8005ede:	0a1b      	lsrs	r3, r3, #8
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	69b9      	ldr	r1, [r7, #24]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f8d6 	bl	80060a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e012      	b.n	8005f24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005efe:	893b      	ldrh	r3, [r7, #8]
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2180      	movs	r1, #128	; 0x80
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f884 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	80002000 	.word	0x80002000

08005f30 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	4608      	mov	r0, r1
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4603      	mov	r3, r0
 8005f40:	817b      	strh	r3, [r7, #10]
 8005f42:	460b      	mov	r3, r1
 8005f44:	813b      	strh	r3, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	8979      	ldrh	r1, [r7, #10]
 8005f50:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <I2C_RequestMemoryRead+0xa4>)
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2300      	movs	r3, #0
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f984 	bl	8006264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	69b9      	ldr	r1, [r7, #24]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f89d 	bl	80060a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e02c      	b.n	8005fca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f76:	893b      	ldrh	r3, [r7, #8]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f80:	e015      	b.n	8005fae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f82:	893b      	ldrh	r3, [r7, #8]
 8005f84:	0a1b      	lsrs	r3, r3, #8
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f883 	bl	80060a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e012      	b.n	8005fca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa4:	893b      	ldrh	r3, [r7, #8]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2140      	movs	r1, #64	; 0x40
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f831 	bl	8006020 <I2C_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	80002000 	.word	0x80002000

08005fd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d103      	bne.n	8005ff6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b01      	cmp	r3, #1
 8006002:	d007      	beq.n	8006014 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	619a      	str	r2, [r3, #24]
  }
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006030:	e022      	b.n	8006078 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d01e      	beq.n	8006078 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603a:	f7fc fbeb 	bl	8002814 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <I2C_WaitOnFlagUntilTimeout+0x30>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d113      	bne.n	8006078 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006054:	f043 0220 	orr.w	r2, r3, #32
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e00f      	b.n	8006098 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	429a      	cmp	r2, r3
 8006086:	bf0c      	ite	eq
 8006088:	2301      	moveq	r3, #1
 800608a:	2300      	movne	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	429a      	cmp	r2, r3
 8006094:	d0cd      	beq.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060ac:	e02c      	b.n	8006108 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f870 	bl	8006198 <I2C_IsAcknowledgeFailed>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e02a      	b.n	8006118 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d01e      	beq.n	8006108 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	f7fc fba3 	bl	8002814 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d113      	bne.n	8006108 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e007      	b.n	8006118 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b02      	cmp	r3, #2
 8006114:	d1cb      	bne.n	80060ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800612c:	e028      	b.n	8006180 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f830 	bl	8006198 <I2C_IsAcknowledgeFailed>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e026      	b.n	8006190 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006142:	f7fc fb67 	bl	8002814 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	d302      	bcc.n	8006158 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d113      	bne.n	8006180 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	f043 0220 	orr.w	r2, r3, #32
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e007      	b.n	8006190 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b20      	cmp	r3, #32
 800618c:	d1cf      	bne.n	800612e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d151      	bne.n	8006256 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061b2:	e022      	b.n	80061fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d01e      	beq.n	80061fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061bc:	f7fc fb2a 	bl	8002814 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <I2C_IsAcknowledgeFailed+0x3a>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d113      	bne.n	80061fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e02e      	b.n	8006258 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b20      	cmp	r3, #32
 8006206:	d1d5      	bne.n	80061b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2210      	movs	r2, #16
 800620e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2220      	movs	r2, #32
 8006216:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7ff fedd 	bl	8005fd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6859      	ldr	r1, [r3, #4]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <I2C_IsAcknowledgeFailed+0xc8>)
 800622a:	400b      	ands	r3, r1
 800622c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	f043 0204 	orr.w	r2, r3, #4
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	fe00e800 	.word	0xfe00e800

08006264 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	817b      	strh	r3, [r7, #10]
 8006272:	4613      	mov	r3, r2
 8006274:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	0d5b      	lsrs	r3, r3, #21
 8006280:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006284:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <I2C_TransferConfig+0x58>)
 8006286:	430b      	orrs	r3, r1
 8006288:	43db      	mvns	r3, r3
 800628a:	ea02 0103 	and.w	r1, r2, r3
 800628e:	897b      	ldrh	r3, [r7, #10]
 8006290:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006294:	7a7b      	ldrb	r3, [r7, #9]
 8006296:	041b      	lsls	r3, r3, #16
 8006298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	03ff63ff 	.word	0x03ff63ff

080062c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d138      	bne.n	8006348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e032      	b.n	800634a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	; 0x24
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006348:	2302      	movs	r3, #2
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b20      	cmp	r3, #32
 800636a:	d139      	bne.n	80063e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006376:	2302      	movs	r3, #2
 8006378:	e033      	b.n	80063e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2224      	movs	r2, #36	; 0x24
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	e000      	b.n	80063e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063e0:	2302      	movs	r3, #2
  }
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
	...

080063f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80063f4:	4b04      	ldr	r3, [pc, #16]	; (8006408 <HAL_PWREx_GetVoltageRange+0x18>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40007000 	.word	0x40007000

0800640c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800641a:	d130      	bne.n	800647e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800641c:	4b23      	ldr	r3, [pc, #140]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006428:	d038      	beq.n	800649c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800642a:	4b20      	ldr	r3, [pc, #128]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800643a:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2232      	movs	r2, #50	; 0x32
 8006440:	fb02 f303 	mul.w	r3, r2, r3
 8006444:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	0c9b      	lsrs	r3, r3, #18
 800644c:	3301      	adds	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006450:	e002      	b.n	8006458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b01      	subs	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006458:	4b14      	ldr	r3, [pc, #80]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006464:	d102      	bne.n	800646c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1f2      	bne.n	8006452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006478:	d110      	bne.n	800649c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e00f      	b.n	800649e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800647e:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800648a:	d007      	beq.n	800649c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006494:	4a05      	ldr	r2, [pc, #20]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800649a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40007000 	.word	0x40007000
 80064b0:	20000038 	.word	0x20000038
 80064b4:	431bde83 	.word	0x431bde83

080064b8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af02      	add	r7, sp, #8
 80064be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80064c0:	f7fc f9a8 	bl	8002814 <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e063      	b.n	8006598 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7fb ffaf 	bl	8002448 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80064ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 faf7 	bl	8006ae2 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	021a      	lsls	r2, r3, #8
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	2120      	movs	r1, #32
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 faef 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d131      	bne.n	800658e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006534:	f023 0310 	bic.w	r3, r3, #16
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6852      	ldr	r2, [r2, #4]
 800653c:	0611      	lsls	r1, r2, #24
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	68d2      	ldr	r2, [r2, #12]
 8006542:	4311      	orrs	r1, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	430b      	orrs	r3, r1
 800654a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <HAL_QSPI_Init+0xe8>)
 8006554:	4013      	ands	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6912      	ldr	r2, [r2, #16]
 800655a:	0411      	lsls	r1, r2, #16
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6952      	ldr	r2, [r2, #20]
 8006560:	4311      	orrs	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6992      	ldr	r2, [r2, #24]
 8006566:	4311      	orrs	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	430b      	orrs	r3, r1
 800656e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006596:	7afb      	ldrb	r3, [r7, #11]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	ffe0f8fe 	.word	0xffe0f8fe

080065a4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e016      	b.n	80065e4 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0201 	bic.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fb ff82 	bl	80024d0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80065f8:	f7fc f90c 	bl	8002814 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_QSPI_Command+0x22>
 800660a:	2302      	movs	r3, #2
 800660c:	e048      	b.n	80066a0 <HAL_QSPI_Command+0xb4>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b01      	cmp	r3, #1
 8006620:	d137      	bne.n	8006692 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2200      	movs	r2, #0
 8006638:	2120      	movs	r1, #32
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fa5f 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d125      	bne.n	8006696 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800664a:	2200      	movs	r2, #0
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fa8c 	bl	8006b6c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	d115      	bne.n	8006688 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2201      	movs	r2, #1
 8006664:	2102      	movs	r1, #2
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 fa49 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10f      	bne.n	8006696 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2202      	movs	r2, #2
 800667c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006686:	e006      	b.n	8006696 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006690:	e001      	b.n	8006696 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006692:	2302      	movs	r3, #2
 8006694:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80066b8:	f7fc f8ac 	bl	8002814 <HAL_GetTick>
 80066bc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3320      	adds	r3, #32
 80066c4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_QSPI_Transmit+0x2e>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e07b      	b.n	80067ce <HAL_QSPI_Transmit+0x126>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d16a      	bne.n	80067c0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d05b      	beq.n	80067ae <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2212      	movs	r2, #18
 80066fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800672a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800672c:	e01b      	b.n	8006766 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2201      	movs	r2, #1
 8006736:	2104      	movs	r1, #4
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f9e0 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006742:	7ffb      	ldrb	r3, [r7, #31]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d113      	bne.n	8006770 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	1e5a      	subs	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1df      	bne.n	800672e <HAL_QSPI_Transmit+0x86>
 800676e:	e000      	b.n	8006772 <HAL_QSPI_Transmit+0xca>
          break;
 8006770:	bf00      	nop
      }

      if (status == HAL_OK)
 8006772:	7ffb      	ldrb	r3, [r7, #31]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d115      	bne.n	80067a4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2201      	movs	r2, #1
 8006780:	2102      	movs	r1, #2
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 f9bb 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800678c:	7ffb      	ldrb	r3, [r7, #31]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d108      	bne.n	80067a4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2202      	movs	r2, #2
 8006798:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f934 	bl	8006a08 <HAL_QSPI_Abort>
 80067a0:	4603      	mov	r3, r0
 80067a2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80067ac:	e00a      	b.n	80067c4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	f043 0208 	orr.w	r2, r3, #8
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e001      	b.n	80067c4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
 80067c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80067cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b08a      	sub	sp, #40	; 0x28
 80067da:	af02      	add	r7, sp, #8
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80067e6:	f7fc f815 	bl	8002814 <HAL_GetTick>
 80067ea:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3320      	adds	r3, #32
 80067fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_QSPI_Receive+0x36>
 8006808:	2302      	movs	r3, #2
 800680a:	e082      	b.n	8006912 <HAL_QSPI_Receive+0x13c>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	d171      	bne.n	8006904 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d062      	beq.n	80068f2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2222      	movs	r2, #34	; 0x22
 8006830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006864:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800686e:	e01c      	b.n	80068aa <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2201      	movs	r2, #1
 8006878:	2106      	movs	r1, #6
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f93f 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006884:	7ffb      	ldrb	r3, [r7, #31]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d114      	bne.n	80068b4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	7812      	ldrb	r2, [r2, #0]
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	1e5a      	subs	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1de      	bne.n	8006870 <HAL_QSPI_Receive+0x9a>
 80068b2:	e000      	b.n	80068b6 <HAL_QSPI_Receive+0xe0>
          break;
 80068b4:	bf00      	nop
      }

      if (status == HAL_OK)
 80068b6:	7ffb      	ldrb	r3, [r7, #31]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d115      	bne.n	80068e8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2201      	movs	r2, #1
 80068c4:	2102      	movs	r1, #2
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f919 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80068d0:	7ffb      	ldrb	r3, [r7, #31]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d108      	bne.n	80068e8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2202      	movs	r2, #2
 80068dc:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f892 	bl	8006a08 <HAL_QSPI_Abort>
 80068e4:	4603      	mov	r3, r0
 80068e6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80068f0:	e00a      	b.n	8006908 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	f043 0208 	orr.w	r2, r3, #8
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e001      	b.n	8006908 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006904:	2302      	movs	r3, #2
 8006906:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006910:	7ffb      	ldrb	r3, [r7, #31]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b088      	sub	sp, #32
 800691e:	af02      	add	r7, sp, #8
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006928:	f7fb ff74 	bl	8002814 <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_QSPI_AutoPolling+0x24>
 800693a:	2302      	movs	r3, #2
 800693c:	e060      	b.n	8006a00 <HAL_QSPI_AutoPolling+0xe6>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d14f      	bne.n	80069f2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2242      	movs	r2, #66	; 0x42
 800695c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2200      	movs	r2, #0
 8006968:	2120      	movs	r1, #32
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f8c7 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d13d      	bne.n	80069f6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6852      	ldr	r2, [r2, #4]
 800698c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6892      	ldr	r2, [r2, #8]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80069b0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80069ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f8d3 	bl	8006b6c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2201      	movs	r2, #1
 80069ce:	2108      	movs	r1, #8
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f894 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2208      	movs	r2, #8
 80069e6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80069f0:	e001      	b.n	80069f6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80069f2:	2302      	movs	r3, #2
 80069f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006a14:	f7fb fefe 	bl	8002814 <HAL_GetTick>
 8006a18:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d056      	beq.n	8006ad8 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d017      	beq.n	8006a70 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0204 	bic.w	r2, r2, #4
 8006a4e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe fb35 	bl	80050c4 <HAL_DMA_Abort>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	f043 0204 	orr.w	r2, r3, #4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0202 	orr.w	r2, r2, #2
 8006a7e:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	2102      	movs	r1, #2
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f836 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10e      	bne.n	8006aba <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	2120      	movs	r1, #32
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f824 	bl	8006afe <QSPI_WaitFlagStateUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10b      	bne.n	8006ad8 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695a      	ldr	r2, [r3, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006ace:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	603b      	str	r3, [r7, #0]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b0e:	e01a      	b.n	8006b46 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d016      	beq.n	8006b46 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b18:	f7fb fe7c 	bl	8002814 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d302      	bcc.n	8006b2e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2204      	movs	r2, #4
 8006b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	f043 0201 	orr.w	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e00e      	b.n	8006b64 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bf14      	ite	ne
 8006b54:	2301      	movne	r3, #1
 8006b56:	2300      	moveq	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d1d6      	bne.n	8006b10 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d009      	beq.n	8006b94 <QSPI_Config+0x28>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b86:	d005      	beq.n	8006b94 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3a01      	subs	r2, #1
 8006b92:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80b9 	beq.w	8006d10 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d05f      	beq.n	8006c66 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	6892      	ldr	r2, [r2, #8]
 8006bae:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d031      	beq.n	8006c1c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	049b      	lsls	r3, r3, #18
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	ea42 0103 	orr.w	r1, r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c0c:	f000 812e 	beq.w	8006e6c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	6852      	ldr	r2, [r2, #4]
 8006c18:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006c1a:	e127      	b.n	8006e6c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	431a      	orrs	r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	049b      	lsls	r3, r3, #18
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	431a      	orrs	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	ea42 0103 	orr.w	r1, r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	615a      	str	r2, [r3, #20]
}
 8006c64:	e102      	b.n	8006e6c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02e      	beq.n	8006ccc <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	431a      	orrs	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	431a      	orrs	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	049b      	lsls	r3, r3, #18
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	ea42 0103 	orr.w	r1, r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006cbc:	f000 80d6 	beq.w	8006e6c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	6852      	ldr	r2, [r2, #4]
 8006cc8:	619a      	str	r2, [r3, #24]
}
 8006cca:	e0cf      	b.n	8006e6c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	049b      	lsls	r3, r3, #18
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	ea42 0103 	orr.w	r1, r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	615a      	str	r2, [r3, #20]
}
 8006d0e:	e0ad      	b.n	8006e6c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d058      	beq.n	8006dca <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	6892      	ldr	r2, [r2, #8]
 8006d20:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d02d      	beq.n	8006d86 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	431a      	orrs	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	049b      	lsls	r3, r3, #18
 8006d46:	431a      	orrs	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	ea42 0103 	orr.w	r1, r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d78:	d078      	beq.n	8006e6c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	6852      	ldr	r2, [r2, #4]
 8006d82:	619a      	str	r2, [r3, #24]
}
 8006d84:	e072      	b.n	8006e6c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d94:	431a      	orrs	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	049b      	lsls	r3, r3, #18
 8006da2:	431a      	orrs	r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	ea42 0103 	orr.w	r1, r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	615a      	str	r2, [r3, #20]
}
 8006dc8:	e050      	b.n	8006e6c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d02a      	beq.n	8006e28 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de0:	431a      	orrs	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	431a      	orrs	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	049b      	lsls	r3, r3, #18
 8006dee:	431a      	orrs	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	ea42 0103 	orr.w	r1, r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006e1a:	d027      	beq.n	8006e6c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	6852      	ldr	r2, [r2, #4]
 8006e24:	619a      	str	r2, [r3, #24]
}
 8006e26:	e021      	b.n	8006e6c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01d      	beq.n	8006e6c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	431a      	orrs	r2, r3
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	049b      	lsls	r3, r3, #18
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	ea42 0103 	orr.w	r1, r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	615a      	str	r2, [r3, #20]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e3d4      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e8a:	4ba1      	ldr	r3, [pc, #644]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 030c 	and.w	r3, r3, #12
 8006e92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e94:	4b9e      	ldr	r3, [pc, #632]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80e4 	beq.w	8007074 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x4a>
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b0c      	cmp	r3, #12
 8006eb6:	f040 808b 	bne.w	8006fd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f040 8087 	bne.w	8006fd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ec2:	4b93      	ldr	r3, [pc, #588]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_RCC_OscConfig+0x62>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e3ac      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1a      	ldr	r2, [r3, #32]
 8006ede:	4b8c      	ldr	r3, [pc, #560]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x7c>
 8006eea:	4b89      	ldr	r3, [pc, #548]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ef2:	e005      	b.n	8006f00 <HAL_RCC_OscConfig+0x88>
 8006ef4:	4b86      	ldr	r3, [pc, #536]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006efa:	091b      	lsrs	r3, r3, #4
 8006efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d223      	bcs.n	8006f4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fd3f 	bl	800798c <RCC_SetFlashLatencyFromMSIRange>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e38d      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f18:	4b7d      	ldr	r3, [pc, #500]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a7c      	ldr	r2, [pc, #496]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f1e:	f043 0308 	orr.w	r3, r3, #8
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	4b7a      	ldr	r3, [pc, #488]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	4977      	ldr	r1, [pc, #476]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f36:	4b76      	ldr	r3, [pc, #472]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	4972      	ldr	r1, [pc, #456]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	604b      	str	r3, [r1, #4]
 8006f4a:	e025      	b.n	8006f98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f4c:	4b70      	ldr	r3, [pc, #448]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a6f      	ldr	r2, [pc, #444]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f52:	f043 0308 	orr.w	r3, r3, #8
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	4b6d      	ldr	r3, [pc, #436]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	496a      	ldr	r1, [pc, #424]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f6a:	4b69      	ldr	r3, [pc, #420]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	4965      	ldr	r1, [pc, #404]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fcff 	bl	800798c <RCC_SetFlashLatencyFromMSIRange>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e34d      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f98:	f000 fc36 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4b5c      	ldr	r3, [pc, #368]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	091b      	lsrs	r3, r3, #4
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	4a5a      	ldr	r2, [pc, #360]	; (8007114 <HAL_RCC_OscConfig+0x29c>)
 8006faa:	5cd3      	ldrb	r3, [r2, r3]
 8006fac:	f003 031f 	and.w	r3, r3, #31
 8006fb0:	fa21 f303 	lsr.w	r3, r1, r3
 8006fb4:	4a58      	ldr	r2, [pc, #352]	; (8007118 <HAL_RCC_OscConfig+0x2a0>)
 8006fb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fb8:	4b58      	ldr	r3, [pc, #352]	; (800711c <HAL_RCC_OscConfig+0x2a4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fb fbd9 	bl	8002774 <HAL_InitTick>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d052      	beq.n	8007072 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	e331      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d032      	beq.n	800703e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fd8:	4b4d      	ldr	r3, [pc, #308]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a4c      	ldr	r2, [pc, #304]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fe4:	f7fb fc16 	bl	8002814 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fec:	f7fb fc12 	bl	8002814 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e31a      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ffe:	4b44      	ldr	r3, [pc, #272]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800700a:	4b41      	ldr	r3, [pc, #260]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a40      	ldr	r2, [pc, #256]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007010:	f043 0308 	orr.w	r3, r3, #8
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	4b3e      	ldr	r3, [pc, #248]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	493b      	ldr	r1, [pc, #236]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007024:	4313      	orrs	r3, r2
 8007026:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007028:	4b39      	ldr	r3, [pc, #228]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	4936      	ldr	r1, [pc, #216]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007038:	4313      	orrs	r3, r2
 800703a:	604b      	str	r3, [r1, #4]
 800703c:	e01a      	b.n	8007074 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800703e:	4b34      	ldr	r3, [pc, #208]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a33      	ldr	r2, [pc, #204]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007044:	f023 0301 	bic.w	r3, r3, #1
 8007048:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800704a:	f7fb fbe3 	bl	8002814 <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007052:	f7fb fbdf 	bl	8002814 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e2e7      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007064:	4b2a      	ldr	r3, [pc, #168]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f0      	bne.n	8007052 <HAL_RCC_OscConfig+0x1da>
 8007070:	e000      	b.n	8007074 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007072:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d074      	beq.n	800716a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b08      	cmp	r3, #8
 8007084:	d005      	beq.n	8007092 <HAL_RCC_OscConfig+0x21a>
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b0c      	cmp	r3, #12
 800708a:	d10e      	bne.n	80070aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b03      	cmp	r3, #3
 8007090:	d10b      	bne.n	80070aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007092:	4b1f      	ldr	r3, [pc, #124]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d064      	beq.n	8007168 <HAL_RCC_OscConfig+0x2f0>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d160      	bne.n	8007168 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e2c4      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b2:	d106      	bne.n	80070c2 <HAL_RCC_OscConfig+0x24a>
 80070b4:	4b16      	ldr	r3, [pc, #88]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a15      	ldr	r2, [pc, #84]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e01d      	b.n	80070fe <HAL_RCC_OscConfig+0x286>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070ca:	d10c      	bne.n	80070e6 <HAL_RCC_OscConfig+0x26e>
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0f      	ldr	r2, [pc, #60]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a0c      	ldr	r2, [pc, #48]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	e00b      	b.n	80070fe <HAL_RCC_OscConfig+0x286>
 80070e6:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a09      	ldr	r2, [pc, #36]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4b07      	ldr	r3, [pc, #28]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a06      	ldr	r2, [pc, #24]	; (8007110 <HAL_RCC_OscConfig+0x298>)
 80070f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01c      	beq.n	8007140 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007106:	f7fb fb85 	bl	8002814 <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800710c:	e011      	b.n	8007132 <HAL_RCC_OscConfig+0x2ba>
 800710e:	bf00      	nop
 8007110:	40021000 	.word	0x40021000
 8007114:	08009674 	.word	0x08009674
 8007118:	20000038 	.word	0x20000038
 800711c:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007120:	f7fb fb78 	bl	8002814 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b64      	cmp	r3, #100	; 0x64
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e280      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007132:	4baf      	ldr	r3, [pc, #700]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x2a8>
 800713e:	e014      	b.n	800716a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007140:	f7fb fb68 	bl	8002814 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007148:	f7fb fb64 	bl	8002814 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b64      	cmp	r3, #100	; 0x64
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e26c      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800715a:	4ba5      	ldr	r3, [pc, #660]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <HAL_RCC_OscConfig+0x2d0>
 8007166:	e000      	b.n	800716a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d060      	beq.n	8007238 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b04      	cmp	r3, #4
 800717a:	d005      	beq.n	8007188 <HAL_RCC_OscConfig+0x310>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b0c      	cmp	r3, #12
 8007180:	d119      	bne.n	80071b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d116      	bne.n	80071b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007188:	4b99      	ldr	r3, [pc, #612]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_RCC_OscConfig+0x328>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e249      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a0:	4b93      	ldr	r3, [pc, #588]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	4990      	ldr	r1, [pc, #576]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071b4:	e040      	b.n	8007238 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d023      	beq.n	8007206 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071be:	4b8c      	ldr	r3, [pc, #560]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a8b      	ldr	r2, [pc, #556]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80071c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ca:	f7fb fb23 	bl	8002814 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d2:	f7fb fb1f 	bl	8002814 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e227      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071e4:	4b82      	ldr	r3, [pc, #520]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f0      	beq.n	80071d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f0:	4b7f      	ldr	r3, [pc, #508]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	061b      	lsls	r3, r3, #24
 80071fe:	497c      	ldr	r1, [pc, #496]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007200:	4313      	orrs	r3, r2
 8007202:	604b      	str	r3, [r1, #4]
 8007204:	e018      	b.n	8007238 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007206:	4b7a      	ldr	r3, [pc, #488]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a79      	ldr	r2, [pc, #484]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800720c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007212:	f7fb faff 	bl	8002814 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800721a:	f7fb fafb 	bl	8002814 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e203      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800722c:	4b70      	ldr	r3, [pc, #448]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f0      	bne.n	800721a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d03c      	beq.n	80072be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01c      	beq.n	8007286 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800724c:	4b68      	ldr	r3, [pc, #416]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800724e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007252:	4a67      	ldr	r2, [pc, #412]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007254:	f043 0301 	orr.w	r3, r3, #1
 8007258:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800725c:	f7fb fada 	bl	8002814 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007264:	f7fb fad6 	bl	8002814 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e1de      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007276:	4b5e      	ldr	r3, [pc, #376]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0ef      	beq.n	8007264 <HAL_RCC_OscConfig+0x3ec>
 8007284:	e01b      	b.n	80072be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007286:	4b5a      	ldr	r3, [pc, #360]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800728c:	4a58      	ldr	r2, [pc, #352]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800728e:	f023 0301 	bic.w	r3, r3, #1
 8007292:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007296:	f7fb fabd 	bl	8002814 <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800729e:	f7fb fab9 	bl	8002814 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e1c1      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072b0:	4b4f      	ldr	r3, [pc, #316]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80072b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1ef      	bne.n	800729e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80a6 	beq.w	8007418 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072cc:	2300      	movs	r3, #0
 80072ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80072d0:	4b47      	ldr	r3, [pc, #284]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80072d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10d      	bne.n	80072f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072dc:	4b44      	ldr	r3, [pc, #272]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80072de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e0:	4a43      	ldr	r2, [pc, #268]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80072e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e6:	6593      	str	r3, [r2, #88]	; 0x58
 80072e8:	4b41      	ldr	r3, [pc, #260]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80072ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072f4:	2301      	movs	r3, #1
 80072f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072f8:	4b3e      	ldr	r3, [pc, #248]	; (80073f4 <HAL_RCC_OscConfig+0x57c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d118      	bne.n	8007336 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007304:	4b3b      	ldr	r3, [pc, #236]	; (80073f4 <HAL_RCC_OscConfig+0x57c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a3a      	ldr	r2, [pc, #232]	; (80073f4 <HAL_RCC_OscConfig+0x57c>)
 800730a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800730e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007310:	f7fb fa80 	bl	8002814 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007318:	f7fb fa7c 	bl	8002814 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e184      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800732a:	4b32      	ldr	r3, [pc, #200]	; (80073f4 <HAL_RCC_OscConfig+0x57c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0f0      	beq.n	8007318 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d108      	bne.n	8007350 <HAL_RCC_OscConfig+0x4d8>
 800733e:	4b2c      	ldr	r3, [pc, #176]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007344:	4a2a      	ldr	r2, [pc, #168]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800734e:	e024      	b.n	800739a <HAL_RCC_OscConfig+0x522>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b05      	cmp	r3, #5
 8007356:	d110      	bne.n	800737a <HAL_RCC_OscConfig+0x502>
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735e:	4a24      	ldr	r2, [pc, #144]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007360:	f043 0304 	orr.w	r3, r3, #4
 8007364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007368:	4b21      	ldr	r3, [pc, #132]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800736a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736e:	4a20      	ldr	r2, [pc, #128]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007378:	e00f      	b.n	800739a <HAL_RCC_OscConfig+0x522>
 800737a:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007380:	4a1b      	ldr	r2, [pc, #108]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800738a:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 800738c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007390:	4a17      	ldr	r2, [pc, #92]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 8007392:	f023 0304 	bic.w	r3, r3, #4
 8007396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d016      	beq.n	80073d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a2:	f7fb fa37 	bl	8002814 <HAL_GetTick>
 80073a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073a8:	e00a      	b.n	80073c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073aa:	f7fb fa33 	bl	8002814 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e139      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_OscConfig+0x578>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0ed      	beq.n	80073aa <HAL_RCC_OscConfig+0x532>
 80073ce:	e01a      	b.n	8007406 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d0:	f7fb fa20 	bl	8002814 <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073d6:	e00f      	b.n	80073f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d8:	f7fb fa1c 	bl	8002814 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d906      	bls.n	80073f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e122      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
 80073ee:	bf00      	nop
 80073f0:	40021000 	.word	0x40021000
 80073f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073f8:	4b90      	ldr	r3, [pc, #576]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e8      	bne.n	80073d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007406:	7ffb      	ldrb	r3, [r7, #31]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d105      	bne.n	8007418 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800740c:	4b8b      	ldr	r3, [pc, #556]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 800740e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007410:	4a8a      	ldr	r2, [pc, #552]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 8007412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007416:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8108 	beq.w	8007632 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	2b02      	cmp	r3, #2
 8007428:	f040 80d0 	bne.w	80075cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800742c:	4b83      	ldr	r3, [pc, #524]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f003 0203 	and.w	r2, r3, #3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	429a      	cmp	r2, r3
 800743e:	d130      	bne.n	80074a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	3b01      	subs	r3, #1
 800744c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800744e:	429a      	cmp	r2, r3
 8007450:	d127      	bne.n	80074a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800745e:	429a      	cmp	r2, r3
 8007460:	d11f      	bne.n	80074a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800746c:	2a07      	cmp	r2, #7
 800746e:	bf14      	ite	ne
 8007470:	2201      	movne	r2, #1
 8007472:	2200      	moveq	r2, #0
 8007474:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007476:	4293      	cmp	r3, r2
 8007478:	d113      	bne.n	80074a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	085b      	lsrs	r3, r3, #1
 8007486:	3b01      	subs	r3, #1
 8007488:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800748a:	429a      	cmp	r2, r3
 800748c:	d109      	bne.n	80074a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	085b      	lsrs	r3, r3, #1
 800749a:	3b01      	subs	r3, #1
 800749c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800749e:	429a      	cmp	r2, r3
 80074a0:	d06e      	beq.n	8007580 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b0c      	cmp	r3, #12
 80074a6:	d069      	beq.n	800757c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80074a8:	4b64      	ldr	r3, [pc, #400]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80074b4:	4b61      	ldr	r3, [pc, #388]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0b7      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80074c4:	4b5d      	ldr	r3, [pc, #372]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a5c      	ldr	r2, [pc, #368]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80074ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074d0:	f7fb f9a0 	bl	8002814 <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d8:	f7fb f99c 	bl	8002814 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e0a4      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074ea:	4b54      	ldr	r3, [pc, #336]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1f0      	bne.n	80074d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074f6:	4b51      	ldr	r3, [pc, #324]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	4b51      	ldr	r3, [pc, #324]	; (8007640 <HAL_RCC_OscConfig+0x7c8>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007506:	3a01      	subs	r2, #1
 8007508:	0112      	lsls	r2, r2, #4
 800750a:	4311      	orrs	r1, r2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007510:	0212      	lsls	r2, r2, #8
 8007512:	4311      	orrs	r1, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007518:	0852      	lsrs	r2, r2, #1
 800751a:	3a01      	subs	r2, #1
 800751c:	0552      	lsls	r2, r2, #21
 800751e:	4311      	orrs	r1, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007524:	0852      	lsrs	r2, r2, #1
 8007526:	3a01      	subs	r2, #1
 8007528:	0652      	lsls	r2, r2, #25
 800752a:	4311      	orrs	r1, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007530:	0912      	lsrs	r2, r2, #4
 8007532:	0452      	lsls	r2, r2, #17
 8007534:	430a      	orrs	r2, r1
 8007536:	4941      	ldr	r1, [pc, #260]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 8007538:	4313      	orrs	r3, r2
 800753a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800753c:	4b3f      	ldr	r3, [pc, #252]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a3e      	ldr	r2, [pc, #248]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 8007542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007546:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007548:	4b3c      	ldr	r3, [pc, #240]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	4a3b      	ldr	r2, [pc, #236]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 800754e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007552:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007554:	f7fb f95e 	bl	8002814 <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800755c:	f7fb f95a 	bl	8002814 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e062      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800756e:	4b33      	ldr	r3, [pc, #204]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800757a:	e05a      	b.n	8007632 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e059      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007580:	4b2e      	ldr	r3, [pc, #184]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d152      	bne.n	8007632 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800758c:	4b2b      	ldr	r3, [pc, #172]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a2a      	ldr	r2, [pc, #168]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 8007592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007596:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007598:	4b28      	ldr	r3, [pc, #160]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4a27      	ldr	r2, [pc, #156]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 800759e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075a4:	f7fb f936 	bl	8002814 <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ac:	f7fb f932 	bl	8002814 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e03a      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075be:	4b1f      	ldr	r3, [pc, #124]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0f0      	beq.n	80075ac <HAL_RCC_OscConfig+0x734>
 80075ca:	e032      	b.n	8007632 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b0c      	cmp	r3, #12
 80075d0:	d02d      	beq.n	800762e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d2:	4b1a      	ldr	r3, [pc, #104]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a19      	ldr	r2, [pc, #100]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80075d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80075de:	4b17      	ldr	r3, [pc, #92]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d105      	bne.n	80075f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80075ea:	4b14      	ldr	r3, [pc, #80]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	4a13      	ldr	r2, [pc, #76]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80075f6:	4b11      	ldr	r3, [pc, #68]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	4a10      	ldr	r2, [pc, #64]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 80075fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007604:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007606:	f7fb f905 	bl	8002814 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760e:	f7fb f901 	bl	8002814 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e009      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <HAL_RCC_OscConfig+0x7c4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f0      	bne.n	800760e <HAL_RCC_OscConfig+0x796>
 800762c:	e001      	b.n	8007632 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3720      	adds	r7, #32
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40021000 	.word	0x40021000
 8007640:	f99d808c 	.word	0xf99d808c

08007644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e0c8      	b.n	80077ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007658:	4b66      	ldr	r3, [pc, #408]	; (80077f4 <HAL_RCC_ClockConfig+0x1b0>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d910      	bls.n	8007688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007666:	4b63      	ldr	r3, [pc, #396]	; (80077f4 <HAL_RCC_ClockConfig+0x1b0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 0207 	bic.w	r2, r3, #7
 800766e:	4961      	ldr	r1, [pc, #388]	; (80077f4 <HAL_RCC_ClockConfig+0x1b0>)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	4313      	orrs	r3, r2
 8007674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007676:	4b5f      	ldr	r3, [pc, #380]	; (80077f4 <HAL_RCC_ClockConfig+0x1b0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d001      	beq.n	8007688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e0b0      	b.n	80077ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d04c      	beq.n	800772e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b03      	cmp	r3, #3
 800769a:	d107      	bne.n	80076ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800769c:	4b56      	ldr	r3, [pc, #344]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d121      	bne.n	80076ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e09e      	b.n	80077ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d107      	bne.n	80076c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076b4:	4b50      	ldr	r3, [pc, #320]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d115      	bne.n	80076ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e092      	b.n	80077ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d107      	bne.n	80076dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076cc:	4b4a      	ldr	r3, [pc, #296]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d109      	bne.n	80076ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e086      	b.n	80077ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076dc:	4b46      	ldr	r3, [pc, #280]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e07e      	b.n	80077ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076ec:	4b42      	ldr	r3, [pc, #264]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f023 0203 	bic.w	r2, r3, #3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	493f      	ldr	r1, [pc, #252]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fe:	f7fb f889 	bl	8002814 <HAL_GetTick>
 8007702:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007704:	e00a      	b.n	800771c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007706:	f7fb f885 	bl	8002814 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f241 3288 	movw	r2, #5000	; 0x1388
 8007714:	4293      	cmp	r3, r2
 8007716:	d901      	bls.n	800771c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e066      	b.n	80077ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800771c:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 020c 	and.w	r2, r3, #12
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	429a      	cmp	r2, r3
 800772c:	d1eb      	bne.n	8007706 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d008      	beq.n	800774c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800773a:	4b2f      	ldr	r3, [pc, #188]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	492c      	ldr	r1, [pc, #176]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 8007748:	4313      	orrs	r3, r2
 800774a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800774c:	4b29      	ldr	r3, [pc, #164]	; (80077f4 <HAL_RCC_ClockConfig+0x1b0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d210      	bcs.n	800777c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800775a:	4b26      	ldr	r3, [pc, #152]	; (80077f4 <HAL_RCC_ClockConfig+0x1b0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 0207 	bic.w	r2, r3, #7
 8007762:	4924      	ldr	r1, [pc, #144]	; (80077f4 <HAL_RCC_ClockConfig+0x1b0>)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	4313      	orrs	r3, r2
 8007768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800776a:	4b22      	ldr	r3, [pc, #136]	; (80077f4 <HAL_RCC_ClockConfig+0x1b0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d001      	beq.n	800777c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e036      	b.n	80077ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d008      	beq.n	800779a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007788:	4b1b      	ldr	r3, [pc, #108]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	4918      	ldr	r1, [pc, #96]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 8007796:	4313      	orrs	r3, r2
 8007798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4910      	ldr	r1, [pc, #64]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077ba:	f000 f825 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 80077be:	4601      	mov	r1, r0
 80077c0:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <HAL_RCC_ClockConfig+0x1b4>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	091b      	lsrs	r3, r3, #4
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <HAL_RCC_ClockConfig+0x1b8>)
 80077cc:	5cd3      	ldrb	r3, [r2, r3]
 80077ce:	f003 031f 	and.w	r3, r3, #31
 80077d2:	fa21 f303 	lsr.w	r3, r1, r3
 80077d6:	4a0a      	ldr	r2, [pc, #40]	; (8007800 <HAL_RCC_ClockConfig+0x1bc>)
 80077d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077da:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <HAL_RCC_ClockConfig+0x1c0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fa ffc8 	bl	8002774 <HAL_InitTick>
 80077e4:	4603      	mov	r3, r0
 80077e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80077e8:	7afb      	ldrb	r3, [r7, #11]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40022000 	.word	0x40022000
 80077f8:	40021000 	.word	0x40021000
 80077fc:	08009674 	.word	0x08009674
 8007800:	20000038 	.word	0x20000038
 8007804:	2000003c 	.word	0x2000003c

08007808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007808:	b480      	push	{r7}
 800780a:	b089      	sub	sp, #36	; 0x24
 800780c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
 8007812:	2300      	movs	r3, #0
 8007814:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007816:	4b3d      	ldr	r3, [pc, #244]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 030c 	and.w	r3, r3, #12
 800781e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007820:	4b3a      	ldr	r3, [pc, #232]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_GetSysClockFreq+0x34>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2b0c      	cmp	r3, #12
 8007834:	d121      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d11e      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800783c:	4b33      	ldr	r3, [pc, #204]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d107      	bne.n	8007858 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007848:	4b30      	ldr	r3, [pc, #192]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 800784a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800784e:	0a1b      	lsrs	r3, r3, #8
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e005      	b.n	8007864 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007858:	4b2c      	ldr	r3, [pc, #176]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	091b      	lsrs	r3, r3, #4
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007864:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <HAL_RCC_GetSysClockFreq+0x108>)
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800786c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10d      	bne.n	8007890 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007878:	e00a      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b04      	cmp	r3, #4
 800787e:	d102      	bne.n	8007886 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007880:	4b24      	ldr	r3, [pc, #144]	; (8007914 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007882:	61bb      	str	r3, [r7, #24]
 8007884:	e004      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b08      	cmp	r3, #8
 800788a:	d101      	bne.n	8007890 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800788c:	4b22      	ldr	r3, [pc, #136]	; (8007918 <HAL_RCC_GetSysClockFreq+0x110>)
 800788e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b0c      	cmp	r3, #12
 8007894:	d133      	bne.n	80078fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007896:	4b1d      	ldr	r3, [pc, #116]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d002      	beq.n	80078ac <HAL_RCC_GetSysClockFreq+0xa4>
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d003      	beq.n	80078b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80078aa:	e005      	b.n	80078b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078ac:	4b19      	ldr	r3, [pc, #100]	; (8007914 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078ae:	617b      	str	r3, [r7, #20]
      break;
 80078b0:	e005      	b.n	80078be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078b2:	4b19      	ldr	r3, [pc, #100]	; (8007918 <HAL_RCC_GetSysClockFreq+0x110>)
 80078b4:	617b      	str	r3, [r7, #20]
      break;
 80078b6:	e002      	b.n	80078be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	617b      	str	r3, [r7, #20]
      break;
 80078bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	091b      	lsrs	r3, r3, #4
 80078c4:	f003 0307 	and.w	r3, r3, #7
 80078c8:	3301      	adds	r3, #1
 80078ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078cc:	4b0f      	ldr	r3, [pc, #60]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	0a1b      	lsrs	r3, r3, #8
 80078d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	fb02 f203 	mul.w	r2, r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078e4:	4b09      	ldr	r3, [pc, #36]	; (800790c <HAL_RCC_GetSysClockFreq+0x104>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	0e5b      	lsrs	r3, r3, #25
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	3301      	adds	r3, #1
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80078fe:	69bb      	ldr	r3, [r7, #24]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3724      	adds	r7, #36	; 0x24
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	40021000 	.word	0x40021000
 8007910:	0800968c 	.word	0x0800968c
 8007914:	00f42400 	.word	0x00f42400
 8007918:	007a1200 	.word	0x007a1200

0800791c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007920:	4b03      	ldr	r3, [pc, #12]	; (8007930 <HAL_RCC_GetHCLKFreq+0x14>)
 8007922:	681b      	ldr	r3, [r3, #0]
}
 8007924:	4618      	mov	r0, r3
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000038 	.word	0x20000038

08007934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007938:	f7ff fff0 	bl	800791c <HAL_RCC_GetHCLKFreq>
 800793c:	4601      	mov	r1, r0
 800793e:	4b06      	ldr	r3, [pc, #24]	; (8007958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	0a1b      	lsrs	r3, r3, #8
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	4a04      	ldr	r2, [pc, #16]	; (800795c <HAL_RCC_GetPCLK1Freq+0x28>)
 800794a:	5cd3      	ldrb	r3, [r2, r3]
 800794c:	f003 031f 	and.w	r3, r3, #31
 8007950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007954:	4618      	mov	r0, r3
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40021000 	.word	0x40021000
 800795c:	08009684 	.word	0x08009684

08007960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007964:	f7ff ffda 	bl	800791c <HAL_RCC_GetHCLKFreq>
 8007968:	4601      	mov	r1, r0
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0adb      	lsrs	r3, r3, #11
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	4a04      	ldr	r2, [pc, #16]	; (8007988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007976:	5cd3      	ldrb	r3, [r2, r3]
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007980:	4618      	mov	r0, r3
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40021000 	.word	0x40021000
 8007988:	08009684 	.word	0x08009684

0800798c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007998:	4b2a      	ldr	r3, [pc, #168]	; (8007a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80079a4:	f7fe fd24 	bl	80063f0 <HAL_PWREx_GetVoltageRange>
 80079a8:	6178      	str	r0, [r7, #20]
 80079aa:	e014      	b.n	80079d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079ac:	4b25      	ldr	r3, [pc, #148]	; (8007a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b0:	4a24      	ldr	r2, [pc, #144]	; (8007a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b6:	6593      	str	r3, [r2, #88]	; 0x58
 80079b8:	4b22      	ldr	r3, [pc, #136]	; (8007a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079c4:	f7fe fd14 	bl	80063f0 <HAL_PWREx_GetVoltageRange>
 80079c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079ca:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ce:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079dc:	d10b      	bne.n	80079f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b80      	cmp	r3, #128	; 0x80
 80079e2:	d919      	bls.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2ba0      	cmp	r3, #160	; 0xa0
 80079e8:	d902      	bls.n	80079f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80079ea:	2302      	movs	r3, #2
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	e013      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80079f0:	2301      	movs	r3, #1
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	e010      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b80      	cmp	r3, #128	; 0x80
 80079fa:	d902      	bls.n	8007a02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80079fc:	2303      	movs	r3, #3
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	e00a      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b80      	cmp	r3, #128	; 0x80
 8007a06:	d102      	bne.n	8007a0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a08:	2302      	movs	r3, #2
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	e004      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b70      	cmp	r3, #112	; 0x70
 8007a12:	d101      	bne.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a14:	2301      	movs	r3, #1
 8007a16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a18:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f023 0207 	bic.w	r2, r3, #7
 8007a20:	4909      	ldr	r1, [pc, #36]	; (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a28:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d001      	beq.n	8007a3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40021000 	.word	0x40021000
 8007a48:	40022000 	.word	0x40022000

08007a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a54:	2300      	movs	r3, #0
 8007a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a58:	2300      	movs	r3, #0
 8007a5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d03f      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a70:	d01c      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a76:	d802      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00e      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007a7c:	e01f      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a82:	d003      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007a84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a88:	d01c      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007a8a:	e018      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a8c:	4b85      	ldr	r3, [pc, #532]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a84      	ldr	r2, [pc, #528]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a98:	e015      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fab9 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007aaa:	e00c      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3320      	adds	r3, #32
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fba0 	bl	80081f8 <RCCEx_PLLSAI2_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007abc:	e003      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	74fb      	strb	r3, [r7, #19]
      break;
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ac6:	7cfb      	ldrb	r3, [r7, #19]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007acc:	4b75      	ldr	r3, [pc, #468]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ada:	4972      	ldr	r1, [pc, #456]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007ae2:	e001      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae4:	7cfb      	ldrb	r3, [r7, #19]
 8007ae6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d03f      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007afc:	d01c      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007afe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b02:	d802      	bhi.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8007b08:	e01f      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b0e:	d003      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007b10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b14:	d01c      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8007b16:	e018      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007b18:	4b62      	ldr	r3, [pc, #392]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	4a61      	ldr	r2, [pc, #388]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b22:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b24:	e015      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fa73 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b36:	e00c      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3320      	adds	r3, #32
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fb5a 	bl	80081f8 <RCCEx_PLLSAI2_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b48:	e003      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	74fb      	strb	r3, [r7, #19]
      break;
 8007b4e:	e000      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b52:	7cfb      	ldrb	r3, [r7, #19]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10b      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b58:	4b52      	ldr	r3, [pc, #328]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b66:	494f      	ldr	r1, [pc, #316]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b6e:	e001      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b70:	7cfb      	ldrb	r3, [r7, #19]
 8007b72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80a0 	beq.w	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b82:	2300      	movs	r3, #0
 8007b84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b86:	4b47      	ldr	r3, [pc, #284]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007b96:	2300      	movs	r3, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00d      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b9c:	4b41      	ldr	r3, [pc, #260]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba0:	4a40      	ldr	r2, [pc, #256]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ba8:	4b3e      	ldr	r3, [pc, #248]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb0:	60bb      	str	r3, [r7, #8]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bb8:	4b3b      	ldr	r3, [pc, #236]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a3a      	ldr	r2, [pc, #232]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bc4:	f7fa fe26 	bl	8002814 <HAL_GetTick>
 8007bc8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bca:	e009      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bcc:	f7fa fe22 	bl	8002814 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d902      	bls.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	74fb      	strb	r3, [r7, #19]
        break;
 8007bde:	e005      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007be0:	4b31      	ldr	r3, [pc, #196]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0ef      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8007bec:	7cfb      	ldrb	r3, [r7, #19]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d15c      	bne.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bf2:	4b2c      	ldr	r3, [pc, #176]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01f      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d019      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c10:	4b24      	ldr	r3, [pc, #144]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c1c:	4b21      	ldr	r3, [pc, #132]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c22:	4a20      	ldr	r2, [pc, #128]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c2c:	4b1d      	ldr	r3, [pc, #116]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c32:	4a1c      	ldr	r2, [pc, #112]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c3c:	4a19      	ldr	r2, [pc, #100]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d016      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c4e:	f7fa fde1 	bl	8002814 <HAL_GetTick>
 8007c52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c54:	e00b      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c56:	f7fa fddd 	bl	8002814 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d902      	bls.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	74fb      	strb	r3, [r7, #19]
            break;
 8007c6c:	e006      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0ec      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007c7c:	7cfb      	ldrb	r3, [r7, #19]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10c      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c92:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c9a:	e009      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c9c:	7cfb      	ldrb	r3, [r7, #19]
 8007c9e:	74bb      	strb	r3, [r7, #18]
 8007ca0:	e006      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8007ca2:	bf00      	nop
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cac:	7cfb      	ldrb	r3, [r7, #19]
 8007cae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cb0:	7c7b      	ldrb	r3, [r7, #17]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d105      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cb6:	4b9e      	ldr	r3, [pc, #632]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cba:	4a9d      	ldr	r2, [pc, #628]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cce:	4b98      	ldr	r3, [pc, #608]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd4:	f023 0203 	bic.w	r2, r3, #3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	4994      	ldr	r1, [pc, #592]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cf0:	4b8f      	ldr	r3, [pc, #572]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf6:	f023 020c 	bic.w	r2, r3, #12
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	498c      	ldr	r1, [pc, #560]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d12:	4b87      	ldr	r3, [pc, #540]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	4983      	ldr	r1, [pc, #524]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d34:	4b7e      	ldr	r3, [pc, #504]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d42:	497b      	ldr	r1, [pc, #492]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d56:	4b76      	ldr	r3, [pc, #472]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d64:	4972      	ldr	r1, [pc, #456]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d78:	4b6d      	ldr	r3, [pc, #436]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d86:	496a      	ldr	r1, [pc, #424]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d9a:	4b65      	ldr	r3, [pc, #404]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da8:	4961      	ldr	r1, [pc, #388]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dbc:	4b5c      	ldr	r3, [pc, #368]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dca:	4959      	ldr	r1, [pc, #356]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dde:	4b54      	ldr	r3, [pc, #336]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dec:	4950      	ldr	r1, [pc, #320]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e00:	4b4b      	ldr	r3, [pc, #300]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0e:	4948      	ldr	r1, [pc, #288]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e22:	4b43      	ldr	r3, [pc, #268]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e30:	493f      	ldr	r1, [pc, #252]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d028      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e44:	4b3a      	ldr	r3, [pc, #232]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e52:	4937      	ldr	r1, [pc, #220]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e62:	d106      	bne.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e64:	4b32      	ldr	r3, [pc, #200]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4a31      	ldr	r2, [pc, #196]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e6e:	60d3      	str	r3, [r2, #12]
 8007e70:	e011      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e7a:	d10c      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	2101      	movs	r1, #1
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 f8c8 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007e8c:	7cfb      	ldrb	r3, [r7, #19]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8007e92:	7cfb      	ldrb	r3, [r7, #19]
 8007e94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d028      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ea2:	4b23      	ldr	r3, [pc, #140]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb0:	491f      	ldr	r1, [pc, #124]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec0:	d106      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ec2:	4b1b      	ldr	r3, [pc, #108]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	4a1a      	ldr	r2, [pc, #104]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ecc:	60d3      	str	r3, [r2, #12]
 8007ece:	e011      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ed8:	d10c      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3304      	adds	r3, #4
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 f899 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007eea:	7cfb      	ldrb	r3, [r7, #19]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8007ef0:	7cfb      	ldrb	r3, [r7, #19]
 8007ef2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d02b      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0e:	4908      	ldr	r1, [pc, #32]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f1e:	d109      	bne.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f20:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	4a02      	ldr	r2, [pc, #8]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f2a:	60d3      	str	r3, [r2, #12]
 8007f2c:	e014      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007f2e:	bf00      	nop
 8007f30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f3c:	d10c      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3304      	adds	r3, #4
 8007f42:	2101      	movs	r1, #1
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 f867 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f4e:	7cfb      	ldrb	r3, [r7, #19]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8007f54:	7cfb      	ldrb	r3, [r7, #19]
 8007f56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d02f      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f64:	4b2b      	ldr	r3, [pc, #172]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f72:	4928      	ldr	r1, [pc, #160]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f82:	d10d      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3304      	adds	r3, #4
 8007f88:	2102      	movs	r1, #2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f844 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007f90:	4603      	mov	r3, r0
 8007f92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f94:	7cfb      	ldrb	r3, [r7, #19]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d014      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007f9a:	7cfb      	ldrb	r3, [r7, #19]
 8007f9c:	74bb      	strb	r3, [r7, #18]
 8007f9e:	e011      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa8:	d10c      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3320      	adds	r3, #32
 8007fae:	2102      	movs	r1, #2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f921 	bl	80081f8 <RCCEx_PLLSAI2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fba:	7cfb      	ldrb	r3, [r7, #19]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007fc0:	7cfb      	ldrb	r3, [r7, #19]
 8007fc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00a      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fd0:	4b10      	ldr	r3, [pc, #64]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fde:	490d      	ldr	r1, [pc, #52]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ff2:	4b08      	ldr	r3, [pc, #32]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008002:	4904      	ldr	r1, [pc, #16]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008004:	4313      	orrs	r3, r2
 8008006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800800a:	7cbb      	ldrb	r3, [r7, #18]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40021000 	.word	0x40021000

08008018 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008026:	4b73      	ldr	r3, [pc, #460]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d018      	beq.n	8008064 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008032:	4b70      	ldr	r3, [pc, #448]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f003 0203 	and.w	r2, r3, #3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	429a      	cmp	r2, r3
 8008040:	d10d      	bne.n	800805e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
       ||
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800804a:	4b6a      	ldr	r3, [pc, #424]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	091b      	lsrs	r3, r3, #4
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
       ||
 800805a:	429a      	cmp	r2, r3
 800805c:	d044      	beq.n	80080e8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	73fb      	strb	r3, [r7, #15]
 8008062:	e041      	b.n	80080e8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d00c      	beq.n	8008086 <RCCEx_PLLSAI1_Config+0x6e>
 800806c:	2b03      	cmp	r3, #3
 800806e:	d013      	beq.n	8008098 <RCCEx_PLLSAI1_Config+0x80>
 8008070:	2b01      	cmp	r3, #1
 8008072:	d120      	bne.n	80080b6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008074:	4b5f      	ldr	r3, [pc, #380]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d11d      	bne.n	80080bc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008084:	e01a      	b.n	80080bc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008086:	4b5b      	ldr	r3, [pc, #364]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800808e:	2b00      	cmp	r3, #0
 8008090:	d116      	bne.n	80080c0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008096:	e013      	b.n	80080c0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008098:	4b56      	ldr	r3, [pc, #344]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10f      	bne.n	80080c4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80080a4:	4b53      	ldr	r3, [pc, #332]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080b4:	e006      	b.n	80080c4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ba:	e004      	b.n	80080c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80080bc:	bf00      	nop
 80080be:	e002      	b.n	80080c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80080c0:	bf00      	nop
 80080c2:	e000      	b.n	80080c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80080c4:	bf00      	nop
    }

    if(status == HAL_OK)
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10d      	bne.n	80080e8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80080cc:	4b49      	ldr	r3, [pc, #292]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6819      	ldr	r1, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	3b01      	subs	r3, #1
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	430b      	orrs	r3, r1
 80080e2:	4944      	ldr	r1, [pc, #272]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d17d      	bne.n	80081ea <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80080ee:	4b41      	ldr	r3, [pc, #260]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a40      	ldr	r2, [pc, #256]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080fa:	f7fa fb8b 	bl	8002814 <HAL_GetTick>
 80080fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008100:	e009      	b.n	8008116 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008102:	f7fa fb87 	bl	8002814 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d902      	bls.n	8008116 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	73fb      	strb	r3, [r7, #15]
        break;
 8008114:	e005      	b.n	8008122 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008116:	4b37      	ldr	r3, [pc, #220]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1ef      	bne.n	8008102 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008122:	7bfb      	ldrb	r3, [r7, #15]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d160      	bne.n	80081ea <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d111      	bne.n	8008152 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800812e:	4b31      	ldr	r3, [pc, #196]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6892      	ldr	r2, [r2, #8]
 800813e:	0211      	lsls	r1, r2, #8
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	68d2      	ldr	r2, [r2, #12]
 8008144:	0912      	lsrs	r2, r2, #4
 8008146:	0452      	lsls	r2, r2, #17
 8008148:	430a      	orrs	r2, r1
 800814a:	492a      	ldr	r1, [pc, #168]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800814c:	4313      	orrs	r3, r2
 800814e:	610b      	str	r3, [r1, #16]
 8008150:	e027      	b.n	80081a2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d112      	bne.n	800817e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008158:	4b26      	ldr	r3, [pc, #152]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008160:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6892      	ldr	r2, [r2, #8]
 8008168:	0211      	lsls	r1, r2, #8
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6912      	ldr	r2, [r2, #16]
 800816e:	0852      	lsrs	r2, r2, #1
 8008170:	3a01      	subs	r2, #1
 8008172:	0552      	lsls	r2, r2, #21
 8008174:	430a      	orrs	r2, r1
 8008176:	491f      	ldr	r1, [pc, #124]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008178:	4313      	orrs	r3, r2
 800817a:	610b      	str	r3, [r1, #16]
 800817c:	e011      	b.n	80081a2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800817e:	4b1d      	ldr	r3, [pc, #116]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	6892      	ldr	r2, [r2, #8]
 800818e:	0211      	lsls	r1, r2, #8
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6952      	ldr	r2, [r2, #20]
 8008194:	0852      	lsrs	r2, r2, #1
 8008196:	3a01      	subs	r2, #1
 8008198:	0652      	lsls	r2, r2, #25
 800819a:	430a      	orrs	r2, r1
 800819c:	4915      	ldr	r1, [pc, #84]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80081a2:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a13      	ldr	r2, [pc, #76]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ae:	f7fa fb31 	bl	8002814 <HAL_GetTick>
 80081b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081b4:	e009      	b.n	80081ca <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081b6:	f7fa fb2d 	bl	8002814 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d902      	bls.n	80081ca <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	73fb      	strb	r3, [r7, #15]
          break;
 80081c8:	e005      	b.n	80081d6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0ef      	beq.n	80081b6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d106      	bne.n	80081ea <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80081dc:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081de:	691a      	ldr	r2, [r3, #16]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	4903      	ldr	r1, [pc, #12]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	40021000 	.word	0x40021000

080081f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008206:	4b68      	ldr	r3, [pc, #416]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d018      	beq.n	8008244 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008212:	4b65      	ldr	r3, [pc, #404]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f003 0203 	and.w	r2, r3, #3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d10d      	bne.n	800823e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
       ||
 8008226:	2b00      	cmp	r3, #0
 8008228:	d009      	beq.n	800823e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800822a:	4b5f      	ldr	r3, [pc, #380]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	091b      	lsrs	r3, r3, #4
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
       ||
 800823a:	429a      	cmp	r2, r3
 800823c:	d044      	beq.n	80082c8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
 8008242:	e041      	b.n	80082c8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d00c      	beq.n	8008266 <RCCEx_PLLSAI2_Config+0x6e>
 800824c:	2b03      	cmp	r3, #3
 800824e:	d013      	beq.n	8008278 <RCCEx_PLLSAI2_Config+0x80>
 8008250:	2b01      	cmp	r3, #1
 8008252:	d120      	bne.n	8008296 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008254:	4b54      	ldr	r3, [pc, #336]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11d      	bne.n	800829c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008264:	e01a      	b.n	800829c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008266:	4b50      	ldr	r3, [pc, #320]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800826e:	2b00      	cmp	r3, #0
 8008270:	d116      	bne.n	80082a0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008276:	e013      	b.n	80082a0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008278:	4b4b      	ldr	r3, [pc, #300]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10f      	bne.n	80082a4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008284:	4b48      	ldr	r3, [pc, #288]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008294:	e006      	b.n	80082a4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	73fb      	strb	r3, [r7, #15]
      break;
 800829a:	e004      	b.n	80082a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800829c:	bf00      	nop
 800829e:	e002      	b.n	80082a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80082a0:	bf00      	nop
 80082a2:	e000      	b.n	80082a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80082a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10d      	bne.n	80082c8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80082ac:	4b3e      	ldr	r3, [pc, #248]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6819      	ldr	r1, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	3b01      	subs	r3, #1
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	430b      	orrs	r3, r1
 80082c2:	4939      	ldr	r1, [pc, #228]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d167      	bne.n	800839e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80082ce:	4b36      	ldr	r3, [pc, #216]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a35      	ldr	r2, [pc, #212]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082da:	f7fa fa9b 	bl	8002814 <HAL_GetTick>
 80082de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082e0:	e009      	b.n	80082f6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082e2:	f7fa fa97 	bl	8002814 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d902      	bls.n	80082f6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	73fb      	strb	r3, [r7, #15]
        break;
 80082f4:	e005      	b.n	8008302 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082f6:	4b2c      	ldr	r3, [pc, #176]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1ef      	bne.n	80082e2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d14a      	bne.n	800839e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d111      	bne.n	8008332 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800830e:	4b26      	ldr	r3, [pc, #152]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6892      	ldr	r2, [r2, #8]
 800831e:	0211      	lsls	r1, r2, #8
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	68d2      	ldr	r2, [r2, #12]
 8008324:	0912      	lsrs	r2, r2, #4
 8008326:	0452      	lsls	r2, r2, #17
 8008328:	430a      	orrs	r2, r1
 800832a:	491f      	ldr	r1, [pc, #124]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800832c:	4313      	orrs	r3, r2
 800832e:	614b      	str	r3, [r1, #20]
 8008330:	e011      	b.n	8008356 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008332:	4b1d      	ldr	r3, [pc, #116]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800833a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6892      	ldr	r2, [r2, #8]
 8008342:	0211      	lsls	r1, r2, #8
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6912      	ldr	r2, [r2, #16]
 8008348:	0852      	lsrs	r2, r2, #1
 800834a:	3a01      	subs	r2, #1
 800834c:	0652      	lsls	r2, r2, #25
 800834e:	430a      	orrs	r2, r1
 8008350:	4915      	ldr	r1, [pc, #84]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008352:	4313      	orrs	r3, r2
 8008354:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008356:	4b14      	ldr	r3, [pc, #80]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a13      	ldr	r2, [pc, #76]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800835c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008360:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008362:	f7fa fa57 	bl	8002814 <HAL_GetTick>
 8008366:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008368:	e009      	b.n	800837e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800836a:	f7fa fa53 	bl	8002814 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d902      	bls.n	800837e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	73fb      	strb	r3, [r7, #15]
          break;
 800837c:	e005      	b.n	800838a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800837e:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0ef      	beq.n	800836a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008392:	695a      	ldr	r2, [r3, #20]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	4903      	ldr	r1, [pc, #12]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800839a:	4313      	orrs	r3, r2
 800839c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	40021000 	.word	0x40021000

080083ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e049      	b.n	8008452 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7fa f89a 	bl	800250c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f000 fab0 	bl	8008950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b01      	cmp	r3, #1
 800846e:	d001      	beq.n	8008474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e04f      	b.n	8008514 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a23      	ldr	r2, [pc, #140]	; (8008520 <HAL_TIM_Base_Start_IT+0xc4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d01d      	beq.n	80084d2 <HAL_TIM_Base_Start_IT+0x76>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800849e:	d018      	beq.n	80084d2 <HAL_TIM_Base_Start_IT+0x76>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a1f      	ldr	r2, [pc, #124]	; (8008524 <HAL_TIM_Base_Start_IT+0xc8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d013      	beq.n	80084d2 <HAL_TIM_Base_Start_IT+0x76>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1e      	ldr	r2, [pc, #120]	; (8008528 <HAL_TIM_Base_Start_IT+0xcc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00e      	beq.n	80084d2 <HAL_TIM_Base_Start_IT+0x76>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1c      	ldr	r2, [pc, #112]	; (800852c <HAL_TIM_Base_Start_IT+0xd0>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d009      	beq.n	80084d2 <HAL_TIM_Base_Start_IT+0x76>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1b      	ldr	r2, [pc, #108]	; (8008530 <HAL_TIM_Base_Start_IT+0xd4>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d004      	beq.n	80084d2 <HAL_TIM_Base_Start_IT+0x76>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a19      	ldr	r2, [pc, #100]	; (8008534 <HAL_TIM_Base_Start_IT+0xd8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d115      	bne.n	80084fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	4b17      	ldr	r3, [pc, #92]	; (8008538 <HAL_TIM_Base_Start_IT+0xdc>)
 80084da:	4013      	ands	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b06      	cmp	r3, #6
 80084e2:	d015      	beq.n	8008510 <HAL_TIM_Base_Start_IT+0xb4>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ea:	d011      	beq.n	8008510 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0201 	orr.w	r2, r2, #1
 80084fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084fc:	e008      	b.n	8008510 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f042 0201 	orr.w	r2, r2, #1
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	e000      	b.n	8008512 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008510:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	40012c00 	.word	0x40012c00
 8008524:	40000400 	.word	0x40000400
 8008528:	40000800 	.word	0x40000800
 800852c:	40000c00 	.word	0x40000c00
 8008530:	40013400 	.word	0x40013400
 8008534:	40014000 	.word	0x40014000
 8008538:	00010007 	.word	0x00010007

0800853c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b02      	cmp	r3, #2
 8008550:	d122      	bne.n	8008598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b02      	cmp	r3, #2
 800855e:	d11b      	bne.n	8008598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f06f 0202 	mvn.w	r2, #2
 8008568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f9c8 	bl	8008914 <HAL_TIM_IC_CaptureCallback>
 8008584:	e005      	b.n	8008592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f9ba 	bl	8008900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f9cb 	bl	8008928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d122      	bne.n	80085ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d11b      	bne.n	80085ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f06f 0204 	mvn.w	r2, #4
 80085bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2202      	movs	r2, #2
 80085c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f99e 	bl	8008914 <HAL_TIM_IC_CaptureCallback>
 80085d8:	e005      	b.n	80085e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f990 	bl	8008900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f9a1 	bl	8008928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d122      	bne.n	8008640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b08      	cmp	r3, #8
 8008606:	d11b      	bne.n	8008640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0208 	mvn.w	r2, #8
 8008610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2204      	movs	r2, #4
 8008616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f003 0303 	and.w	r3, r3, #3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f974 	bl	8008914 <HAL_TIM_IC_CaptureCallback>
 800862c:	e005      	b.n	800863a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f966 	bl	8008900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f977 	bl	8008928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	2b10      	cmp	r3, #16
 800864c:	d122      	bne.n	8008694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	2b10      	cmp	r3, #16
 800865a:	d11b      	bne.n	8008694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f06f 0210 	mvn.w	r2, #16
 8008664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2208      	movs	r2, #8
 800866a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f94a 	bl	8008914 <HAL_TIM_IC_CaptureCallback>
 8008680:	e005      	b.n	800868e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f93c 	bl	8008900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f94d 	bl	8008928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d10e      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d107      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0201 	mvn.w	r2, #1
 80086b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f916 	bl	80088ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d10e      	bne.n	80086ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d8:	2b80      	cmp	r3, #128	; 0x80
 80086da:	d107      	bne.n	80086ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 faf8 	bl	8008cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fa:	d10e      	bne.n	800871a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008706:	2b80      	cmp	r3, #128	; 0x80
 8008708:	d107      	bne.n	800871a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 faeb 	bl	8008cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008724:	2b40      	cmp	r3, #64	; 0x40
 8008726:	d10e      	bne.n	8008746 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b40      	cmp	r3, #64	; 0x40
 8008734:	d107      	bne.n	8008746 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800873e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f8fb 	bl	800893c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b20      	cmp	r3, #32
 8008752:	d10e      	bne.n	8008772 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b20      	cmp	r3, #32
 8008760:	d107      	bne.n	8008772 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f06f 0220 	mvn.w	r2, #32
 800876a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 faab 	bl	8008cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_TIM_ConfigClockSource+0x18>
 800878e:	2302      	movs	r3, #2
 8008790:	e0a8      	b.n	80088e4 <HAL_TIM_ConfigClockSource+0x16a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2202      	movs	r2, #2
 800879e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087bc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b40      	cmp	r3, #64	; 0x40
 80087cc:	d067      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x124>
 80087ce:	2b40      	cmp	r3, #64	; 0x40
 80087d0:	d80b      	bhi.n	80087ea <HAL_TIM_ConfigClockSource+0x70>
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	d073      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x144>
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d802      	bhi.n	80087e0 <HAL_TIM_ConfigClockSource+0x66>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d06f      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80087de:	e078      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d06c      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x144>
 80087e4:	2b30      	cmp	r3, #48	; 0x30
 80087e6:	d06a      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x144>
      break;
 80087e8:	e073      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80087ea:	2b70      	cmp	r3, #112	; 0x70
 80087ec:	d00d      	beq.n	800880a <HAL_TIM_ConfigClockSource+0x90>
 80087ee:	2b70      	cmp	r3, #112	; 0x70
 80087f0:	d804      	bhi.n	80087fc <HAL_TIM_ConfigClockSource+0x82>
 80087f2:	2b50      	cmp	r3, #80	; 0x50
 80087f4:	d033      	beq.n	800885e <HAL_TIM_ConfigClockSource+0xe4>
 80087f6:	2b60      	cmp	r3, #96	; 0x60
 80087f8:	d041      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80087fa:	e06a      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80087fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008800:	d066      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x156>
 8008802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008806:	d017      	beq.n	8008838 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008808:	e063      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	6899      	ldr	r1, [r3, #8]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f000 f9ad 	bl	8008b78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800882c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	609a      	str	r2, [r3, #8]
      break;
 8008836:	e04c      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	6899      	ldr	r1, [r3, #8]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f000 f996 	bl	8008b78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800885a:	609a      	str	r2, [r3, #8]
      break;
 800885c:	e039      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	6859      	ldr	r1, [r3, #4]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	461a      	mov	r2, r3
 800886c:	f000 f90a 	bl	8008a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2150      	movs	r1, #80	; 0x50
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f963 	bl	8008b42 <TIM_ITRx_SetConfig>
      break;
 800887c:	e029      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6859      	ldr	r1, [r3, #4]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	461a      	mov	r2, r3
 800888c:	f000 f929 	bl	8008ae2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2160      	movs	r1, #96	; 0x60
 8008896:	4618      	mov	r0, r3
 8008898:	f000 f953 	bl	8008b42 <TIM_ITRx_SetConfig>
      break;
 800889c:	e019      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	6859      	ldr	r1, [r3, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f000 f8ea 	bl	8008a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2140      	movs	r1, #64	; 0x40
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f943 	bl	8008b42 <TIM_ITRx_SetConfig>
      break;
 80088bc:	e009      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f000 f93a 	bl	8008b42 <TIM_ITRx_SetConfig>
        break;
 80088ce:	e000      	b.n	80088d2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80088d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a40      	ldr	r2, [pc, #256]	; (8008a64 <TIM_Base_SetConfig+0x114>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d013      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896e:	d00f      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a3d      	ldr	r2, [pc, #244]	; (8008a68 <TIM_Base_SetConfig+0x118>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00b      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a3c      	ldr	r2, [pc, #240]	; (8008a6c <TIM_Base_SetConfig+0x11c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d007      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a3b      	ldr	r2, [pc, #236]	; (8008a70 <TIM_Base_SetConfig+0x120>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d003      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a3a      	ldr	r2, [pc, #232]	; (8008a74 <TIM_Base_SetConfig+0x124>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d108      	bne.n	80089a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a2f      	ldr	r2, [pc, #188]	; (8008a64 <TIM_Base_SetConfig+0x114>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d01f      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b0:	d01b      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a2c      	ldr	r2, [pc, #176]	; (8008a68 <TIM_Base_SetConfig+0x118>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d017      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a2b      	ldr	r2, [pc, #172]	; (8008a6c <TIM_Base_SetConfig+0x11c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d013      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <TIM_Base_SetConfig+0x120>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00f      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a29      	ldr	r2, [pc, #164]	; (8008a74 <TIM_Base_SetConfig+0x124>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00b      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a28      	ldr	r2, [pc, #160]	; (8008a78 <TIM_Base_SetConfig+0x128>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d007      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a27      	ldr	r2, [pc, #156]	; (8008a7c <TIM_Base_SetConfig+0x12c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d003      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a26      	ldr	r2, [pc, #152]	; (8008a80 <TIM_Base_SetConfig+0x130>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d108      	bne.n	80089fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	689a      	ldr	r2, [r3, #8]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <TIM_Base_SetConfig+0x114>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d00f      	beq.n	8008a48 <TIM_Base_SetConfig+0xf8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a12      	ldr	r2, [pc, #72]	; (8008a74 <TIM_Base_SetConfig+0x124>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00b      	beq.n	8008a48 <TIM_Base_SetConfig+0xf8>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a11      	ldr	r2, [pc, #68]	; (8008a78 <TIM_Base_SetConfig+0x128>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d007      	beq.n	8008a48 <TIM_Base_SetConfig+0xf8>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a10      	ldr	r2, [pc, #64]	; (8008a7c <TIM_Base_SetConfig+0x12c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_Base_SetConfig+0xf8>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a0f      	ldr	r2, [pc, #60]	; (8008a80 <TIM_Base_SetConfig+0x130>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d103      	bne.n	8008a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	691a      	ldr	r2, [r3, #16]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	615a      	str	r2, [r3, #20]
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	40012c00 	.word	0x40012c00
 8008a68:	40000400 	.word	0x40000400
 8008a6c:	40000800 	.word	0x40000800
 8008a70:	40000c00 	.word	0x40000c00
 8008a74:	40013400 	.word	0x40013400
 8008a78:	40014000 	.word	0x40014000
 8008a7c:	40014400 	.word	0x40014400
 8008a80:	40014800 	.word	0x40014800

08008a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	f023 0201 	bic.w	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f023 030a 	bic.w	r3, r3, #10
 8008ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	621a      	str	r2, [r3, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b087      	sub	sp, #28
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	f023 0210 	bic.w	r2, r3, #16
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	031b      	lsls	r3, r3, #12
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	621a      	str	r2, [r3, #32]
}
 8008b36:	bf00      	nop
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b085      	sub	sp, #20
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f043 0307 	orr.w	r3, r3, #7
 8008b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	609a      	str	r2, [r3, #8]
}
 8008b6c:	bf00      	nop
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	021a      	lsls	r2, r3, #8
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	609a      	str	r2, [r3, #8]
}
 8008bac:	bf00      	nop
 8008bae:	371c      	adds	r7, #28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d101      	bne.n	8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bcc:	2302      	movs	r3, #2
 8008bce:	e068      	b.n	8008ca2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a2e      	ldr	r2, [pc, #184]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d004      	beq.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a2d      	ldr	r2, [pc, #180]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d108      	bne.n	8008c16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1e      	ldr	r2, [pc, #120]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d01d      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c42:	d018      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a1b      	ldr	r2, [pc, #108]	; (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a1a      	ldr	r2, [pc, #104]	; (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00e      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a18      	ldr	r2, [pc, #96]	; (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a14      	ldr	r2, [pc, #80]	; (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d10c      	bne.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	40012c00 	.word	0x40012c00
 8008cb4:	40013400 	.word	0x40013400
 8008cb8:	40000400 	.word	0x40000400
 8008cbc:	40000800 	.word	0x40000800
 8008cc0:	40000c00 	.word	0x40000c00
 8008cc4:	40014000 	.word	0x40014000

08008cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e040      	b.n	8008d98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d106      	bne.n	8008d2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7f9 fc14 	bl	8002554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2224      	movs	r2, #36	; 0x24
 8008d30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f022 0201 	bic.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f82c 	bl	8008da0 <UART_SetConfig>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e022      	b.n	8008d98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 faaa 	bl	80092b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fb31 	bl	80093f8 <UART_CheckIdleState>
 8008d96:	4603      	mov	r3, r0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008da0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008da4:	b088      	sub	sp, #32
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4bac      	ldr	r3, [pc, #688]	; (8009080 <UART_SetConfig+0x2e0>)
 8008dce:	4013      	ands	r3, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	69f9      	ldr	r1, [r7, #28]
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4aa2      	ldr	r2, [pc, #648]	; (8009084 <UART_SetConfig+0x2e4>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d004      	beq.n	8008e0a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a99      	ldr	r2, [pc, #612]	; (8009088 <UART_SetConfig+0x2e8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d121      	bne.n	8008e6c <UART_SetConfig+0xcc>
 8008e28:	4b98      	ldr	r3, [pc, #608]	; (800908c <UART_SetConfig+0x2ec>)
 8008e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d816      	bhi.n	8008e64 <UART_SetConfig+0xc4>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <UART_SetConfig+0x9c>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e4d 	.word	0x08008e4d
 8008e40:	08008e59 	.word	0x08008e59
 8008e44:	08008e53 	.word	0x08008e53
 8008e48:	08008e5f 	.word	0x08008e5f
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	76fb      	strb	r3, [r7, #27]
 8008e50:	e0e8      	b.n	8009024 <UART_SetConfig+0x284>
 8008e52:	2302      	movs	r3, #2
 8008e54:	76fb      	strb	r3, [r7, #27]
 8008e56:	e0e5      	b.n	8009024 <UART_SetConfig+0x284>
 8008e58:	2304      	movs	r3, #4
 8008e5a:	76fb      	strb	r3, [r7, #27]
 8008e5c:	e0e2      	b.n	8009024 <UART_SetConfig+0x284>
 8008e5e:	2308      	movs	r3, #8
 8008e60:	76fb      	strb	r3, [r7, #27]
 8008e62:	e0df      	b.n	8009024 <UART_SetConfig+0x284>
 8008e64:	2310      	movs	r3, #16
 8008e66:	76fb      	strb	r3, [r7, #27]
 8008e68:	bf00      	nop
 8008e6a:	e0db      	b.n	8009024 <UART_SetConfig+0x284>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a87      	ldr	r2, [pc, #540]	; (8009090 <UART_SetConfig+0x2f0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d134      	bne.n	8008ee0 <UART_SetConfig+0x140>
 8008e76:	4b85      	ldr	r3, [pc, #532]	; (800908c <UART_SetConfig+0x2ec>)
 8008e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e7c:	f003 030c 	and.w	r3, r3, #12
 8008e80:	2b0c      	cmp	r3, #12
 8008e82:	d829      	bhi.n	8008ed8 <UART_SetConfig+0x138>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <UART_SetConfig+0xec>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008ec1 	.word	0x08008ec1
 8008e90:	08008ed9 	.word	0x08008ed9
 8008e94:	08008ed9 	.word	0x08008ed9
 8008e98:	08008ed9 	.word	0x08008ed9
 8008e9c:	08008ecd 	.word	0x08008ecd
 8008ea0:	08008ed9 	.word	0x08008ed9
 8008ea4:	08008ed9 	.word	0x08008ed9
 8008ea8:	08008ed9 	.word	0x08008ed9
 8008eac:	08008ec7 	.word	0x08008ec7
 8008eb0:	08008ed9 	.word	0x08008ed9
 8008eb4:	08008ed9 	.word	0x08008ed9
 8008eb8:	08008ed9 	.word	0x08008ed9
 8008ebc:	08008ed3 	.word	0x08008ed3
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	76fb      	strb	r3, [r7, #27]
 8008ec4:	e0ae      	b.n	8009024 <UART_SetConfig+0x284>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	76fb      	strb	r3, [r7, #27]
 8008eca:	e0ab      	b.n	8009024 <UART_SetConfig+0x284>
 8008ecc:	2304      	movs	r3, #4
 8008ece:	76fb      	strb	r3, [r7, #27]
 8008ed0:	e0a8      	b.n	8009024 <UART_SetConfig+0x284>
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	76fb      	strb	r3, [r7, #27]
 8008ed6:	e0a5      	b.n	8009024 <UART_SetConfig+0x284>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	76fb      	strb	r3, [r7, #27]
 8008edc:	bf00      	nop
 8008ede:	e0a1      	b.n	8009024 <UART_SetConfig+0x284>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a6b      	ldr	r2, [pc, #428]	; (8009094 <UART_SetConfig+0x2f4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d120      	bne.n	8008f2c <UART_SetConfig+0x18c>
 8008eea:	4b68      	ldr	r3, [pc, #416]	; (800908c <UART_SetConfig+0x2ec>)
 8008eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d00f      	beq.n	8008f18 <UART_SetConfig+0x178>
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d802      	bhi.n	8008f02 <UART_SetConfig+0x162>
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <UART_SetConfig+0x16c>
 8008f00:	e010      	b.n	8008f24 <UART_SetConfig+0x184>
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	d005      	beq.n	8008f12 <UART_SetConfig+0x172>
 8008f06:	2b30      	cmp	r3, #48	; 0x30
 8008f08:	d009      	beq.n	8008f1e <UART_SetConfig+0x17e>
 8008f0a:	e00b      	b.n	8008f24 <UART_SetConfig+0x184>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	76fb      	strb	r3, [r7, #27]
 8008f10:	e088      	b.n	8009024 <UART_SetConfig+0x284>
 8008f12:	2302      	movs	r3, #2
 8008f14:	76fb      	strb	r3, [r7, #27]
 8008f16:	e085      	b.n	8009024 <UART_SetConfig+0x284>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	76fb      	strb	r3, [r7, #27]
 8008f1c:	e082      	b.n	8009024 <UART_SetConfig+0x284>
 8008f1e:	2308      	movs	r3, #8
 8008f20:	76fb      	strb	r3, [r7, #27]
 8008f22:	e07f      	b.n	8009024 <UART_SetConfig+0x284>
 8008f24:	2310      	movs	r3, #16
 8008f26:	76fb      	strb	r3, [r7, #27]
 8008f28:	bf00      	nop
 8008f2a:	e07b      	b.n	8009024 <UART_SetConfig+0x284>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a59      	ldr	r2, [pc, #356]	; (8009098 <UART_SetConfig+0x2f8>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d120      	bne.n	8008f78 <UART_SetConfig+0x1d8>
 8008f36:	4b55      	ldr	r3, [pc, #340]	; (800908c <UART_SetConfig+0x2ec>)
 8008f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008f40:	2b40      	cmp	r3, #64	; 0x40
 8008f42:	d00f      	beq.n	8008f64 <UART_SetConfig+0x1c4>
 8008f44:	2b40      	cmp	r3, #64	; 0x40
 8008f46:	d802      	bhi.n	8008f4e <UART_SetConfig+0x1ae>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <UART_SetConfig+0x1b8>
 8008f4c:	e010      	b.n	8008f70 <UART_SetConfig+0x1d0>
 8008f4e:	2b80      	cmp	r3, #128	; 0x80
 8008f50:	d005      	beq.n	8008f5e <UART_SetConfig+0x1be>
 8008f52:	2bc0      	cmp	r3, #192	; 0xc0
 8008f54:	d009      	beq.n	8008f6a <UART_SetConfig+0x1ca>
 8008f56:	e00b      	b.n	8008f70 <UART_SetConfig+0x1d0>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	76fb      	strb	r3, [r7, #27]
 8008f5c:	e062      	b.n	8009024 <UART_SetConfig+0x284>
 8008f5e:	2302      	movs	r3, #2
 8008f60:	76fb      	strb	r3, [r7, #27]
 8008f62:	e05f      	b.n	8009024 <UART_SetConfig+0x284>
 8008f64:	2304      	movs	r3, #4
 8008f66:	76fb      	strb	r3, [r7, #27]
 8008f68:	e05c      	b.n	8009024 <UART_SetConfig+0x284>
 8008f6a:	2308      	movs	r3, #8
 8008f6c:	76fb      	strb	r3, [r7, #27]
 8008f6e:	e059      	b.n	8009024 <UART_SetConfig+0x284>
 8008f70:	2310      	movs	r3, #16
 8008f72:	76fb      	strb	r3, [r7, #27]
 8008f74:	bf00      	nop
 8008f76:	e055      	b.n	8009024 <UART_SetConfig+0x284>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a47      	ldr	r2, [pc, #284]	; (800909c <UART_SetConfig+0x2fc>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d124      	bne.n	8008fcc <UART_SetConfig+0x22c>
 8008f82:	4b42      	ldr	r3, [pc, #264]	; (800908c <UART_SetConfig+0x2ec>)
 8008f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f90:	d012      	beq.n	8008fb8 <UART_SetConfig+0x218>
 8008f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f96:	d802      	bhi.n	8008f9e <UART_SetConfig+0x1fe>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <UART_SetConfig+0x20c>
 8008f9c:	e012      	b.n	8008fc4 <UART_SetConfig+0x224>
 8008f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa2:	d006      	beq.n	8008fb2 <UART_SetConfig+0x212>
 8008fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fa8:	d009      	beq.n	8008fbe <UART_SetConfig+0x21e>
 8008faa:	e00b      	b.n	8008fc4 <UART_SetConfig+0x224>
 8008fac:	2300      	movs	r3, #0
 8008fae:	76fb      	strb	r3, [r7, #27]
 8008fb0:	e038      	b.n	8009024 <UART_SetConfig+0x284>
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	76fb      	strb	r3, [r7, #27]
 8008fb6:	e035      	b.n	8009024 <UART_SetConfig+0x284>
 8008fb8:	2304      	movs	r3, #4
 8008fba:	76fb      	strb	r3, [r7, #27]
 8008fbc:	e032      	b.n	8009024 <UART_SetConfig+0x284>
 8008fbe:	2308      	movs	r3, #8
 8008fc0:	76fb      	strb	r3, [r7, #27]
 8008fc2:	e02f      	b.n	8009024 <UART_SetConfig+0x284>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	76fb      	strb	r3, [r7, #27]
 8008fc8:	bf00      	nop
 8008fca:	e02b      	b.n	8009024 <UART_SetConfig+0x284>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a2c      	ldr	r2, [pc, #176]	; (8009084 <UART_SetConfig+0x2e4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d124      	bne.n	8009020 <UART_SetConfig+0x280>
 8008fd6:	4b2d      	ldr	r3, [pc, #180]	; (800908c <UART_SetConfig+0x2ec>)
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fe4:	d012      	beq.n	800900c <UART_SetConfig+0x26c>
 8008fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fea:	d802      	bhi.n	8008ff2 <UART_SetConfig+0x252>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d007      	beq.n	8009000 <UART_SetConfig+0x260>
 8008ff0:	e012      	b.n	8009018 <UART_SetConfig+0x278>
 8008ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff6:	d006      	beq.n	8009006 <UART_SetConfig+0x266>
 8008ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ffc:	d009      	beq.n	8009012 <UART_SetConfig+0x272>
 8008ffe:	e00b      	b.n	8009018 <UART_SetConfig+0x278>
 8009000:	2300      	movs	r3, #0
 8009002:	76fb      	strb	r3, [r7, #27]
 8009004:	e00e      	b.n	8009024 <UART_SetConfig+0x284>
 8009006:	2302      	movs	r3, #2
 8009008:	76fb      	strb	r3, [r7, #27]
 800900a:	e00b      	b.n	8009024 <UART_SetConfig+0x284>
 800900c:	2304      	movs	r3, #4
 800900e:	76fb      	strb	r3, [r7, #27]
 8009010:	e008      	b.n	8009024 <UART_SetConfig+0x284>
 8009012:	2308      	movs	r3, #8
 8009014:	76fb      	strb	r3, [r7, #27]
 8009016:	e005      	b.n	8009024 <UART_SetConfig+0x284>
 8009018:	2310      	movs	r3, #16
 800901a:	76fb      	strb	r3, [r7, #27]
 800901c:	bf00      	nop
 800901e:	e001      	b.n	8009024 <UART_SetConfig+0x284>
 8009020:	2310      	movs	r3, #16
 8009022:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a16      	ldr	r2, [pc, #88]	; (8009084 <UART_SetConfig+0x2e4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	f040 8087 	bne.w	800913e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009030:	7efb      	ldrb	r3, [r7, #27]
 8009032:	2b08      	cmp	r3, #8
 8009034:	d836      	bhi.n	80090a4 <UART_SetConfig+0x304>
 8009036:	a201      	add	r2, pc, #4	; (adr r2, 800903c <UART_SetConfig+0x29c>)
 8009038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903c:	08009061 	.word	0x08009061
 8009040:	080090a5 	.word	0x080090a5
 8009044:	08009069 	.word	0x08009069
 8009048:	080090a5 	.word	0x080090a5
 800904c:	0800906f 	.word	0x0800906f
 8009050:	080090a5 	.word	0x080090a5
 8009054:	080090a5 	.word	0x080090a5
 8009058:	080090a5 	.word	0x080090a5
 800905c:	08009077 	.word	0x08009077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009060:	f7fe fc68 	bl	8007934 <HAL_RCC_GetPCLK1Freq>
 8009064:	6178      	str	r0, [r7, #20]
        break;
 8009066:	e022      	b.n	80090ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009068:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <UART_SetConfig+0x300>)
 800906a:	617b      	str	r3, [r7, #20]
        break;
 800906c:	e01f      	b.n	80090ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800906e:	f7fe fbcb 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009072:	6178      	str	r0, [r7, #20]
        break;
 8009074:	e01b      	b.n	80090ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800907a:	617b      	str	r3, [r7, #20]
        break;
 800907c:	e017      	b.n	80090ae <UART_SetConfig+0x30e>
 800907e:	bf00      	nop
 8009080:	efff69f3 	.word	0xefff69f3
 8009084:	40008000 	.word	0x40008000
 8009088:	40013800 	.word	0x40013800
 800908c:	40021000 	.word	0x40021000
 8009090:	40004400 	.word	0x40004400
 8009094:	40004800 	.word	0x40004800
 8009098:	40004c00 	.word	0x40004c00
 800909c:	40005000 	.word	0x40005000
 80090a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	76bb      	strb	r3, [r7, #26]
        break;
 80090ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80f1 	beq.w	8009298 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	4613      	mov	r3, r2
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	4413      	add	r3, r2
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d305      	bcc.n	80090d2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d902      	bls.n	80090d8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	76bb      	strb	r3, [r7, #26]
 80090d6:	e0df      	b.n	8009298 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	4619      	mov	r1, r3
 80090dc:	f04f 0200 	mov.w	r2, #0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	f04f 0400 	mov.w	r4, #0
 80090e8:	0214      	lsls	r4, r2, #8
 80090ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80090ee:	020b      	lsls	r3, r1, #8
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6852      	ldr	r2, [r2, #4]
 80090f4:	0852      	lsrs	r2, r2, #1
 80090f6:	4611      	mov	r1, r2
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	eb13 0b01 	adds.w	fp, r3, r1
 8009100:	eb44 0c02 	adc.w	ip, r4, r2
 8009104:	4658      	mov	r0, fp
 8009106:	4661      	mov	r1, ip
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f04f 0400 	mov.w	r4, #0
 8009110:	461a      	mov	r2, r3
 8009112:	4623      	mov	r3, r4
 8009114:	f7f7 f858 	bl	80001c8 <__aeabi_uldivmod>
 8009118:	4603      	mov	r3, r0
 800911a:	460c      	mov	r4, r1
 800911c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009124:	d308      	bcc.n	8009138 <UART_SetConfig+0x398>
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800912c:	d204      	bcs.n	8009138 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	e0af      	b.n	8009298 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	76bb      	strb	r3, [r7, #26]
 800913c:	e0ac      	b.n	8009298 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009146:	d15b      	bne.n	8009200 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8009148:	7efb      	ldrb	r3, [r7, #27]
 800914a:	2b08      	cmp	r3, #8
 800914c:	d827      	bhi.n	800919e <UART_SetConfig+0x3fe>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <UART_SetConfig+0x3b4>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	08009179 	.word	0x08009179
 8009158:	08009181 	.word	0x08009181
 800915c:	08009189 	.word	0x08009189
 8009160:	0800919f 	.word	0x0800919f
 8009164:	0800918f 	.word	0x0800918f
 8009168:	0800919f 	.word	0x0800919f
 800916c:	0800919f 	.word	0x0800919f
 8009170:	0800919f 	.word	0x0800919f
 8009174:	08009197 	.word	0x08009197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009178:	f7fe fbdc 	bl	8007934 <HAL_RCC_GetPCLK1Freq>
 800917c:	6178      	str	r0, [r7, #20]
        break;
 800917e:	e013      	b.n	80091a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009180:	f7fe fbee 	bl	8007960 <HAL_RCC_GetPCLK2Freq>
 8009184:	6178      	str	r0, [r7, #20]
        break;
 8009186:	e00f      	b.n	80091a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009188:	4b49      	ldr	r3, [pc, #292]	; (80092b0 <UART_SetConfig+0x510>)
 800918a:	617b      	str	r3, [r7, #20]
        break;
 800918c:	e00c      	b.n	80091a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800918e:	f7fe fb3b 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 8009192:	6178      	str	r0, [r7, #20]
        break;
 8009194:	e008      	b.n	80091a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800919a:	617b      	str	r3, [r7, #20]
        break;
 800919c:	e004      	b.n	80091a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	76bb      	strb	r3, [r7, #26]
        break;
 80091a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d074      	beq.n	8009298 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	005a      	lsls	r2, r3, #1
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	085b      	lsrs	r3, r3, #1
 80091b8:	441a      	add	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b0f      	cmp	r3, #15
 80091ca:	d916      	bls.n	80091fa <UART_SetConfig+0x45a>
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d2:	d212      	bcs.n	80091fa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f023 030f 	bic.w	r3, r3, #15
 80091dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	085b      	lsrs	r3, r3, #1
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	89fb      	ldrh	r3, [r7, #14]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	89fa      	ldrh	r2, [r7, #14]
 80091f6:	60da      	str	r2, [r3, #12]
 80091f8:	e04e      	b.n	8009298 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	76bb      	strb	r3, [r7, #26]
 80091fe:	e04b      	b.n	8009298 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009200:	7efb      	ldrb	r3, [r7, #27]
 8009202:	2b08      	cmp	r3, #8
 8009204:	d827      	bhi.n	8009256 <UART_SetConfig+0x4b6>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <UART_SetConfig+0x46c>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	08009231 	.word	0x08009231
 8009210:	08009239 	.word	0x08009239
 8009214:	08009241 	.word	0x08009241
 8009218:	08009257 	.word	0x08009257
 800921c:	08009247 	.word	0x08009247
 8009220:	08009257 	.word	0x08009257
 8009224:	08009257 	.word	0x08009257
 8009228:	08009257 	.word	0x08009257
 800922c:	0800924f 	.word	0x0800924f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009230:	f7fe fb80 	bl	8007934 <HAL_RCC_GetPCLK1Freq>
 8009234:	6178      	str	r0, [r7, #20]
        break;
 8009236:	e013      	b.n	8009260 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009238:	f7fe fb92 	bl	8007960 <HAL_RCC_GetPCLK2Freq>
 800923c:	6178      	str	r0, [r7, #20]
        break;
 800923e:	e00f      	b.n	8009260 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <UART_SetConfig+0x510>)
 8009242:	617b      	str	r3, [r7, #20]
        break;
 8009244:	e00c      	b.n	8009260 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009246:	f7fe fadf 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 800924a:	6178      	str	r0, [r7, #20]
        break;
 800924c:	e008      	b.n	8009260 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800924e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009252:	617b      	str	r3, [r7, #20]
        break;
 8009254:	e004      	b.n	8009260 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	76bb      	strb	r3, [r7, #26]
        break;
 800925e:	bf00      	nop
    }

    if (pclk != 0U)
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d018      	beq.n	8009298 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	085a      	lsrs	r2, r3, #1
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	441a      	add	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	fbb2 f3f3 	udiv	r3, r2, r3
 8009278:	b29b      	uxth	r3, r3
 800927a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	2b0f      	cmp	r3, #15
 8009280:	d908      	bls.n	8009294 <UART_SetConfig+0x4f4>
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009288:	d204      	bcs.n	8009294 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	60da      	str	r2, [r3, #12]
 8009292:	e001      	b.n	8009298 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80092a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3720      	adds	r7, #32
 80092aa:	46bd      	mov	sp, r7
 80092ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80092b0:	00f42400 	.word	0x00f42400

080092b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	f003 0308 	and.w	r3, r3, #8
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009390:	2b00      	cmp	r3, #0
 8009392:	d01a      	beq.n	80093ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b2:	d10a      	bne.n	80093ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	430a      	orrs	r2, r1
 80093ea:	605a      	str	r2, [r3, #4]
  }
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009406:	f7f9 fa05 	bl	8002814 <HAL_GetTick>
 800940a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0308 	and.w	r3, r3, #8
 8009416:	2b08      	cmp	r3, #8
 8009418:	d10e      	bne.n	8009438 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800941a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f82a 	bl	8009482 <UART_WaitOnFlagUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e020      	b.n	800947a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	2b04      	cmp	r3, #4
 8009444:	d10e      	bne.n	8009464 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009446:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f814 	bl	8009482 <UART_WaitOnFlagUntilTimeout>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e00a      	b.n	800947a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2220      	movs	r2, #32
 8009468:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2220      	movs	r2, #32
 800946e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	4613      	mov	r3, r2
 8009490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009492:	e05d      	b.n	8009550 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949a:	d059      	beq.n	8009550 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800949c:	f7f9 f9ba 	bl	8002814 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d302      	bcc.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d11b      	bne.n	80094ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094c0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0201 	bic.w	r2, r2, #1
 80094d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2220      	movs	r2, #32
 80094dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e042      	b.n	8009570 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d02b      	beq.n	8009550 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009506:	d123      	bne.n	8009550 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009510:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009520:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 0201 	bic.w	r2, r2, #1
 8009530:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2220      	movs	r2, #32
 8009536:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2220      	movs	r2, #32
 8009542:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e00f      	b.n	8009570 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69da      	ldr	r2, [r3, #28]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4013      	ands	r3, r2
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	429a      	cmp	r2, r3
 800955e:	bf0c      	ite	eq
 8009560:	2301      	moveq	r3, #1
 8009562:	2300      	movne	r3, #0
 8009564:	b2db      	uxtb	r3, r3
 8009566:	461a      	mov	r2, r3
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	429a      	cmp	r2, r3
 800956c:	d092      	beq.n	8009494 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <arm_sin_f32>:
 8009578:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80095f8 <arm_sin_f32+0x80>
 800957c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009580:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009588:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800958c:	d504      	bpl.n	8009598 <arm_sin_f32+0x20>
 800958e:	ee17 3a90 	vmov	r3, s15
 8009592:	3b01      	subs	r3, #1
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800959c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80095fc <arm_sin_f32+0x84>
 80095a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80095a4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80095a8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80095ac:	ee17 3a90 	vmov	r3, s15
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b6:	d21a      	bcs.n	80095ee <arm_sin_f32+0x76>
 80095b8:	ee07 3a90 	vmov	s15, r3
 80095bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c0:	1c59      	adds	r1, r3, #1
 80095c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80095c6:	4a0e      	ldr	r2, [pc, #56]	; (8009600 <arm_sin_f32+0x88>)
 80095c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80095cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80095d4:	ed93 7a00 	vldr	s14, [r3]
 80095d8:	edd2 6a00 	vldr	s13, [r2]
 80095dc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80095e0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80095e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80095ec:	4770      	bx	lr
 80095ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 80095f2:	2101      	movs	r1, #1
 80095f4:	2300      	movs	r3, #0
 80095f6:	e7e6      	b.n	80095c6 <arm_sin_f32+0x4e>
 80095f8:	3e22f983 	.word	0x3e22f983
 80095fc:	44000000 	.word	0x44000000
 8009600:	080096bc 	.word	0x080096bc

08009604 <__libc_init_array>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	4e0d      	ldr	r6, [pc, #52]	; (800963c <__libc_init_array+0x38>)
 8009608:	4c0d      	ldr	r4, [pc, #52]	; (8009640 <__libc_init_array+0x3c>)
 800960a:	1ba4      	subs	r4, r4, r6
 800960c:	10a4      	asrs	r4, r4, #2
 800960e:	2500      	movs	r5, #0
 8009610:	42a5      	cmp	r5, r4
 8009612:	d109      	bne.n	8009628 <__libc_init_array+0x24>
 8009614:	4e0b      	ldr	r6, [pc, #44]	; (8009644 <__libc_init_array+0x40>)
 8009616:	4c0c      	ldr	r4, [pc, #48]	; (8009648 <__libc_init_array+0x44>)
 8009618:	f000 f820 	bl	800965c <_init>
 800961c:	1ba4      	subs	r4, r4, r6
 800961e:	10a4      	asrs	r4, r4, #2
 8009620:	2500      	movs	r5, #0
 8009622:	42a5      	cmp	r5, r4
 8009624:	d105      	bne.n	8009632 <__libc_init_array+0x2e>
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800962c:	4798      	blx	r3
 800962e:	3501      	adds	r5, #1
 8009630:	e7ee      	b.n	8009610 <__libc_init_array+0xc>
 8009632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009636:	4798      	blx	r3
 8009638:	3501      	adds	r5, #1
 800963a:	e7f2      	b.n	8009622 <__libc_init_array+0x1e>
 800963c:	08009ec8 	.word	0x08009ec8
 8009640:	08009ec8 	.word	0x08009ec8
 8009644:	08009ec8 	.word	0x08009ec8
 8009648:	08009ecc 	.word	0x08009ecc

0800964c <memset>:
 800964c:	4402      	add	r2, r0
 800964e:	4603      	mov	r3, r0
 8009650:	4293      	cmp	r3, r2
 8009652:	d100      	bne.n	8009656 <memset+0xa>
 8009654:	4770      	bx	lr
 8009656:	f803 1b01 	strb.w	r1, [r3], #1
 800965a:	e7f9      	b.n	8009650 <memset+0x4>

0800965c <_init>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr

08009668 <_fini>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	bf00      	nop
 800966c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966e:	bc08      	pop	{r3}
 8009670:	469e      	mov	lr, r3
 8009672:	4770      	bx	lr
