
B-L475E_Flash_Sample_Ctrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009414  08009414  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800941c  0800941c  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08009424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b40  20000044  08009468  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b84  08009468  00021b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206f7  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037ca  00000000  00000000  0004076b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b20  00000000  00000000  00043f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001960  00000000  00000000  00045a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a235  00000000  00000000  000473b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000157ea  00000000  00000000  000715ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010ff9f  00000000  00000000  00086dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00196d76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073fc  00000000  00000000  00196e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  0019e264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bb0 	.word	0x08008bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	08008bb0 	.word	0x08008bb0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80004d6:	2110      	movs	r1, #16
 80004d8:	20d4      	movs	r0, #212	; 0xd4
 80004da:	f001 f863 	bl	80015a4 <SENSOR_IO_Read>
 80004de:	4603      	mov	r3, r0
 80004e0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80004e6:	7bbb      	ldrb	r3, [r7, #14]
 80004e8:	f003 0303 	and.w	r3, r3, #3
 80004ec:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80004ee:	7bba      	ldrb	r2, [r7, #14]
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80004f6:	7bbb      	ldrb	r3, [r7, #14]
 80004f8:	461a      	mov	r2, r3
 80004fa:	2110      	movs	r1, #16
 80004fc:	20d4      	movs	r0, #212	; 0xd4
 80004fe:	f001 f837 	bl	8001570 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000502:	2112      	movs	r1, #18
 8000504:	20d4      	movs	r0, #212	; 0xd4
 8000506:	f001 f84d 	bl	80015a4 <SENSOR_IO_Read>
 800050a:	4603      	mov	r3, r0
 800050c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	b29b      	uxth	r3, r3
 8000514:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000516:	7bbb      	ldrb	r3, [r7, #14]
 8000518:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800051c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800051e:	7bba      	ldrb	r2, [r7, #14]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	4313      	orrs	r3, r2
 8000524:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	461a      	mov	r2, r3
 800052a:	2112      	movs	r1, #18
 800052c:	20d4      	movs	r0, #212	; 0xd4
 800052e:	f001 f81f 	bl	8001570 <SENSOR_IO_Write>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000544:	2110      	movs	r1, #16
 8000546:	20d4      	movs	r0, #212	; 0xd4
 8000548:	f001 f82c 	bl	80015a4 <SENSOR_IO_Read>
 800054c:	4603      	mov	r3, r0
 800054e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	461a      	mov	r2, r3
 800055c:	2110      	movs	r1, #16
 800055e:	20d4      	movs	r0, #212	; 0xd4
 8000560:	f001 f806 	bl	8001570 <SENSOR_IO_Write>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000570:	f000 fff4 	bl	800155c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000574:	210f      	movs	r1, #15
 8000576:	20d4      	movs	r0, #212	; 0xd4
 8000578:	f001 f814 	bl	80015a4 <SENSOR_IO_Read>
 800057c:	4603      	mov	r3, r0
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}

08000582 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000590:	2115      	movs	r1, #21
 8000592:	20d4      	movs	r0, #212	; 0xd4
 8000594:	f001 f806 	bl	80015a4 <SENSOR_IO_Read>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f023 0310 	bic.w	r3, r3, #16
 80005a2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	461a      	mov	r2, r3
 80005b6:	2115      	movs	r1, #21
 80005b8:	20d4      	movs	r0, #212	; 0xd4
 80005ba:	f000 ffd9 	bl	8001570 <SENSOR_IO_Write>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80005de:	2110      	movs	r1, #16
 80005e0:	20d4      	movs	r0, #212	; 0xd4
 80005e2:	f000 ffdf 	bl	80015a4 <SENSOR_IO_Read>
 80005e6:	4603      	mov	r3, r0
 80005e8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	2306      	movs	r3, #6
 80005f0:	2128      	movs	r1, #40	; 0x28
 80005f2:	20d4      	movs	r0, #212	; 0xd4
 80005f4:	f000 fff4 	bl	80015e0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	77fb      	strb	r3, [r7, #31]
 80005fc:	e01f      	b.n	800063e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	3301      	adds	r3, #1
 8000604:	f107 0220 	add.w	r2, r7, #32
 8000608:	4413      	add	r3, r2
 800060a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800060e:	b29b      	uxth	r3, r3
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b29a      	uxth	r2, r3
 8000614:	7ffb      	ldrb	r3, [r7, #31]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	f107 0120 	add.w	r1, r7, #32
 800061c:	440b      	add	r3, r1
 800061e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000622:	b29b      	uxth	r3, r3
 8000624:	4413      	add	r3, r2
 8000626:	b29a      	uxth	r2, r3
 8000628:	7ffb      	ldrb	r3, [r7, #31]
 800062a:	b212      	sxth	r2, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	f107 0120 	add.w	r1, r7, #32
 8000632:	440b      	add	r3, r1
 8000634:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000638:	7ffb      	ldrb	r3, [r7, #31]
 800063a:	3301      	adds	r3, #1
 800063c:	77fb      	strb	r3, [r7, #31]
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d9dc      	bls.n	80005fe <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	f003 030c 	and.w	r3, r3, #12
 800064a:	2b0c      	cmp	r3, #12
 800064c:	d828      	bhi.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
 800064e:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <LSM6DSL_AccReadXYZ+0x8c>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000689 	.word	0x08000689
 8000658:	080006a1 	.word	0x080006a1
 800065c:	080006a1 	.word	0x080006a1
 8000660:	080006a1 	.word	0x080006a1
 8000664:	0800069b 	.word	0x0800069b
 8000668:	080006a1 	.word	0x080006a1
 800066c:	080006a1 	.word	0x080006a1
 8000670:	080006a1 	.word	0x080006a1
 8000674:	0800068f 	.word	0x0800068f
 8000678:	080006a1 	.word	0x080006a1
 800067c:	080006a1 	.word	0x080006a1
 8000680:	080006a1 	.word	0x080006a1
 8000684:	08000695 	.word	0x08000695
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <LSM6DSL_AccReadXYZ+0x124>)
 800068a:	61bb      	str	r3, [r7, #24]
    break;
 800068c:	e008      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <LSM6DSL_AccReadXYZ+0x128>)
 8000690:	61bb      	str	r3, [r7, #24]
    break;
 8000692:	e005      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <LSM6DSL_AccReadXYZ+0x12c>)
 8000696:	61bb      	str	r3, [r7, #24]
    break;
 8000698:	e002      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <LSM6DSL_AccReadXYZ+0x130>)
 800069c:	61bb      	str	r3, [r7, #24]
    break;    
 800069e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	77fb      	strb	r3, [r7, #31]
 80006a4:	e01b      	b.n	80006de <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80006a6:	7ffb      	ldrb	r3, [r7, #31]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	f107 0220 	add.w	r2, r7, #32
 80006ae:	4413      	add	r3, r2
 80006b0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d0:	ee17 2a90 	vmov	r2, s15
 80006d4:	b212      	sxth	r2, r2
 80006d6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80006d8:	7ffb      	ldrb	r3, [r7, #31]
 80006da:	3301      	adds	r3, #1
 80006dc:	77fb      	strb	r3, [r7, #31]
 80006de:	7ffb      	ldrb	r3, [r7, #31]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d9e0      	bls.n	80006a6 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	3d79db23 	.word	0x3d79db23
 80006f0:	3df9db23 	.word	0x3df9db23
 80006f4:	3e79db23 	.word	0x3e79db23
 80006f8:	3ef9db23 	.word	0x3ef9db23

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f001 fe7c 	bl	80023fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f9d5 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 fc09 	bl	8000f20 <MX_GPIO_Init>
  MX_DMA_Init();
 800070e:	f000 fbe9 	bl	8000ee4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000712:	f000 fad1 	bl	8000cb8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000716:	f000 fb67 	bl	8000de8 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 800071a:	f000 fb3f 	bl	8000d9c <MX_QUADSPI_Init>
  MX_I2C2_Init();
 800071e:	f000 fafd 	bl	8000d1c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000722:	f000 fbaf 	bl	8000e84 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000726:	f000 fa51 	bl	8000bcc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  if (BSP_ACCELERO_Init() != ACCELERO_OK){
 800072a:	f000 ff77 	bl	800161c <BSP_ACCELERO_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d004      	beq.n	800073e <main+0x42>
  	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2108      	movs	r1, #8
 8000738:	488e      	ldr	r0, [pc, #568]	; (8000974 <main+0x278>)
 800073a:	f004 fb27 	bl	8004d8c <HAL_GPIO_WritePin>
    }
  memset(&strBuf[0], 0, sizeof(strBuf));
 800073e:	2264      	movs	r2, #100	; 0x64
 8000740:	2100      	movs	r1, #0
 8000742:	488d      	ldr	r0, [pc, #564]	; (8000978 <main+0x27c>)
 8000744:	f008 fa2c 	bl	8008ba0 <memset>

  // Poll ADC
  HAL_ADC_Start(&hadc1);
 8000748:	488c      	ldr	r0, [pc, #560]	; (800097c <main+0x280>)
 800074a:	f002 fa75 	bl	8002c38 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800074e:	f04f 31ff 	mov.w	r1, #4294967295
 8000752:	488a      	ldr	r0, [pc, #552]	; (800097c <main+0x280>)
 8000754:	f002 fb5e 	bl	8002e14 <HAL_ADC_PollForConversion>
  volume = HAL_ADC_GetValue(&hadc1)/3;
 8000758:	4888      	ldr	r0, [pc, #544]	; (800097c <main+0x280>)
 800075a:	f002 fc2b 	bl	8002fb4 <HAL_ADC_GetValue>
 800075e:	4602      	mov	r2, r0
 8000760:	4b87      	ldr	r3, [pc, #540]	; (8000980 <main+0x284>)
 8000762:	fba3 2302 	umull	r2, r3, r3, r2
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b86      	ldr	r3, [pc, #536]	; (8000984 <main+0x288>)
 800076c:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 800076e:	4883      	ldr	r0, [pc, #524]	; (800097c <main+0x280>)
 8000770:	f002 fb1c 	bl	8002dac <HAL_ADC_Stop>

  // Poll accelerometer
  BSP_ACCELERO_AccGetXYZ(raw_acc);
 8000774:	4884      	ldr	r0, [pc, #528]	; (8000988 <main+0x28c>)
 8000776:	f000 ff8f 	bl	8001698 <BSP_ACCELERO_AccGetXYZ>
  conv_accX = MapFreqVal(raw_acc[0]);
 800077a:	4b83      	ldr	r3, [pc, #524]	; (8000988 <main+0x28c>)
 800077c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fca3 	bl	80010cc <MapFreqVal>
 8000786:	eef0 7a40 	vmov.f32	s15, s0
 800078a:	4b80      	ldr	r3, [pc, #512]	; (800098c <main+0x290>)
 800078c:	edc3 7a00 	vstr	s15, [r3]

  // ------------------------------- ERASE AND REWRITE FLASH WITH TEST TONE ------------------------------- //
  //                               (WILL BE REPLACED BY ACTUAL MIC RECORDING)                               //

  // Generate a C6 tone for testing
  GenerateTone(audioBuffer, 40, C6, TONE_BUFFER_SIZE);
 8000790:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000794:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8000990 <main+0x294>
 8000798:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8000994 <main+0x298>
 800079c:	487e      	ldr	r0, [pc, #504]	; (8000998 <main+0x29c>)
 800079e:	f000 fc45 	bl	800102c <GenerateTone>

  BSP_QSPI_Init();
 80007a2:	f000 ff91 	bl	80016c8 <BSP_QSPI_Init>
  // Loop and erase 1 block of FLASH memory at a time
  for (int i = 0; i < NUM_BLOCKS_FLASH; i++){
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e011      	b.n	80007d0 <main+0xd4>
  	  newStart = START_WRITE_ADR + i*(MX25R6435F_BLOCK_SIZE);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	041b      	lsls	r3, r3, #16
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b7a      	ldr	r3, [pc, #488]	; (800099c <main+0x2a0>)
 80007b4:	601a      	str	r2, [r3, #0]

  	  if (BSP_QSPI_Erase_Block(newStart) != QSPI_OK)
 80007b6:	4b79      	ldr	r3, [pc, #484]	; (800099c <main+0x2a0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f8b4 	bl	8001928 <BSP_QSPI_Erase_Block>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <main+0xce>
  		  Error_Handler();
 80007c6:	f000 fdcd 	bl	8001364 <Error_Handler>
  for (int i = 0; i < NUM_BLOCKS_FLASH; i++){
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3301      	adds	r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b0d      	cmp	r3, #13
 80007d4:	d9ea      	bls.n	80007ac <main+0xb0>
  }

  // Write the C6 tone to FLASH repeatedly for 20 seconds
  uint8_t reachEndFlash = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	72fb      	strb	r3, [r7, #11]
  newStart = START_WRITE_ADR;
 80007da:	4b70      	ldr	r3, [pc, #448]	; (800099c <main+0x2a0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
  nextPosition = newStart;
 80007e0:	4b6e      	ldr	r3, [pc, #440]	; (800099c <main+0x2a0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a6e      	ldr	r2, [pc, #440]	; (80009a0 <main+0x2a4>)
 80007e6:	6013      	str	r3, [r2, #0]

  while (!reachEndFlash){
 80007e8:	e02f      	b.n	800084a <main+0x14e>

	  nextPosition = newStart + TONE_BUFFER_SIZE;
 80007ea:	4b6c      	ldr	r3, [pc, #432]	; (800099c <main+0x2a0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80007f2:	4a6b      	ldr	r2, [pc, #428]	; (80009a0 <main+0x2a4>)
 80007f4:	6013      	str	r3, [r2, #0]

	  if (nextPosition >= NUM_TOTAL_SAMPLES){
 80007f6:	4b6a      	ldr	r3, [pc, #424]	; (80009a0 <main+0x2a4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a6a      	ldr	r2, [pc, #424]	; (80009a4 <main+0x2a8>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d913      	bls.n	8000828 <main+0x12c>
		  reachEndFlash = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	72fb      	strb	r3, [r7, #11]

		  if (BSP_QSPI_Write(&audioBuffer[0], newStart, (NUM_TOTAL_SAMPLES-newStart)) != QSPI_OK)
 8000804:	4b65      	ldr	r3, [pc, #404]	; (800099c <main+0x2a0>)
 8000806:	6819      	ldr	r1, [r3, #0]
 8000808:	4b64      	ldr	r3, [pc, #400]	; (800099c <main+0x2a0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f5c3 2357 	rsb	r3, r3, #880640	; 0xd7000
 8000810:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8000814:	461a      	mov	r2, r3
 8000816:	4860      	ldr	r0, [pc, #384]	; (8000998 <main+0x29c>)
 8000818:	f001 f808 	bl	800182c <BSP_QSPI_Write>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d017      	beq.n	8000852 <main+0x156>
			  Error_Handler();
 8000822:	f000 fd9f 	bl	8001364 <Error_Handler>

		  break;
 8000826:	e014      	b.n	8000852 <main+0x156>
	  }

	  if (BSP_QSPI_Write(audioBuffer, newStart, TONE_BUFFER_SIZE) != QSPI_OK)
 8000828:	4b5c      	ldr	r3, [pc, #368]	; (800099c <main+0x2a0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000830:	4619      	mov	r1, r3
 8000832:	4859      	ldr	r0, [pc, #356]	; (8000998 <main+0x29c>)
 8000834:	f000 fffa 	bl	800182c <BSP_QSPI_Write>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <main+0x146>
		  Error_Handler();
 800083e:	f000 fd91 	bl	8001364 <Error_Handler>

	  newStart = nextPosition;
 8000842:	4b57      	ldr	r3, [pc, #348]	; (80009a0 <main+0x2a4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a55      	ldr	r2, [pc, #340]	; (800099c <main+0x2a0>)
 8000848:	6013      	str	r3, [r2, #0]
  while (!reachEndFlash){
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0cc      	beq.n	80007ea <main+0xee>
 8000850:	e000      	b.n	8000854 <main+0x158>
		  break;
 8000852:	bf00      	nop
  }

  // Reset audio buffer
  memset(&audioBuffer[0], 0, sizeof(audioBuffer));
 8000854:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000858:	2100      	movs	r1, #0
 800085a:	484f      	ldr	r0, [pc, #316]	; (8000998 <main+0x29c>)
 800085c:	f008 f9a0 	bl	8008ba0 <memset>

  // ------------------------------------------------------------------------------------------------------ //

  // Clear error led state
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // clear error led state
 8000860:	2201      	movs	r2, #1
 8000862:	2108      	movs	r1, #8
 8000864:	4843      	ldr	r0, [pc, #268]	; (8000974 <main+0x278>)
 8000866:	f004 fa91 	bl	8004d8c <HAL_GPIO_WritePin>

  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 800086a:	484f      	ldr	r0, [pc, #316]	; (80009a8 <main+0x2ac>)
 800086c:	f007 f8a0 	bl	80079b0 <HAL_TIM_Base_Start_IT>

  // Start DMA for DAC
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)audioBuffer, TONE_BUFFER_SIZE, DAC_ALIGN_8B_R);
 8000870:	2308      	movs	r3, #8
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000878:	4a47      	ldr	r2, [pc, #284]	; (8000998 <main+0x29c>)
 800087a:	2100      	movs	r1, #0
 800087c:	484b      	ldr	r0, [pc, #300]	; (80009ac <main+0x2b0>)
 800087e:	f003 fb01 	bl	8003e84 <HAL_DAC_Start_DMA>

  // Start in IDLE mode:
  currState_flash = IDLE;
 8000882:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <main+0x2b4>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]

  // Start at the beginning of the flash recording
  newStart = START_WRITE_ADR;
 8000888:	4b44      	ldr	r3, [pc, #272]	; (800099c <main+0x2a0>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
  nextPosition = newStart;
 800088e:	4b43      	ldr	r3, [pc, #268]	; (800099c <main+0x2a0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a43      	ldr	r2, [pc, #268]	; (80009a0 <main+0x2a4>)
 8000894:	6013      	str	r3, [r2, #0]
  uint16_t nextLen = HALF_BUFFER_SIZE;
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	813b      	strh	r3, [r7, #8]
  float modifier = 1;
 800089c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80008a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// ----------------------------- LOAD AUDIO SAMPLES FROM FLASH TO DAC USING DMA ------------------------------
	switch (currState_flash){
 80008a2:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <main+0x2b4>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d004      	beq.n	80008b6 <main+0x1ba>
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	f000 8089 	beq.w	80009c4 <main+0x2c8>
 80008b2:	2b00      	cmp	r3, #0
		case IDLE:
			break;
 80008b4:	e0e4      	b.n	8000a80 <main+0x384>

		case HALFPT:

			// Read first half of next note into tones[]
			HAL_ADC_Start(&hadc1);
 80008b6:	4831      	ldr	r0, [pc, #196]	; (800097c <main+0x280>)
 80008b8:	f002 f9be 	bl	8002c38 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	482e      	ldr	r0, [pc, #184]	; (800097c <main+0x280>)
 80008c2:	f002 faa7 	bl	8002e14 <HAL_ADC_PollForConversion>
			vol_mod = (float)HAL_ADC_GetValue(&hadc1)/128.0;
 80008c6:	482d      	ldr	r0, [pc, #180]	; (800097c <main+0x280>)
 80008c8:	f002 fb74 	bl	8002fb4 <HAL_ADC_GetValue>
 80008cc:	ee07 0a90 	vmov	s15, r0
 80008d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008d4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80009b4 <main+0x2b8>
 80008d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008dc:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <main+0x2bc>)
 80008de:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Stop(&hadc1);
 80008e2:	4826      	ldr	r0, [pc, #152]	; (800097c <main+0x280>)
 80008e4:	f002 fa62 	bl	8002dac <HAL_ADC_Stop>

			BSP_ACCELERO_AccGetXYZ(raw_acc);
 80008e8:	4827      	ldr	r0, [pc, #156]	; (8000988 <main+0x28c>)
 80008ea:	f000 fed5 	bl	8001698 <BSP_ACCELERO_AccGetXYZ>
			modifier = MapModifVal(raw_acc[0]);
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <main+0x28c>)
 80008f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fc19 	bl	800112c <MapModifVal>
 80008fa:	ed87 0a01 	vstr	s0, [r7, #4]

			nextLen = (uint16_t)(modifier * HALF_BUFFER_SIZE);
 80008fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000902:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80009bc <main+0x2c0>
 8000906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800090a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800090e:	ee17 3a90 	vmov	r3, s15
 8000912:	813b      	strh	r3, [r7, #8]

			if (BSP_QSPI_Read(tempBuffer, newStart, nextLen) != QSPI_OK)
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <main+0x2a0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	893a      	ldrh	r2, [r7, #8]
 800091a:	4619      	mov	r1, r3
 800091c:	4828      	ldr	r0, [pc, #160]	; (80009c0 <main+0x2c4>)
 800091e:	f000 ff3f 	bl	80017a0 <BSP_QSPI_Read>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <main+0x230>
				Error_Handler();
 8000928:	f000 fd1c 	bl	8001364 <Error_Handler>

			ModifyRecFreq(tempBuffer, audioBuffer, modifier, nextLen, vol_mod);
 800092c:	893a      	ldrh	r2, [r7, #8]
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <main+0x2bc>)
 8000930:	edd3 7a00 	vldr	s15, [r3]
 8000934:	eef0 0a67 	vmov.f32	s1, s15
 8000938:	ed97 0a01 	vldr	s0, [r7, #4]
 800093c:	4916      	ldr	r1, [pc, #88]	; (8000998 <main+0x29c>)
 800093e:	4820      	ldr	r0, [pc, #128]	; (80009c0 <main+0x2c4>)
 8000940:	f000 fc40 	bl	80011c4 <ModifyRecFreq>

			// Check if exceed number of samples
			nextPosition = newStart + nextLen; //change this
 8000944:	893a      	ldrh	r2, [r7, #8]
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <main+0x2a0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <main+0x2a4>)
 800094e:	6013      	str	r3, [r2, #0]
			if (nextPosition >= NUM_TOTAL_SAMPLES){
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <main+0x2a4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <main+0x2a8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d903      	bls.n	8000962 <main+0x266>
				HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800095a:	2100      	movs	r1, #0
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <main+0x2b0>)
 800095e:	f003 fb4f 	bl	8004000 <HAL_DAC_Stop_DMA>
			}

			newStart = nextPosition;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <main+0x2a4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a0d      	ldr	r2, [pc, #52]	; (800099c <main+0x2a0>)
 8000968:	6013      	str	r3, [r2, #0]
			currState_flash = IDLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <main+0x2b4>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			break;
 8000970:	e086      	b.n	8000a80 <main+0x384>
 8000972:	bf00      	nop
 8000974:	48001000 	.word	0x48001000
 8000978:	200010c4 	.word	0x200010c4
 800097c:	20001128 	.word	0x20001128
 8000980:	aaaaaaab 	.word	0xaaaaaaab
 8000984:	20000068 	.word	0x20000068
 8000988:	2000006c 	.word	0x2000006c
 800098c:	20000074 	.word	0x20000074
 8000990:	4482c000 	.word	0x4482c000
 8000994:	42200000 	.word	0x42200000
 8000998:	2000125c 	.word	0x2000125c
 800099c:	20000060 	.word	0x20000060
 80009a0:	20000064 	.word	0x20000064
 80009a4:	000d754f 	.word	0x000d754f
 80009a8:	20001210 	.word	0x20001210
 80009ac:	2000007c 	.word	0x2000007c
 80009b0:	2000118c 	.word	0x2000118c
 80009b4:	43000000 	.word	0x43000000
 80009b8:	20000034 	.word	0x20000034
 80009bc:	447a0000 	.word	0x447a0000
 80009c0:	200000dc 	.word	0x200000dc

		case DONE:

			// Read second half of curr note into tones[]
			HAL_ADC_Start(&hadc1);
 80009c4:	482f      	ldr	r0, [pc, #188]	; (8000a84 <main+0x388>)
 80009c6:	f002 f937 	bl	8002c38 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009ca:	f04f 31ff 	mov.w	r1, #4294967295
 80009ce:	482d      	ldr	r0, [pc, #180]	; (8000a84 <main+0x388>)
 80009d0:	f002 fa20 	bl	8002e14 <HAL_ADC_PollForConversion>
			vol_mod = (float)HAL_ADC_GetValue(&hadc1)/128.0;
 80009d4:	482b      	ldr	r0, [pc, #172]	; (8000a84 <main+0x388>)
 80009d6:	f002 faed 	bl	8002fb4 <HAL_ADC_GetValue>
 80009da:	ee07 0a90 	vmov	s15, r0
 80009de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009e2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000a88 <main+0x38c>
 80009e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <main+0x390>)
 80009ec:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Stop(&hadc1);
 80009f0:	4824      	ldr	r0, [pc, #144]	; (8000a84 <main+0x388>)
 80009f2:	f002 f9db 	bl	8002dac <HAL_ADC_Stop>

			BSP_ACCELERO_AccGetXYZ(raw_acc);
 80009f6:	4826      	ldr	r0, [pc, #152]	; (8000a90 <main+0x394>)
 80009f8:	f000 fe4e 	bl	8001698 <BSP_ACCELERO_AccGetXYZ>
			modifier = MapModifVal(raw_acc[0]);
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <main+0x394>)
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fb92 	bl	800112c <MapModifVal>
 8000a08:	ed87 0a01 	vstr	s0, [r7, #4]

			nextLen = (uint16_t)(modifier * HALF_BUFFER_SIZE);
 8000a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a10:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000a94 <main+0x398>
 8000a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1c:	ee17 3a90 	vmov	r3, s15
 8000a20:	813b      	strh	r3, [r7, #8]

			if (BSP_QSPI_Read(tempBuffer, newStart, nextLen) != QSPI_OK)
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <main+0x39c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	893a      	ldrh	r2, [r7, #8]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481c      	ldr	r0, [pc, #112]	; (8000a9c <main+0x3a0>)
 8000a2c:	f000 feb8 	bl	80017a0 <BSP_QSPI_Read>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <main+0x33e>
				Error_Handler();
 8000a36:	f000 fc95 	bl	8001364 <Error_Handler>

			ModifyRecFreq(tempBuffer, &audioBuffer[HALF_BUFFER_SIZE-1], modifier, nextLen, vol_mod);
 8000a3a:	893a      	ldrh	r2, [r7, #8]
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <main+0x390>)
 8000a3e:	edd3 7a00 	vldr	s15, [r3]
 8000a42:	eef0 0a67 	vmov.f32	s1, s15
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	4915      	ldr	r1, [pc, #84]	; (8000aa0 <main+0x3a4>)
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <main+0x3a0>)
 8000a4e:	f000 fbb9 	bl	80011c4 <ModifyRecFreq>

			// Check if exceed number of samples
			nextPosition = newStart + nextLen; //change this
 8000a52:	893a      	ldrh	r2, [r7, #8]
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <main+0x39c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <main+0x3a8>)
 8000a5c:	6013      	str	r3, [r2, #0]
			if (nextPosition >= NUM_TOTAL_SAMPLES){
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <main+0x3a8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <main+0x3ac>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d903      	bls.n	8000a70 <main+0x374>
				HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4810      	ldr	r0, [pc, #64]	; (8000aac <main+0x3b0>)
 8000a6c:	f003 fac8 	bl	8004000 <HAL_DAC_Stop_DMA>
			}

			newStart = nextPosition;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <main+0x3a8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <main+0x39c>)
 8000a76:	6013      	str	r3, [r2, #0]
			currState_flash = IDLE;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <main+0x3b4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
			break;
 8000a7e:	bf00      	nop
	switch (currState_flash){
 8000a80:	e70f      	b.n	80008a2 <main+0x1a6>
 8000a82:	bf00      	nop
 8000a84:	20001128 	.word	0x20001128
 8000a88:	43000000 	.word	0x43000000
 8000a8c:	20000034 	.word	0x20000034
 8000a90:	2000006c 	.word	0x2000006c
 8000a94:	447a0000 	.word	0x447a0000
 8000a98:	20000060 	.word	0x20000060
 8000a9c:	200000dc 	.word	0x200000dc
 8000aa0:	20001643 	.word	0x20001643
 8000aa4:	20000064 	.word	0x20000064
 8000aa8:	000d754f 	.word	0x000d754f
 8000aac:	2000007c 	.word	0x2000007c
 8000ab0:	2000118c 	.word	0x2000118c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0b8      	sub	sp, #224	; 0xe0
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000abe:	2244      	movs	r2, #68	; 0x44
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 f86c 	bl	8008ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2288      	movs	r2, #136	; 0x88
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 f85e 	bl	8008ba0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000af6:	2360      	movs	r3, #96	; 0x60
 8000af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2302      	movs	r3, #2
 8000afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b0e:	2328      	movs	r3, #40	; 0x28
 8000b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b14:	2307      	movs	r3, #7
 8000b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f005 fc4e 	bl	80063cc <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b36:	f000 fc15 	bl	8001364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2303      	movs	r3, #3
 8000b42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f006 f81a 	bl	8006b98 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b6a:	f000 fbfb 	bl	8001364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 8000b6e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b72:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b80:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b82:	2301      	movs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b8a:	2318      	movs	r3, #24
 8000b8c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b9e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f006 f9fc 	bl	8006fa0 <HAL_RCCEx_PeriphCLKConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000bae:	f000 fbd9 	bl	8001364 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bb6:	f004 fed3 	bl	8005960 <HAL_PWREx_ControlVoltageScaling>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000bc0:	f000 fbd0 	bl	8001364 <Error_Handler>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	37e0      	adds	r7, #224	; 0xe0
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000bf0:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <MX_ADC1_Init+0xe4>)
 8000bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c4e:	4817      	ldr	r0, [pc, #92]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c50:	f001 fe9e 	bl	8002990 <HAL_ADC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c5a:	f000 fb83 	bl	8001364 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4810      	ldr	r0, [pc, #64]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c6a:	f002 ff2b 	bl	8003ac4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c74:	f000 fb76 	bl	8001364 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_ADC1_Init+0xe8>)
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c84:	237f      	movs	r3, #127	; 0x7f
 8000c86:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_ADC1_Init+0xe0>)
 8000c96:	f002 f99b 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ca0:	f000 fb60 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20001128 	.word	0x20001128
 8000cb0:	50040000 	.word	0x50040000
 8000cb4:	3ac04000 	.word	0x3ac04000

08000cb8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2224      	movs	r2, #36	; 0x24
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f007 ff6b 	bl	8008ba0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_DAC1_Init+0x5c>)
 8000ccc:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_DAC1_Init+0x60>)
 8000cce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cd0:	4810      	ldr	r0, [pc, #64]	; (8000d14 <MX_DAC1_Init+0x5c>)
 8000cd2:	f003 f8b4 	bl	8003e3e <HAL_DAC_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cdc:	f000 fb42 	bl	8001364 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ce4:	2324      	movs	r3, #36	; 0x24
 8000ce6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_DAC1_Init+0x5c>)
 8000cfc:	f003 f9cf 	bl	800409e <HAL_DAC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000d06:	f000 fb2d 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000007c 	.word	0x2000007c
 8000d18:	40007400 	.word	0x40007400

08000d1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_I2C2_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <MX_I2C2_Init+0x7c>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d58:	f004 f853 	bl	8004e02 <HAL_I2C_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d62:	f000 faff 	bl	8001364 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d6a:	f004 fd53 	bl	8005814 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d74:	f000 faf6 	bl	8001364 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_I2C2_Init+0x74>)
 8000d7c:	f004 fd95 	bl	80058aa <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 faed 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000090 	.word	0x20000090
 8000d94:	40005800 	.word	0x40005800
 8000d98:	10909cec 	.word	0x10909cec

08000d9c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_QUADSPI_Init+0x44>)
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <MX_QUADSPI_Init+0x48>)
 8000da4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_QUADSPI_Init+0x44>)
 8000da8:	22ff      	movs	r2, #255	; 0xff
 8000daa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_QUADSPI_Init+0x44>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_QUADSPI_Init+0x44>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_QUADSPI_Init+0x44>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_QUADSPI_Init+0x44>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_QUADSPI_Init+0x44>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_QUADSPI_Init+0x44>)
 8000dcc:	f004 fe1e 	bl	8005a0c <HAL_QSPI_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000dd6:	f000 fac5 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20001a2c 	.word	0x20001a2c
 8000de4:	a0001000 	.word	0xa0001000

08000de8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e1c:	f240 7216 	movw	r2, #1814	; 0x716
 8000e20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e2e:	4814      	ldr	r0, [pc, #80]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e30:	f006 fd66 	bl	8007900 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e3a:	f000 fa93 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e4c:	f006 ff3f 	bl	8007cce <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e56:	f000 fa85 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_TIM2_Init+0x98>)
 8000e68:	f007 f950 	bl	800810c <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e72:	f000 fa77 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20001210 	.word	0x20001210

08000e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <MX_USART1_UART_Init+0x5c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART1_UART_Init+0x58>)
 8000ec8:	f007 f9c6 	bl	8008258 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ed2:	f000 fa47 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20001190 	.word	0x20001190
 8000ee0:	40013800 	.word	0x40013800

08000ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA_Init+0x38>)
 8000eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <MX_DMA_Init+0x38>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_DMA_Init+0x38>)
 8000ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	200d      	movs	r0, #13
 8000f08:	f002 ff63 	bl	8003dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f0c:	200d      	movs	r0, #13
 8000f0e:	f002 ff7c 	bl	8003e0a <HAL_NVIC_EnableIRQ>

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a37      	ldr	r2, [pc, #220]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b35      	ldr	r3, [pc, #212]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a31      	ldr	r2, [pc, #196]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a2b      	ldr	r2, [pc, #172]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a25      	ldr	r2, [pc, #148]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MX_GPIO_Init+0xf8>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2108      	movs	r1, #8
 8000f9a:	4820      	ldr	r0, [pc, #128]	; (800101c <MX_GPIO_Init+0xfc>)
 8000f9c:	f003 fef6 	bl	8004d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa6:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_GPIO_Init+0x100>)
 8000fa8:	f003 fef0 	bl	8004d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000fac:	2308      	movs	r3, #8
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4816      	ldr	r0, [pc, #88]	; (800101c <MX_GPIO_Init+0xfc>)
 8000fc4:	f003 fc46 	bl	8004854 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_GPIO_Init+0x104>)
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4812      	ldr	r0, [pc, #72]	; (8001028 <MX_GPIO_Init+0x108>)
 8000fde:	f003 fc39 	bl	8004854 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000fe2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <MX_GPIO_Init+0x100>)
 8000ffc:	f003 fc2a 	bl	8004854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2028      	movs	r0, #40	; 0x28
 8001006:	f002 fee4 	bl	8003dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100a:	2028      	movs	r0, #40	; 0x28
 800100c:	f002 fefd 	bl	8003e0a <HAL_NVIC_EnableIRQ>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	48001000 	.word	0x48001000
 8001020:	48000400 	.word	0x48000400
 8001024:	10110000 	.word	0x10110000
 8001028:	48000800 	.word	0x48000800

0800102c <GenerateTone>:

/* USER CODE BEGIN 4 */

void GenerateTone(uint8_t *array, float vol, float freq, uint32_t nSamples){
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6178      	str	r0, [r7, #20]
 8001034:	ed87 0a04 	vstr	s0, [r7, #16]
 8001038:	edc7 0a03 	vstr	s1, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
	float twopi = 6.283185307;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <GenerateTone+0x98>)
 8001040:	623b      	str	r3, [r7, #32]
	float angStep = twopi * freq / SAMPLING_FREQ;
 8001042:	ed97 7a08 	vldr	s14, [r7, #32]
 8001046:	edd7 7a03 	vldr	s15, [r7, #12]
 800104a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80010c8 <GenerateTone+0x9c>
 8001052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001056:	edc7 7a07 	vstr	s15, [r7, #28]
	float currAngle = 0;
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < (nSamples); i++){
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
 8001064:	e025      	b.n	80010b2 <GenerateTone+0x86>
		currAngle = i * angStep;
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001070:	ed97 7a07 	vldr	s14, [r7, #28]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	edc7 7a06 	vstr	s15, [r7, #24]
		array[i] = (uint8_t)(vol + (vol * arm_sin_f32(currAngle)));
 800107c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001080:	f007 fd24 	bl	8008acc <arm_sin_f32>
 8001084:	eeb0 7a40 	vmov.f32	s14, s0
 8001088:	edd7 7a04 	vldr	s15, [r7, #16]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	edd7 7a04 	vldr	s15, [r7, #16]
 8001094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	4413      	add	r3, r2
 800109e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80010a6:	793a      	ldrb	r2, [r7, #4]
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < (nSamples); i++){
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3301      	adds	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3d5      	bcc.n	8001066 <GenerateTone+0x3a>
	}

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40c90fdb 	.word	0x40c90fdb
 80010c8:	472c4400 	.word	0x472c4400

080010cc <MapFreqVal>:

float MapFreqVal(int16_t x){
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]

	float x_l;
	if (x < -1000){
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80010de:	da02      	bge.n	80010e6 <MapFreqVal+0x1a>
	  x_l = -1000;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MapFreqVal+0x54>)
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	e007      	b.n	80010f6 <MapFreqVal+0x2a>
	}
	else{
	  x_l = (float)x;
 80010e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f2:	edc7 7a03 	vstr	s15, [r7, #12]
	//  float in_min = -1000;
	//  float in_max = 1000;
	//  float out_min = 4300;
	//  float out_max = 300;
	//  return (((x_l - in_min) * (out_max - out_min) / (in_max - in_min) + out_min));
	return (((x_l + 1000) * (-2) + 4300));
 80010f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001124 <MapFreqVal+0x58>
 80010fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001102:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001128 <MapFreqVal+0x5c>
 800110e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	c47a0000 	.word	0xc47a0000
 8001124:	447a0000 	.word	0x447a0000
 8001128:	45866000 	.word	0x45866000

0800112c <MapModifVal>:

float MapModifVal(int16_t x){
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]

	float x_l;

	if (x < -714)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <MapModifVal+0x8c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	da03      	bge.n	8001148 <MapModifVal+0x1c>
		x_l = 0.25;
 8001140:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	e02d      	b.n	80011a4 <MapModifVal+0x78>
	else if (x < -429)
 8001148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114c:	f513 7fd7 	cmn.w	r3, #430	; 0x1ae
 8001150:	dc02      	bgt.n	8001158 <MapModifVal+0x2c>
		x_l = 0.333;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MapModifVal+0x90>)
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	e025      	b.n	80011a4 <MapModifVal+0x78>
	else if (x < -143)
 8001158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115c:	f113 0f8f 	cmn.w	r3, #143	; 0x8f
 8001160:	da03      	bge.n	800116a <MapModifVal+0x3e>
		x_l = 0.5;
 8001162:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e01c      	b.n	80011a4 <MapModifVal+0x78>
	else if (x < 143)
 800116a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116e:	2b8e      	cmp	r3, #142	; 0x8e
 8001170:	dc03      	bgt.n	800117a <MapModifVal+0x4e>
		x_l = 1;
 8001172:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e014      	b.n	80011a4 <MapModifVal+0x78>
	else if (x < 429)
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 8001182:	dc03      	bgt.n	800118c <MapModifVal+0x60>
		x_l = 2;
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e00b      	b.n	80011a4 <MapModifVal+0x78>
	else if (x < 714)
 800118c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001190:	f240 22c9 	movw	r2, #713	; 0x2c9
 8001194:	4293      	cmp	r3, r2
 8001196:	dc02      	bgt.n	800119e <MapModifVal+0x72>
		x_l = 3;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MapModifVal+0x94>)
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e002      	b.n	80011a4 <MapModifVal+0x78>
	else
		x_l = 4;
 800119e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80011a2:	60fb      	str	r3, [r7, #12]

	return x_l;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	fffffd36 	.word	0xfffffd36
 80011bc:	3eaa7efa 	.word	0x3eaa7efa
 80011c0:	40400000 	.word	0x40400000

080011c4 <ModifyRecFreq>:

void ModifyRecFreq(uint8_t *inArr, uint8_t *outArr, float mod, uint32_t nSamples, float vol_mod){
 80011c4:	b480      	push	{r7}
 80011c6:	b08d      	sub	sp, #52	; 0x34
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6178      	str	r0, [r7, #20]
 80011cc:	6139      	str	r1, [r7, #16]
 80011ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80011d2:	60ba      	str	r2, [r7, #8]
 80011d4:	edc7 0a01 	vstr	s1, [r7, #4]

	// Repeat samples
	if (mod < 1){
 80011d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	d53b      	bpl.n	8001262 <ModifyRecFreq+0x9e>
		uint8_t scale = (uint8_t)(1 / mod);
 80011ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fa:	edc7 7a00 	vstr	s15, [r7]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	77bb      	strb	r3, [r7, #30]

		for (uint32_t i = 0; i < nSamples; i++){
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001206:	e027      	b.n	8001258 <ModifyRecFreq+0x94>
			for (uint32_t j = 0; j < scale; j++){
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
 800120c:	e01d      	b.n	800124a <ModifyRecFreq+0x86>
				outArr[scale*i+j] = vol_mod * inArr[i];
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001226:	7fbb      	ldrb	r3, [r7, #30]
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	fb02 f203 	mul.w	r2, r2, r3
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4413      	add	r3, r2
 8001236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123a:	edc7 7a00 	vstr	s15, [r7]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
			for (uint32_t j = 0; j < scale; j++){
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001246:	3301      	adds	r3, #1
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
 800124a:	7fbb      	ldrb	r3, [r7, #30]
 800124c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800124e:	429a      	cmp	r2, r3
 8001250:	d3dd      	bcc.n	800120e <ModifyRecFreq+0x4a>
		for (uint32_t i = 0; i < nSamples; i++){
 8001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001254:	3301      	adds	r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3d3      	bcc.n	8001208 <ModifyRecFreq+0x44>
			}
		}
		return;
 8001260:	e04f      	b.n	8001302 <ModifyRecFreq+0x13e>
	}

	uint8_t scale = (uint8_t)(mod);
 8001262:	edd7 7a03 	vldr	s15, [r7, #12]
 8001266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126a:	edc7 7a00 	vstr	s15, [r7]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	77fb      	strb	r3, [r7, #31]

	if (scale == 1){
 8001272:	7ffb      	ldrb	r3, [r7, #31]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d120      	bne.n	80012ba <ModifyRecFreq+0xf6>
		for (uint32_t i = 0; i < nSamples; i++){
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
 800127c:	e018      	b.n	80012b0 <ModifyRecFreq+0xec>
			outArr[i] = vol_mod * inArr[i];
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	4413      	add	r3, r2
 800129c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a0:	edc7 7a00 	vstr	s15, [r7]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < nSamples; i++){
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	3301      	adds	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
 80012b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d3e2      	bcc.n	800127e <ModifyRecFreq+0xba>
 80012b8:	e023      	b.n	8001302 <ModifyRecFreq+0x13e>
	}

	// Subsample
	else{

		for (uint32_t i = 0; i < nSamples; i+=scale){
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
 80012be:	e01c      	b.n	80012fa <ModifyRecFreq+0x136>
			outArr[(uint32_t)(i/scale)] = vol_mod * inArr[i];
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	6a3a      	ldr	r2, [r7, #32]
 80012dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4413      	add	r3, r2
 80012e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e8:	edc7 7a00 	vstr	s15, [r7]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < nSamples; i+=scale){
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	6a3a      	ldr	r2, [r7, #32]
 80012f6:	4413      	add	r3, r2
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	6a3a      	ldr	r2, [r7, #32]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d3de      	bcc.n	80012c0 <ModifyRecFreq+0xfc>
		}

	}
}
 8001302:	3734      	adds	r7, #52	; 0x34
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d102      	bne.n	8001324 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>
		currState_flash = HALFPT;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
	}
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40007400 	.word	0x40007400
 8001334:	2000118c 	.word	0x2000118c

08001338 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a05      	ldr	r2, [pc, #20]	; (800135c <HAL_DAC_ConvCpltCallbackCh1+0x24>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d102      	bne.n	8001350 <HAL_DAC_ConvCpltCallbackCh1+0x18>
		currState_flash = DONE;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 800134c:	2202      	movs	r2, #2
 800134e:	701a      	strb	r2, [r3, #0]
	}
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40007400 	.word	0x40007400
 8001360:	2000118c 	.word	0x2000118c

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2108      	movs	r1, #8
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <Error_Handler+0x14>)
 800136e:	f003 fd0d 	bl	8004d8c <HAL_GPIO_WritePin>
  __BKPT();
 8001372:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	48001000 	.word	0x48001000

0800137c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <I2Cx_MspInit+0xa8>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	4a26      	ldr	r2, [pc, #152]	; (8001424 <I2Cx_MspInit+0xa8>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <I2Cx_MspInit+0xa8>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800139c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80013a2:	2312      	movs	r3, #18
 80013a4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80013ae:	2304      	movs	r3, #4
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	481b      	ldr	r0, [pc, #108]	; (8001428 <I2Cx_MspInit+0xac>)
 80013ba:	f003 fa4b 	bl	8004854 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4818      	ldr	r0, [pc, #96]	; (8001428 <I2Cx_MspInit+0xac>)
 80013c6:	f003 fa45 	bl	8004854 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <I2Cx_MspInit+0xa8>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <I2Cx_MspInit+0xa8>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <I2Cx_MspInit+0xa8>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <I2Cx_MspInit+0xa8>)
 80013e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <I2Cx_MspInit+0xa8>)
 80013e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <I2Cx_MspInit+0xa8>)
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <I2Cx_MspInit+0xa8>)
 80013f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013f8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	210f      	movs	r1, #15
 80013fe:	2021      	movs	r0, #33	; 0x21
 8001400:	f002 fce7 	bl	8003dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001404:	2021      	movs	r0, #33	; 0x21
 8001406:	f002 fd00 	bl	8003e0a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	210f      	movs	r1, #15
 800140e:	2022      	movs	r0, #34	; 0x22
 8001410:	f002 fcdf 	bl	8003dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001414:	2022      	movs	r0, #34	; 0x22
 8001416:	f002 fcf8 	bl	8003e0a <HAL_NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400

0800142c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <I2Cx_Init+0x54>)
 8001438:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <I2Cx_Init+0x58>)
 800143e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff89 	bl	800137c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f003 fcc9 	bl	8004e02 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001470:	2100      	movs	r1, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f004 f9ce 	bl	8005814 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40005800 	.word	0x40005800
 8001484:	00702681 	.word	0x00702681

08001488 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af04      	add	r7, sp, #16
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4603      	mov	r3, r0
 8001498:	72fb      	strb	r3, [r7, #11]
 800149a:	460b      	mov	r3, r1
 800149c:	813b      	strh	r3, [r7, #8]
 800149e:	4613      	mov	r3, r2
 80014a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	b299      	uxth	r1, r3
 80014aa:	88f8      	ldrh	r0, [r7, #6]
 80014ac:	893a      	ldrh	r2, [r7, #8]
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4603      	mov	r3, r0
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f003 fe72 	bl	80051a8 <HAL_I2C_Mem_Read>
 80014c4:	4603      	mov	r3, r0
 80014c6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d004      	beq.n	80014d8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	4619      	mov	r1, r3
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f832 	bl	800153c <I2Cx_Error>
  }
  return status;
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b08a      	sub	sp, #40	; 0x28
 80014e6:	af04      	add	r7, sp, #16
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	72fb      	strb	r3, [r7, #11]
 80014f4:	460b      	mov	r3, r1
 80014f6:	813b      	strh	r3, [r7, #8]
 80014f8:	4613      	mov	r3, r2
 80014fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	b299      	uxth	r1, r3
 8001504:	88f8      	ldrh	r0, [r7, #6]
 8001506:	893a      	ldrh	r2, [r7, #8]
 8001508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4603      	mov	r3, r0
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f003 fd31 	bl	8004f80 <HAL_I2C_Mem_Write>
 800151e:	4603      	mov	r3, r0
 8001520:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f805 	bl	800153c <I2Cx_Error>
  }
  return status;
 8001532:	7dfb      	ldrb	r3, [r7, #23]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f003 fce9 	bl	8004f20 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ff6c 	bl	800142c <I2Cx_Init>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <SENSOR_IO_Init+0x10>)
 8001562:	f7ff ff63 	bl	800142c <I2Cx_Init>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20001af0 	.word	0x20001af0

08001570 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af02      	add	r7, sp, #8
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	460b      	mov	r3, r1
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	4613      	mov	r3, r2
 8001580:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	b29a      	uxth	r2, r3
 8001586:	79f9      	ldrb	r1, [r7, #7]
 8001588:	2301      	movs	r3, #1
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	1d7b      	adds	r3, r7, #5
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <SENSOR_IO_Write+0x30>)
 8001594:	f7ff ffa5 	bl	80014e2 <I2Cx_WriteMultiple>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20001af0 	.word	0x20001af0

080015a4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	79f9      	ldrb	r1, [r7, #7]
 80015be:	2301      	movs	r3, #1
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	f107 030f 	add.w	r3, r7, #15
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2301      	movs	r3, #1
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <SENSOR_IO_Read+0x38>)
 80015cc:	f7ff ff5c 	bl	8001488 <I2Cx_ReadMultiple>

  return read_value;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20001af0 	.word	0x20001af0

080015e0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	603a      	str	r2, [r7, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	460b      	mov	r3, r1
 80015f0:	71bb      	strb	r3, [r7, #6]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80015f6:	79bb      	ldrb	r3, [r7, #6]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	79f9      	ldrb	r1, [r7, #7]
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2301      	movs	r3, #1
 8001606:	4804      	ldr	r0, [pc, #16]	; (8001618 <SENSOR_IO_ReadMultiple+0x38>)
 8001608:	f7ff ff3e 	bl	8001488 <I2Cx_ReadMultiple>
 800160c:	4603      	mov	r3, r0
 800160e:	b29b      	uxth	r3, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20001af0 	.word	0x20001af0

0800161c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001626:	2300      	movs	r3, #0
 8001628:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <BSP_ACCELERO_Init+0x74>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	4798      	blx	r3
 8001630:	4603      	mov	r3, r0
 8001632:	2b6a      	cmp	r3, #106	; 0x6a
 8001634:	d002      	beq.n	800163c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e024      	b.n	8001686 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <BSP_ACCELERO_Init+0x78>)
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <BSP_ACCELERO_Init+0x74>)
 8001640:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001642:	2330      	movs	r3, #48	; 0x30
 8001644:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800164a:	2300      	movs	r3, #0
 800164c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800165a:	797a      	ldrb	r2, [r7, #5]
 800165c:	7abb      	ldrb	r3, [r7, #10]
 800165e:	4313      	orrs	r3, r2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001664:	7a3b      	ldrb	r3, [r7, #8]
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	b2db      	uxtb	r3, r3
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b21a      	sxth	r2, r3
 8001670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <BSP_ACCELERO_Init+0x78>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	89ba      	ldrh	r2, [r7, #12]
 8001682:	4610      	mov	r0, r2
 8001684:	4798      	blx	r3
  }  

  return ret;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000000 	.word	0x20000000
 8001694:	20000078 	.word	0x20000078

08001698 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d009      	beq.n	80016bc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000078 	.word	0x20000078

080016c8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80016ce:	4b32      	ldr	r3, [pc, #200]	; (8001798 <BSP_QSPI_Init+0xd0>)
 80016d0:	4a32      	ldr	r2, [pc, #200]	; (800179c <BSP_QSPI_Init+0xd4>)
 80016d2:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80016d4:	4830      	ldr	r0, [pc, #192]	; (8001798 <BSP_QSPI_Init+0xd0>)
 80016d6:	f004 fa0f 	bl	8005af8 <HAL_QSPI_DeInit>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e054      	b.n	800178e <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80016e4:	f000 f964 	bl	80019b0 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <BSP_QSPI_Init+0xd0>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <BSP_QSPI_Init+0xd0>)
 80016f0:	2204      	movs	r2, #4
 80016f2:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <BSP_QSPI_Init+0xd0>)
 80016f6:	2210      	movs	r2, #16
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80016fe:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8001712:	2320      	movs	r3, #32
 8001714:	e003      	b.n	800171e <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 800171e:	3b01      	subs	r3, #1
 8001720:	461a      	mov	r2, r3
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <BSP_QSPI_Init+0xd0>)
 8001724:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <BSP_QSPI_Init+0xd0>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <BSP_QSPI_Init+0xd0>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001732:	4819      	ldr	r0, [pc, #100]	; (8001798 <BSP_QSPI_Init+0xd0>)
 8001734:	f004 f96a 	bl	8005a0c <HAL_QSPI_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e025      	b.n	800178e <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8001742:	4815      	ldr	r0, [pc, #84]	; (8001798 <BSP_QSPI_Init+0xd0>)
 8001744:	f000 f974 	bl	8001a30 <QSPI_ResetMemory>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 800174e:	2304      	movs	r3, #4
 8001750:	e01d      	b.n	800178e <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8001752:	2101      	movs	r1, #1
 8001754:	4810      	ldr	r0, [pc, #64]	; (8001798 <BSP_QSPI_Init+0xd0>)
 8001756:	f000 fa35 	bl	8001bc4 <QSPI_QuadMode>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e014      	b.n	800178e <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8001764:	2101      	movs	r1, #1
 8001766:	480c      	ldr	r0, [pc, #48]	; (8001798 <BSP_QSPI_Init+0xd0>)
 8001768:	f000 fad4 	bl	8001d14 <QSPI_HighPerfMode>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00b      	b.n	800178e <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <BSP_QSPI_Init+0xd0>)
 8001778:	2201      	movs	r2, #1
 800177a:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800177c:	4806      	ldr	r0, [pc, #24]	; (8001798 <BSP_QSPI_Init+0xd0>)
 800177e:	f004 f945 	bl	8005a0c <HAL_QSPI_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20001b3c 	.word	0x20001b3c
 800179c:	a0001000 	.word	0xa0001000

080017a0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b092      	sub	sp, #72	; 0x48
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 80017b2:	23eb      	movs	r3, #235	; 0xeb
 80017b4:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 80017b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 80017c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80017d0:	23aa      	movs	r3, #170	; 0xaa
 80017d2:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 80017d4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80017da:	2304      	movs	r3, #4
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80017e6:	2300      	movs	r3, #0
 80017e8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80017ea:	2300      	movs	r3, #0
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4619      	mov	r1, r3
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <BSP_QSPI_Read+0x88>)
 80017fa:	f004 f9a1 	bl	8005b40 <HAL_QSPI_Command>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e00b      	b.n	8001820 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	68f9      	ldr	r1, [r7, #12]
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <BSP_QSPI_Read+0x88>)
 8001810:	f004 fa8b 	bl	8005d2a <HAL_QSPI_Receive>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3748      	adds	r7, #72	; 0x48
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20001b3c 	.word	0x20001b3c

0800182c <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b096      	sub	sp, #88	; 0x58
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001840:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8001842:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	429a      	cmp	r2, r3
 8001848:	d901      	bls.n	800184e <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800185a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8001860:	2338      	movs	r3, #56	; 0x38
 8001862:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001864:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186e:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001870:	2300      	movs	r3, #0
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001874:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001882:	2300      	movs	r3, #0
 8001884:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001886:	2300      	movs	r3, #0
 8001888:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800188a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800188c:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 800188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001892:	4824      	ldr	r0, [pc, #144]	; (8001924 <BSP_QSPI_Write+0xf8>)
 8001894:	f000 f910 	bl	8001ab8 <QSPI_WriteEnable>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e03b      	b.n	800191a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4619      	mov	r1, r3
 80018ac:	481d      	ldr	r0, [pc, #116]	; (8001924 <BSP_QSPI_Write+0xf8>)
 80018ae:	f004 f947 	bl	8005b40 <HAL_QSPI_Command>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e02e      	b.n	800191a <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	4818      	ldr	r0, [pc, #96]	; (8001924 <BSP_QSPI_Write+0xf8>)
 80018c4:	f004 f99a 	bl	8005bfc <HAL_QSPI_Transmit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e023      	b.n	800191a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80018d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80018d6:	4813      	ldr	r0, [pc, #76]	; (8001924 <BSP_QSPI_Write+0xf8>)
 80018d8:	f000 f93a 	bl	8001b50 <QSPI_AutoPollingMemReady>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e019      	b.n	800191a <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80018e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	4413      	add	r3, r2
 80018ec:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80018f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018fe:	429a      	cmp	r2, r3
 8001900:	d203      	bcs.n	800190a <BSP_QSPI_Write+0xde>
 8001902:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	e001      	b.n	800190e <BSP_QSPI_Write+0xe2>
 800190a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190e:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8001910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001914:	429a      	cmp	r2, r3
 8001916:	d3b8      	bcc.n	800188a <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3758      	adds	r7, #88	; 0x58
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20001b3c 	.word	0x20001b3c

08001928 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b090      	sub	sp, #64	; 0x40
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001934:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8001936:	23d8      	movs	r3, #216	; 0xd8
 8001938:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800193a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800195a:	2300      	movs	r3, #0
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800195e:	2300      	movs	r3, #0
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001962:	4812      	ldr	r0, [pc, #72]	; (80019ac <BSP_QSPI_Erase_Block+0x84>)
 8001964:	f000 f8a8 	bl	8001ab8 <QSPI_WriteEnable>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e017      	b.n	80019a2 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4619      	mov	r1, r3
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <BSP_QSPI_Erase_Block+0x84>)
 800197e:	f004 f8df 	bl	8005b40 <HAL_QSPI_Command>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e00a      	b.n	80019a2 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800198c:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001990:	4806      	ldr	r0, [pc, #24]	; (80019ac <BSP_QSPI_Erase_Block+0x84>)
 8001992:	f000 f8dd 	bl	8001b50 <QSPI_AutoPollingMemReady>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3740      	adds	r7, #64	; 0x40
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20001b3c 	.word	0x20001b3c

080019b0 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ba:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6513      	str	r3, [r2, #80]	; 0x50
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <BSP_QSPI_MspInit+0x78>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80019fe:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001a02:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a10:	230a      	movs	r3, #10
 8001a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4804      	ldr	r0, [pc, #16]	; (8001a2c <BSP_QSPI_MspInit+0x7c>)
 8001a1c:	f002 ff1a 	bl	8004854 <HAL_GPIO_Init>
}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48001000 	.word	0x48001000

08001a30 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b090      	sub	sp, #64	; 0x40
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001a3e:	2366      	movs	r3, #102	; 0x66
 8001a40:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4619      	mov	r1, r3
 8001a68:	4812      	ldr	r0, [pc, #72]	; (8001ab4 <QSPI_ResetMemory+0x84>)
 8001a6a:	f004 f869 	bl	8005b40 <HAL_QSPI_Command>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e019      	b.n	8001aac <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001a78:	2399      	movs	r3, #153	; 0x99
 8001a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4619      	mov	r1, r3
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <QSPI_ResetMemory+0x84>)
 8001a88:	f004 f85a 	bl	8005b40 <HAL_QSPI_Command>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00a      	b.n	8001aac <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001a96:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a9a:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <QSPI_ResetMemory+0x84>)
 8001a9c:	f000 f858 	bl	8001b50 <QSPI_AutoPollingMemReady>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3740      	adds	r7, #64	; 0x40
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20001b3c 	.word	0x20001b3c

08001ab8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b096      	sub	sp, #88	; 0x58
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4619      	mov	r1, r3
 8001af0:	4816      	ldr	r0, [pc, #88]	; (8001b4c <QSPI_WriteEnable+0x94>)
 8001af2:	f004 f825 	bl	8005b40 <HAL_QSPI_Command>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e020      	b.n	8001b42 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8001b00:	2302      	movs	r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8001b04:	2302      	movs	r3, #2
 8001b06:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001b10:	2310      	movs	r3, #16
 8001b12:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001b14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b18:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b24:	f107 0208 	add.w	r2, r7, #8
 8001b28:	f107 0120 	add.w	r1, r7, #32
 8001b2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <QSPI_WriteEnable+0x94>)
 8001b32:	f004 f99c 	bl	8005e6e <HAL_QSPI_AutoPolling>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3758      	adds	r7, #88	; 0x58
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20001b3c 	.word	0x20001b3c

08001b50 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b096      	sub	sp, #88	; 0x58
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001b60:	2305      	movs	r3, #5
 8001b62:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b70:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001b92:	2310      	movs	r3, #16
 8001b94:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9a:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001b9c:	f107 0208 	add.w	r2, r7, #8
 8001ba0:	f107 0120 	add.w	r1, r7, #32
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <QSPI_AutoPollingMemReady+0x70>)
 8001ba8:	f004 f961 	bl	8005e6e <HAL_QSPI_AutoPolling>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3758      	adds	r7, #88	; 0x58
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20001b3c 	.word	0x20001b3c

08001bc4 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b092      	sub	sp, #72	; 0x48
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001bec:	2301      	movs	r3, #1
 8001bee:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4619      	mov	r1, r3
 8001c06:	4842      	ldr	r0, [pc, #264]	; (8001d10 <QSPI_QuadMode+0x14c>)
 8001c08:	f003 ff9a 	bl	8005b40 <HAL_QSPI_Command>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e077      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4619      	mov	r1, r3
 8001c20:	483b      	ldr	r0, [pc, #236]	; (8001d10 <QSPI_QuadMode+0x14c>)
 8001c22:	f004 f882 	bl	8005d2a <HAL_QSPI_Receive>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e06a      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001c30:	4837      	ldr	r0, [pc, #220]	; (8001d10 <QSPI_QuadMode+0x14c>)
 8001c32:	f7ff ff41 	bl	8001ab8 <QSPI_WriteEnable>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e062      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d105      	bne.n	8001c52 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e004      	b.n	8001c5c <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4829      	ldr	r0, [pc, #164]	; (8001d10 <QSPI_QuadMode+0x14c>)
 8001c6c:	f003 ff68 	bl	8005b40 <HAL_QSPI_Command>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e045      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c7a:	f107 030f 	add.w	r3, r7, #15
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4619      	mov	r1, r3
 8001c84:	4822      	ldr	r0, [pc, #136]	; (8001d10 <QSPI_QuadMode+0x14c>)
 8001c86:	f003 ffb9 	bl	8005bfc <HAL_QSPI_Transmit>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e038      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001c94:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c98:	481d      	ldr	r0, [pc, #116]	; (8001d10 <QSPI_QuadMode+0x14c>)
 8001c9a:	f7ff ff59 	bl	8001b50 <QSPI_AutoPollingMemReady>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e02e      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001ca8:	2305      	movs	r3, #5
 8001caa:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4816      	ldr	r0, [pc, #88]	; (8001d10 <QSPI_QuadMode+0x14c>)
 8001cb8:	f003 ff42 	bl	8005b40 <HAL_QSPI_Command>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e01f      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cc6:	f107 030f 	add.w	r3, r7, #15
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <QSPI_QuadMode+0x14c>)
 8001cd2:	f004 f82a 	bl	8005d2a <HAL_QSPI_Receive>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e012      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <QSPI_QuadMode+0x12c>
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d007      	beq.n	8001d00 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3748      	adds	r7, #72	; 0x48
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20001b3c 	.word	0x20001b3c

08001d14 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b092      	sub	sp, #72	; 0x48
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001d26:	2305      	movs	r3, #5
 8001d28:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001d44:	2300      	movs	r3, #0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4619      	mov	r1, r3
 8001d56:	4853      	ldr	r0, [pc, #332]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001d58:	f003 fef2 	bl	8005b40 <HAL_QSPI_Command>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e09a      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4619      	mov	r1, r3
 8001d70:	484c      	ldr	r0, [pc, #304]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001d72:	f003 ffda 	bl	8005d2a <HAL_QSPI_Receive>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e08d      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001d80:	2315      	movs	r3, #21
 8001d82:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001d84:	2302      	movs	r3, #2
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4619      	mov	r1, r3
 8001d92:	4844      	ldr	r0, [pc, #272]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001d94:	f003 fed4 	bl	8005b40 <HAL_QSPI_Command>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e07c      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	3301      	adds	r3, #1
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4619      	mov	r1, r3
 8001dae:	483d      	ldr	r0, [pc, #244]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001db0:	f003 ffbb 	bl	8005d2a <HAL_QSPI_Receive>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e06e      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001dbe:	4839      	ldr	r0, [pc, #228]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001dc0:	f7ff fe7a 	bl	8001ab8 <QSPI_WriteEnable>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e066      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	73bb      	strb	r3, [r7, #14]
 8001dde:	e004      	b.n	8001dea <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	f023 0302 	bic.w	r3, r3, #2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001dea:	2301      	movs	r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8001dee:	2303      	movs	r3, #3
 8001df0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4829      	ldr	r0, [pc, #164]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001dfe:	f003 fe9f 	bl	8005b40 <HAL_QSPI_Command>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e047      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4619      	mov	r1, r3
 8001e16:	4823      	ldr	r0, [pc, #140]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001e18:	f003 fef0 	bl	8005bfc <HAL_QSPI_Transmit>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e03a      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001e26:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e2a:	481e      	ldr	r0, [pc, #120]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001e2c:	f7ff fe90 	bl	8001b50 <QSPI_AutoPollingMemReady>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e030      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001e3a:	2315      	movs	r3, #21
 8001e3c:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4815      	ldr	r0, [pc, #84]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001e4e:	f003 fe77 	bl	8005b40 <HAL_QSPI_Command>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e01f      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4619      	mov	r1, r3
 8001e66:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <QSPI_HighPerfMode+0x190>)
 8001e68:	f003 ff5f 	bl	8005d2a <HAL_QSPI_Receive>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e012      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <QSPI_HighPerfMode+0x172>
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d007      	beq.n	8001e96 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001e86:	7b7b      	ldrb	r3, [r7, #13]
 8001e88:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3748      	adds	r7, #72	; 0x48
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20001b3c 	.word	0x20001b3c

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_MspInit+0x44>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_MspInit+0x44>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_MspInit+0x44>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x44>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x44>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x44>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_ADC_MspInit+0x74>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d123      	bne.n	8001f5a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_ADC_MspInit+0x78>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <HAL_ADC_MspInit+0x78>)
 8001f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_ADC_MspInit+0x78>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_ADC_MspInit+0x78>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <HAL_ADC_MspInit+0x78>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_ADC_MspInit+0x78>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f42:	2320      	movs	r3, #32
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f46:	230b      	movs	r3, #11
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4805      	ldr	r0, [pc, #20]	; (8001f6c <HAL_ADC_MspInit+0x7c>)
 8001f56:	f002 fc7d 	bl	8004854 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	50040000 	.word	0x50040000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	48000800 	.word	0x48000800

08001f70 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <HAL_DAC_MspInit+0xc8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d14d      	bne.n	800202e <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_DAC_MspInit+0xcc>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4a29      	ldr	r2, [pc, #164]	; (800203c <HAL_DAC_MspInit+0xcc>)
 8001f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_DAC_MspInit+0xcc>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_DAC_MspInit+0xcc>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_DAC_MspInit+0xcc>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_DAC_MspInit+0xcc>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f002 fc3c 	bl	8004854 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8001fde:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_DAC_MspInit+0xd4>)
 8001fe0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8001fe4:	2206      	movs	r2, #6
 8001fe6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8001fea:	2210      	movs	r2, #16
 8001fec:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8002008:	2220      	movs	r2, #32
 800200a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8002014:	f002 f9e8 	bl	80043e8 <HAL_DMA_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800201e:	f7ff f9a1 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	4a05      	ldr	r2, [pc, #20]	; (8002040 <HAL_DAC_MspInit+0xd0>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40007400 	.word	0x40007400
 800203c:	40021000 	.word	0x40021000
 8002040:	2000107c 	.word	0x2000107c
 8002044:	40020030 	.word	0x40020030

08002048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_I2C_MspInit+0x7c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d128      	bne.n	80020bc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_I2C_MspInit+0x80>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <HAL_I2C_MspInit+0x80>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_I2C_MspInit+0x80>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002082:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002088:	2312      	movs	r3, #18
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208c:	2301      	movs	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002094:	2304      	movs	r3, #4
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	480b      	ldr	r0, [pc, #44]	; (80020cc <HAL_I2C_MspInit+0x84>)
 80020a0:	f002 fbd8 	bl	8004854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_I2C_MspInit+0x80>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_I2C_MspInit+0x80>)
 80020aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_I2C_MspInit+0x80>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005800 	.word	0x40005800
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000400 	.word	0x48000400

080020d0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0b      	ldr	r2, [pc, #44]	; (800210c <HAL_I2C_MspDeInit+0x3c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10f      	bne.n	8002102 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_I2C_MspDeInit+0x40>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_I2C_MspDeInit+0x40>)
 80020e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80020ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f2:	4808      	ldr	r0, [pc, #32]	; (8002114 <HAL_I2C_MspDeInit+0x44>)
 80020f4:	f002 fd56 	bl	8004ba4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80020f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <HAL_I2C_MspDeInit+0x44>)
 80020fe:	f002 fd51 	bl	8004ba4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40005800 	.word	0x40005800
 8002110:	40021000 	.word	0x40021000
 8002114:	48000400 	.word	0x48000400

08002118 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a17      	ldr	r2, [pc, #92]	; (8002194 <HAL_QSPI_MspInit+0x7c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d128      	bne.n	800218c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_QSPI_MspInit+0x80>)
 800213c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213e:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_QSPI_MspInit+0x80>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6513      	str	r3, [r2, #80]	; 0x50
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_QSPI_MspInit+0x80>)
 8002148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_QSPI_MspInit+0x80>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_QSPI_MspInit+0x80>)
 8002158:	f043 0310 	orr.w	r3, r3, #16
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_QSPI_MspInit+0x80>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800216a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800216e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800217c:	230a      	movs	r3, #10
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_QSPI_MspInit+0x84>)
 8002188:	f002 fb64 	bl	8004854 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	; 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	a0001000 	.word	0xa0001000
 8002198:	40021000 	.word	0x40021000
 800219c:	48001000 	.word	0x48001000

080021a0 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_QSPI_MspDeInit+0x30>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10a      	bne.n	80021c8 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_QSPI_MspDeInit+0x34>)
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_QSPI_MspDeInit+0x34>)
 80021b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021bc:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80021be:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_QSPI_MspDeInit+0x38>)
 80021c4:	f002 fcee 	bl	8004ba4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	a0001000 	.word	0xa0001000
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48001000 	.word	0x48001000

080021dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d113      	bne.n	8002216 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_TIM_Base_MspInit+0x44>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_TIM_Base_MspInit+0x44>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6593      	str	r3, [r2, #88]	; 0x58
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_TIM_Base_MspInit+0x44>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	201c      	movs	r0, #28
 800220c:	f001 fde1 	bl	8003dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002210:	201c      	movs	r0, #28
 8002212:	f001 fdfa 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_UART_MspInit+0x80>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d129      	bne.n	800229a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_UART_MspInit+0x84>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_UART_MspInit+0x84>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002250:	6613      	str	r3, [r2, #96]	; 0x60
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_MspInit+0x84>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_UART_MspInit+0x84>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_UART_MspInit+0x84>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_UART_MspInit+0x84>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002276:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800227a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002288:	2307      	movs	r3, #7
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002296:	f002 fadd 	bl	8004854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	; 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40013800 	.word	0x40013800
 80022a8:	40021000 	.word	0x40021000

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <MemManage_Handler+0x4>

080022c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002300:	f000 f8d2 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}

08002308 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <DMA1_Channel3_IRQHandler+0x10>)
 800230e:	f002 f9c1 	bl	8004694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000107c 	.word	0x2000107c

0800231c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <TIM2_IRQHandler+0x10>)
 8002322:	f005 fbb5 	bl	8007a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20001210 	.word	0x20001210

08002330 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002334:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002338:	f002 fd40 	bl	8004dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <SystemInit+0x64>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <SystemInit+0x64>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <SystemInit+0x68>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <SystemInit+0x68>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <SystemInit+0x68>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <SystemInit+0x68>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <SystemInit+0x68>)
 800236c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002370:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002374:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <SystemInit+0x68>)
 8002378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800237c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <SystemInit+0x68>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <SystemInit+0x68>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <SystemInit+0x68>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SystemInit+0x64>)
 8002392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002396:	609a      	str	r2, [r3, #8]
#endif
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	40021000 	.word	0x40021000

080023ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023b0:	f7ff ffc6 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023b6:	e003      	b.n	80023c0 <LoopCopyDataInit>

080023b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023be:	3104      	adds	r1, #4

080023c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023c0:	480a      	ldr	r0, [pc, #40]	; (80023ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023c8:	d3f6      	bcc.n	80023b8 <CopyDataInit>
	ldr	r2, =_sbss
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023cc:	e002      	b.n	80023d4 <LoopFillZerobss>

080023ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023d0:	f842 3b04 	str.w	r3, [r2], #4

080023d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <LoopForever+0x16>)
	cmp	r2, r3
 80023d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023d8:	d3f9      	bcc.n	80023ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023da:	f006 fbbd 	bl	8008b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023de:	f7fe f98d 	bl	80006fc <main>

080023e2 <LoopForever>:

LoopForever:
    b LoopForever
 80023e2:	e7fe      	b.n	80023e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023e4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023e8:	08009424 	.word	0x08009424
	ldr	r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023f0:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 80023f4:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 80023f8:	20001b84 	.word	0x20001b84

080023fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023fc:	e7fe      	b.n	80023fc <ADC1_2_IRQHandler>

080023fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002408:	2003      	movs	r0, #3
 800240a:	f001 fcd7 	bl	8003dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800240e:	2000      	movs	r0, #0
 8002410:	f000 f80e 	bl	8002430 <HAL_InitTick>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	e001      	b.n	8002424 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002420:	f7ff fd42 	bl	8001ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002424:	79fb      	ldrb	r3, [r7, #7]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_InitTick+0x6c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d023      	beq.n	800248c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <HAL_InitTick+0x70>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <HAL_InitTick+0x6c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	fbb3 f3f1 	udiv	r3, r3, r1
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f001 fce3 	bl	8003e26 <HAL_SYSTICK_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d809      	bhi.n	8002480 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246c:	2200      	movs	r2, #0
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f001 fcad 	bl	8003dd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002478:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <HAL_InitTick+0x74>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e007      	b.n	8002490 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e004      	b.n	8002490 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	e001      	b.n	8002490 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000040 	.word	0x20000040
 80024a0:	20000038 	.word	0x20000038
 80024a4:	2000003c 	.word	0x2000003c

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000040 	.word	0x20000040
 80024cc:	20001b80 	.word	0x20001b80

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20001b80 	.word	0x20001b80

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff ffee 	bl	80024d0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_Delay+0x40>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffde 	bl	80024d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000040 	.word	0x20000040

0800252c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	609a      	str	r2, [r3, #8]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3360      	adds	r3, #96	; 0x60
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <LL_ADC_SetOffset+0x44>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025cc:	bf00      	nop
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	03fff000 	.word	0x03fff000

080025dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3360      	adds	r3, #96	; 0x60
 80025ea:	461a      	mov	r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3360      	adds	r3, #96	; 0x60
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	431a      	orrs	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3330      	adds	r3, #48	; 0x30
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	4413      	add	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	211f      	movs	r1, #31
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	0e9b      	lsrs	r3, r3, #26
 800269c:	f003 011f 	and.w	r1, r3, #31
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	431a      	orrs	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3314      	adds	r3, #20
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	0e5b      	lsrs	r3, r3, #25
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	4413      	add	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	0d1b      	lsrs	r3, r3, #20
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2107      	movs	r1, #7
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	401a      	ands	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0d1b      	lsrs	r3, r3, #20
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	431a      	orrs	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	43db      	mvns	r3, r3
 800272e:	401a      	ands	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0318 	and.w	r3, r3, #24
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002738:	40d9      	lsrs	r1, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	400b      	ands	r3, r1
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	431a      	orrs	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	0007ffff 	.word	0x0007ffff

0800275c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 031f 	and.w	r3, r3, #31
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6093      	str	r3, [r2, #8]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027cc:	d101      	bne.n	80027d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800281c:	d101      	bne.n	8002822 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <LL_ADC_IsEnabled+0x18>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <LL_ADC_IsEnabled+0x1a>
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d101      	bne.n	80028be <LL_ADC_IsDisableOngoing+0x18>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <LL_ADC_IsDisableOngoing+0x1a>
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b04      	cmp	r3, #4
 800292e:	d101      	bne.n	8002934 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002952:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b08      	cmp	r3, #8
 800297c:	d101      	bne.n	8002982 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e134      	b.n	8002c14 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fa99 	bl	8001ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fef1 	bl	80027b8 <LL_ADC_IsDeepPowerDownEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fed7 	bl	8002794 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff0c 	bl	8002808 <LL_ADC_IsInternalRegulatorEnabled>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d113      	bne.n	8002a1e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fef0 	bl	80027e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a00:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <HAL_ADC_Init+0x28c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	4a86      	ldr	r2, [pc, #536]	; (8002c20 <HAL_ADC_Init+0x290>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a10:	e002      	b.n	8002a18 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f9      	bne.n	8002a12 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fef0 	bl	8002808 <LL_ADC_IsInternalRegulatorEnabled>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0210 	orr.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff64 	bl	800291c <LL_ADC_REG_IsConversionOngoing>
 8002a54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 80cf 	bne.w	8002c02 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 80cb 	bne.w	8002c02 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a74:	f043 0202 	orr.w	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fefd 	bl	8002880 <LL_ADC_IsEnabled>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d115      	bne.n	8002ab8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a8c:	4865      	ldr	r0, [pc, #404]	; (8002c24 <HAL_ADC_Init+0x294>)
 8002a8e:	f7ff fef7 	bl	8002880 <LL_ADC_IsEnabled>
 8002a92:	4604      	mov	r4, r0
 8002a94:	4864      	ldr	r0, [pc, #400]	; (8002c28 <HAL_ADC_Init+0x298>)
 8002a96:	f7ff fef3 	bl	8002880 <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	431c      	orrs	r4, r3
 8002a9e:	4863      	ldr	r0, [pc, #396]	; (8002c2c <HAL_ADC_Init+0x29c>)
 8002aa0:	f7ff feee 	bl	8002880 <LL_ADC_IsEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	485f      	ldr	r0, [pc, #380]	; (8002c30 <HAL_ADC_Init+0x2a0>)
 8002ab4:	f7ff fd3a 	bl	800252c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7e5b      	ldrb	r3, [r3, #25]
 8002abc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ac8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ace:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d106      	bne.n	8002af4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	3b01      	subs	r3, #1
 8002aec:	045b      	lsls	r3, r3, #17
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d009      	beq.n	8002b10 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_ADC_Init+0x2a4>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	69b9      	ldr	r1, [r7, #24]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fef7 	bl	800291c <LL_ADC_REG_IsConversionOngoing>
 8002b2e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff18 	bl	800296a <LL_ADC_INJ_IsConversionOngoing>
 8002b3a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d13d      	bne.n	8002bbe <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d13a      	bne.n	8002bbe <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b4c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b54:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b64:	f023 0302 	bic.w	r3, r3, #2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	69b9      	ldr	r1, [r7, #24]
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d118      	bne.n	8002bae <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b98:	4311      	orrs	r1, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	611a      	str	r2, [r3, #16]
 8002bac:	e007      	b.n	8002bbe <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10c      	bne.n	8002be0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f023 010f 	bic.w	r1, r3, #15
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bde:	e007      	b.n	8002bf0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 020f 	bic.w	r2, r2, #15
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	f023 0303 	bic.w	r3, r3, #3
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
 8002c00:	e007      	b.n	8002c12 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3724      	adds	r7, #36	; 0x24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd90      	pop	{r4, r7, pc}
 8002c1c:	20000038 	.word	0x20000038
 8002c20:	053e2d63 	.word	0x053e2d63
 8002c24:	50040000 	.word	0x50040000
 8002c28:	50040100 	.word	0x50040100
 8002c2c:	50040200 	.word	0x50040200
 8002c30:	50040300 	.word	0x50040300
 8002c34:	fff0c007 	.word	0xfff0c007

08002c38 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c40:	4857      	ldr	r0, [pc, #348]	; (8002da0 <HAL_ADC_Start+0x168>)
 8002c42:	f7ff fd8b 	bl	800275c <LL_ADC_GetMultimode>
 8002c46:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fe65 	bl	800291c <LL_ADC_REG_IsConversionOngoing>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 809c 	bne.w	8002d92 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_Start+0x30>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e097      	b.n	8002d98 <HAL_ADC_Start+0x160>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fe4f 	bl	8003914 <ADC_Enable>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f040 8083 	bne.w	8002d88 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a42      	ldr	r2, [pc, #264]	; (8002da4 <HAL_ADC_Start+0x16c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d002      	beq.n	8002ca6 <HAL_ADC_Start+0x6e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	e000      	b.n	8002ca8 <HAL_ADC_Start+0x70>
 8002ca6:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <HAL_ADC_Start+0x170>)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d002      	beq.n	8002cb6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d106      	bne.n	8002cde <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	f023 0206 	bic.w	r2, r3, #6
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58
 8002cdc:	e002      	b.n	8002ce4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	221c      	movs	r2, #28
 8002cea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2a      	ldr	r2, [pc, #168]	; (8002da4 <HAL_ADC_Start+0x16c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d002      	beq.n	8002d04 <HAL_ADC_Start+0xcc>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	e000      	b.n	8002d06 <HAL_ADC_Start+0xce>
 8002d04:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_ADC_Start+0x170>)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d008      	beq.n	8002d20 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d002      	beq.n	8002d20 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b09      	cmp	r3, #9
 8002d1e:	d114      	bne.n	8002d4a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fdc2 	bl	80028cc <LL_ADC_REG_StartConversion>
 8002d48:	e025      	b.n	8002d96 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <HAL_ADC_Start+0x16c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d002      	beq.n	8002d66 <HAL_ADC_Start+0x12e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_Start+0x130>
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_ADC_Start+0x170>)
 8002d68:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00f      	beq.n	8002d96 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
 8002d86:	e006      	b.n	8002d96 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d90:	e001      	b.n	8002d96 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
 8002d94:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	50040300 	.word	0x50040300
 8002da4:	50040100 	.word	0x50040100
 8002da8:	50040000 	.word	0x50040000

08002dac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_Stop+0x16>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e023      	b.n	8002e0a <HAL_ADC_Stop+0x5e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002dca:	2103      	movs	r1, #3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fced 	bl	80037ac <ADC_ConversionStop>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d111      	bne.n	8002e00 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fdf3 	bl	80039c8 <ADC_Disable>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e1e:	4862      	ldr	r0, [pc, #392]	; (8002fa8 <HAL_ADC_PollForConversion+0x194>)
 8002e20:	f7ff fc9c 	bl	800275c <LL_ADC_GetMultimode>
 8002e24:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d102      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e2e:	2308      	movs	r3, #8
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e02a      	b.n	8002e8a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d002      	beq.n	8002e46 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b09      	cmp	r3, #9
 8002e44:	d111      	bne.n	8002e6a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e09d      	b.n	8002fa0 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e64:	2304      	movs	r3, #4
 8002e66:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e68:	e00f      	b.n	8002e8a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e6a:	484f      	ldr	r0, [pc, #316]	; (8002fa8 <HAL_ADC_PollForConversion+0x194>)
 8002e6c:	f7ff fc84 	bl	8002778 <LL_ADC_GetMultiDMATransfer>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e08c      	b.n	8002fa0 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e86:	2304      	movs	r3, #4
 8002e88:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e8a:	f7ff fb21 	bl	80024d0 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e90:	e01a      	b.n	8002ec8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d016      	beq.n	8002ec8 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e9a:	f7ff fb19 	bl	80024d0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <HAL_ADC_PollForConversion+0x9c>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e06b      	b.n	8002fa0 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0dd      	beq.n	8002e92 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fba9 	bl	800263e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01c      	beq.n	8002f2c <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	7e5b      	ldrb	r3, [r3, #25]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d118      	bne.n	8002f2c <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d111      	bne.n	8002f2c <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <HAL_ADC_PollForConversion+0x198>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d002      	beq.n	8002f3c <HAL_ADC_PollForConversion+0x128>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e000      	b.n	8002f3e <HAL_ADC_PollForConversion+0x12a>
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_ADC_PollForConversion+0x19c>)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d008      	beq.n	8002f58 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d002      	beq.n	8002f58 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b09      	cmp	r3, #9
 8002f56:	d104      	bne.n	8002f62 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e00c      	b.n	8002f7c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_ADC_PollForConversion+0x198>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d002      	beq.n	8002f72 <HAL_ADC_PollForConversion+0x15e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	e000      	b.n	8002f74 <HAL_ADC_PollForConversion+0x160>
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_ADC_PollForConversion+0x19c>)
 8002f74:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d104      	bne.n	8002f8c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2208      	movs	r2, #8
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e008      	b.n	8002f9e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	50040300 	.word	0x50040300
 8002fac:	50040100 	.word	0x50040100
 8002fb0:	50040000 	.word	0x50040000

08002fb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b0b6      	sub	sp, #216	; 0xd8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x22>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e3c6      	b.n	8003780 <HAL_ADC_ConfigChannel+0x7b0>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fc8c 	bl	800291c <LL_ADC_REG_IsConversionOngoing>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 83a7 	bne.w	800375a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b05      	cmp	r3, #5
 8003012:	d824      	bhi.n	800305e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	3b02      	subs	r3, #2
 800301a:	2b03      	cmp	r3, #3
 800301c:	d81b      	bhi.n	8003056 <HAL_ADC_ConfigChannel+0x86>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_ADC_ConfigChannel+0x54>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003035 	.word	0x08003035
 8003028:	0800303d 	.word	0x0800303d
 800302c:	08003045 	.word	0x08003045
 8003030:	0800304d 	.word	0x0800304d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	220c      	movs	r2, #12
 8003038:	605a      	str	r2, [r3, #4]
          break;
 800303a:	e011      	b.n	8003060 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2212      	movs	r2, #18
 8003040:	605a      	str	r2, [r3, #4]
          break;
 8003042:	e00d      	b.n	8003060 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2218      	movs	r2, #24
 8003048:	605a      	str	r2, [r3, #4]
          break;
 800304a:	e009      	b.n	8003060 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003052:	605a      	str	r2, [r3, #4]
          break;
 8003054:	e004      	b.n	8003060 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2206      	movs	r2, #6
 800305a:	605a      	str	r2, [r3, #4]
          break;
 800305c:	e000      	b.n	8003060 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800305e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	f7ff faf9 	bl	8002664 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fc50 	bl	800291c <LL_ADC_REG_IsConversionOngoing>
 800307c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fc70 	bl	800296a <LL_ADC_INJ_IsConversionOngoing>
 800308a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800308e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 81a6 	bne.w	80033e4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 81a1 	bne.w	80033e4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f7ff fb04 	bl	80026bc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	08db      	lsrs	r3, r3, #3
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d00a      	beq.n	80030ec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6919      	ldr	r1, [r3, #16]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030e6:	f7ff fa55 	bl	8002594 <LL_ADC_SetOffset>
 80030ea:	e17b      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fa72 	bl	80025dc <LL_ADC_GetOffsetChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10a      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x148>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fa67 	bl	80025dc <LL_ADC_GetOffsetChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	f003 021f 	and.w	r2, r3, #31
 8003116:	e01e      	b.n	8003156 <HAL_ADC_ConfigChannel+0x186>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fa5c 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800313a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800313e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e004      	b.n	8003154 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 800314a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_ADC_ConfigChannel+0x19e>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0e9b      	lsrs	r3, r3, #26
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	e018      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x1d0>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800318a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003192:	2320      	movs	r3, #32
 8003194:	e004      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d106      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fa2b 	bl	8002608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2101      	movs	r1, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fa0f 	bl	80025dc <LL_ADC_GetOffsetChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_ADC_ConfigChannel+0x20e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fa04 	bl	80025dc <LL_ADC_GetOffsetChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	e01e      	b.n	800321c <HAL_ADC_ConfigChannel+0x24c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f9f9 	bl	80025dc <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80031fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e004      	b.n	800321a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x264>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	e018      	b.n	8003266 <HAL_ADC_ConfigChannel+0x296>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003248:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800324c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003258:	2320      	movs	r3, #32
 800325a:	e004      	b.n	8003266 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800325c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003266:	429a      	cmp	r2, r3
 8003268:	d106      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff f9c8 	bl	8002608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff f9ac 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8003284:	4603      	mov	r3, r0
 8003286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x2d4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff f9a1 	bl	80025dc <LL_ADC_GetOffsetChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	0e9b      	lsrs	r3, r3, #26
 800329e:	f003 021f 	and.w	r2, r3, #31
 80032a2:	e01e      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x312>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2102      	movs	r1, #2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f996 	bl	80025dc <LL_ADC_GetOffsetChannel>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80032d2:	2320      	movs	r3, #32
 80032d4:	e004      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80032d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x32a>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	0e9b      	lsrs	r3, r3, #26
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	e016      	b.n	8003328 <HAL_ADC_ConfigChannel+0x358>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800330c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800330e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800331a:	2320      	movs	r3, #32
 800331c:	e004      	b.n	8003328 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800331e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	2102      	movs	r1, #2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f967 	bl	8002608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2103      	movs	r1, #3
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f94b 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x396>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2103      	movs	r1, #3
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff f940 	bl	80025dc <LL_ADC_GetOffsetChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	e017      	b.n	8003396 <HAL_ADC_ConfigChannel+0x3c6>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2103      	movs	r1, #3
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f935 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800337e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003380:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003388:	2320      	movs	r3, #32
 800338a:	e003      	b.n	8003394 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800338c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x3de>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	e011      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x402>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d106      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	2103      	movs	r1, #3
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff f912 	bl	8002608 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fa49 	bl	8002880 <LL_ADC_IsEnabled>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 813f 	bne.w	8003674 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	f7ff f986 	bl	8002714 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a8e      	ldr	r2, [pc, #568]	; (8003648 <HAL_ADC_ConfigChannel+0x678>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f040 8130 	bne.w	8003674 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <HAL_ADC_ConfigChannel+0x46c>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	3301      	adds	r3, #1
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2b09      	cmp	r3, #9
 8003432:	bf94      	ite	ls
 8003434:	2301      	movls	r3, #1
 8003436:	2300      	movhi	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e019      	b.n	8003470 <HAL_ADC_ConfigChannel+0x4a0>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800344a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800344c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800344e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e003      	b.n	8003460 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3301      	adds	r3, #1
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2b09      	cmp	r3, #9
 8003468:	bf94      	ite	ls
 800346a:	2301      	movls	r3, #1
 800346c:	2300      	movhi	r3, #0
 800346e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003470:	2b00      	cmp	r3, #0
 8003472:	d079      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x4c0>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0e9b      	lsrs	r3, r3, #26
 8003486:	3301      	adds	r3, #1
 8003488:	069b      	lsls	r3, r3, #26
 800348a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800348e:	e015      	b.n	80034bc <HAL_ADC_ConfigChannel+0x4ec>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800349e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80034a8:	2320      	movs	r3, #32
 80034aa:	e003      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80034ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	069b      	lsls	r3, r3, #26
 80034b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x50c>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	3301      	adds	r3, #1
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	e017      	b.n	800350c <HAL_ADC_ConfigChannel+0x53c>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80034f4:	2320      	movs	r3, #32
 80034f6:	e003      	b.n	8003500 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80034f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	ea42 0103 	orr.w	r1, r2, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x562>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	3301      	adds	r3, #1
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	051b      	lsls	r3, r3, #20
 8003530:	e018      	b.n	8003564 <HAL_ADC_ConfigChannel+0x594>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800354a:	2320      	movs	r3, #32
 800354c:	e003      	b.n	8003556 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800354e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003564:	430b      	orrs	r3, r1
 8003566:	e080      	b.n	800366a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x5b4>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	3301      	adds	r3, #1
 800357c:	069b      	lsls	r3, r3, #26
 800357e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003582:	e015      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x5e0>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800359c:	2320      	movs	r3, #32
 800359e:	e003      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	069b      	lsls	r3, r3, #26
 80035ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x600>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	3301      	adds	r3, #1
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2101      	movs	r1, #1
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	e017      	b.n	8003600 <HAL_ADC_ConfigChannel+0x630>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	61fb      	str	r3, [r7, #28]
  return result;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3301      	adds	r3, #1
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2101      	movs	r1, #1
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	ea42 0103 	orr.w	r1, r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10d      	bne.n	800362c <HAL_ADC_ConfigChannel+0x65c>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	3301      	adds	r3, #1
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	3b1e      	subs	r3, #30
 8003624:	051b      	lsls	r3, r3, #20
 8003626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800362a:	e01d      	b.n	8003668 <HAL_ADC_ConfigChannel+0x698>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	613b      	str	r3, [r7, #16]
  return result;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003644:	2320      	movs	r3, #32
 8003646:	e005      	b.n	8003654 <HAL_ADC_ConfigChannel+0x684>
 8003648:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	3301      	adds	r3, #1
 8003656:	f003 021f 	and.w	r2, r3, #31
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	3b1e      	subs	r3, #30
 8003662:	051b      	lsls	r3, r3, #20
 8003664:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003668:	430b      	orrs	r3, r1
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	6892      	ldr	r2, [r2, #8]
 800366e:	4619      	mov	r1, r3
 8003670:	f7ff f824 	bl	80026bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b43      	ldr	r3, [pc, #268]	; (8003788 <HAL_ADC_ConfigChannel+0x7b8>)
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d079      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003680:	4842      	ldr	r0, [pc, #264]	; (800378c <HAL_ADC_ConfigChannel+0x7bc>)
 8003682:	f7fe ff79 	bl	8002578 <LL_ADC_GetCommonPathInternalCh>
 8003686:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a40      	ldr	r2, [pc, #256]	; (8003790 <HAL_ADC_ConfigChannel+0x7c0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d12b      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d125      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <HAL_ADC_ConfigChannel+0x7c4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x6e4>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <HAL_ADC_ConfigChannel+0x7c8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d15c      	bne.n	800376e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036bc:	4619      	mov	r1, r3
 80036be:	4833      	ldr	r0, [pc, #204]	; (800378c <HAL_ADC_ConfigChannel+0x7bc>)
 80036c0:	f7fe ff47 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80036c4:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_ADC_ConfigChannel+0x7cc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <HAL_ADC_ConfigChannel+0x7d0>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	099a      	lsrs	r2, r3, #6
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ea:	e040      	b.n	800376e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <HAL_ADC_ConfigChannel+0x7d4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d118      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x758>
 80036f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d112      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a23      	ldr	r2, [pc, #140]	; (8003794 <HAL_ADC_ConfigChannel+0x7c4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x746>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a21      	ldr	r2, [pc, #132]	; (8003798 <HAL_ADC_ConfigChannel+0x7c8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d12d      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371e:	4619      	mov	r1, r3
 8003720:	481a      	ldr	r0, [pc, #104]	; (800378c <HAL_ADC_ConfigChannel+0x7bc>)
 8003722:	f7fe ff16 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003726:	e024      	b.n	8003772 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <HAL_ADC_ConfigChannel+0x7d8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d120      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11a      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_ADC_ConfigChannel+0x7c4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d115      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800374c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003750:	4619      	mov	r1, r3
 8003752:	480e      	ldr	r0, [pc, #56]	; (800378c <HAL_ADC_ConfigChannel+0x7bc>)
 8003754:	f7fe fefd 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
 8003758:	e00c      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800376c:	e002      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003772:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800377c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003780:	4618      	mov	r0, r3
 8003782:	37d8      	adds	r7, #216	; 0xd8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	80080000 	.word	0x80080000
 800378c:	50040300 	.word	0x50040300
 8003790:	c7520000 	.word	0xc7520000
 8003794:	50040000 	.word	0x50040000
 8003798:	50040200 	.word	0x50040200
 800379c:	20000038 	.word	0x20000038
 80037a0:	053e2d63 	.word	0x053e2d63
 80037a4:	cb840000 	.word	0xcb840000
 80037a8:	80000001 	.word	0x80000001

080037ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff f8aa 	bl	800291c <LL_ADC_REG_IsConversionOngoing>
 80037c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff f8cb 	bl	800296a <LL_ADC_INJ_IsConversionOngoing>
 80037d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8090 	beq.w	8003904 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02a      	beq.n	8003848 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7e5b      	ldrb	r3, [r3, #25]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d126      	bne.n	8003848 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7e1b      	ldrb	r3, [r3, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d122      	bne.n	8003848 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003802:	2301      	movs	r3, #1
 8003804:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003806:	e014      	b.n	8003832 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4a41      	ldr	r2, [pc, #260]	; (8003910 <ADC_ConversionStop+0x164>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d90d      	bls.n	800382c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f043 0210 	orr.w	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e06c      	b.n	8003906 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	3301      	adds	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d1e3      	bne.n	8003808 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2240      	movs	r2, #64	; 0x40
 8003846:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d014      	beq.n	8003878 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff f862 	bl	800291c <LL_ADC_REG_IsConversionOngoing>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f81f 	bl	80028a6 <LL_ADC_IsDisableOngoing>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff f83e 	bl	80028f4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d014      	beq.n	80038a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f871 	bl	800296a <LL_ADC_INJ_IsConversionOngoing>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f807 	bl	80028a6 <LL_ADC_IsDisableOngoing>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff f84d 	bl	8002942 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d004      	beq.n	80038b8 <ADC_ConversionStop+0x10c>
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d105      	bne.n	80038be <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80038b2:	230c      	movs	r3, #12
 80038b4:	617b      	str	r3, [r7, #20]
        break;
 80038b6:	e005      	b.n	80038c4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80038b8:	2308      	movs	r3, #8
 80038ba:	617b      	str	r3, [r7, #20]
        break;
 80038bc:	e002      	b.n	80038c4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80038be:	2304      	movs	r3, #4
 80038c0:	617b      	str	r3, [r7, #20]
        break;
 80038c2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80038c4:	f7fe fe04 	bl	80024d0 <HAL_GetTick>
 80038c8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038ca:	e014      	b.n	80038f6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038cc:	f7fe fe00 	bl	80024d0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d90d      	bls.n	80038f6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e007      	b.n	8003906 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e3      	bne.n	80038cc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	a33fffff 	.word	0xa33fffff

08003914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe ffad 	bl	8002880 <LL_ADC_IsEnabled>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d146      	bne.n	80039ba <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <ADC_Enable+0xb0>)
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e032      	b.n	80039bc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe ff68 	bl	8002830 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003960:	f7fe fdb6 	bl	80024d0 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003966:	e021      	b.n	80039ac <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe ff87 	bl	8002880 <LL_ADC_IsEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe ff57 	bl	8002830 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003982:	f7fe fda5 	bl	80024d0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d90d      	bls.n	80039ac <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f043 0210 	orr.w	r2, r3, #16
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e007      	b.n	80039bc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d1d6      	bne.n	8003968 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	8000003f 	.word	0x8000003f

080039c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe ff66 	bl	80028a6 <LL_ADC_IsDisableOngoing>
 80039da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe ff4d 	bl	8002880 <LL_ADC_IsEnabled>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d040      	beq.n	8003a6e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d13d      	bne.n	8003a6e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030d 	and.w	r3, r3, #13
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10c      	bne.n	8003a1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ff27 	bl	8002858 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a12:	f7fe fd5d 	bl	80024d0 <HAL_GetTick>
 8003a16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a18:	e022      	b.n	8003a60 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f043 0210 	orr.w	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e01c      	b.n	8003a70 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a36:	f7fe fd4b 	bl	80024d0 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d90d      	bls.n	8003a60 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0210 	orr.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <LL_ADC_IsEnabled>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <LL_ADC_IsEnabled+0x18>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <LL_ADC_IsEnabled+0x1a>
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d101      	bne.n	8003ab6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b09f      	sub	sp, #124	; 0x7c
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e08f      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a47      	ldr	r2, [pc, #284]	; (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d102      	bne.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003af4:	4b46      	ldr	r3, [pc, #280]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	e001      	b.n	8003afe <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e072      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ffbd 	bl	8003a9e <LL_ADC_REG_IsConversionOngoing>
 8003b24:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ffb7 	bl	8003a9e <LL_ADC_REG_IsConversionOngoing>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d154      	bne.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d151      	bne.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b3c:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b3e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02c      	beq.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b5a:	035b      	lsls	r3, r3, #13
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b64:	4829      	ldr	r0, [pc, #164]	; (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003b66:	f7ff ff87 	bl	8003a78 <LL_ADC_IsEnabled>
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	4828      	ldr	r0, [pc, #160]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003b6e:	f7ff ff83 	bl	8003a78 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	431c      	orrs	r4, r3
 8003b76:	4828      	ldr	r0, [pc, #160]	; (8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b78:	f7ff ff7e 	bl	8003a78 <LL_ADC_IsEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4323      	orrs	r3, r4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d137      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b8c:	f023 030f 	bic.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	6811      	ldr	r1, [r2, #0]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ba0:	e028      	b.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bae:	4817      	ldr	r0, [pc, #92]	; (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003bb0:	f7ff ff62 	bl	8003a78 <LL_ADC_IsEnabled>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	4816      	ldr	r0, [pc, #88]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003bb8:	f7ff ff5e 	bl	8003a78 <LL_ADC_IsEnabled>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	431c      	orrs	r4, r3
 8003bc0:	4815      	ldr	r0, [pc, #84]	; (8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003bc2:	f7ff ff59 	bl	8003a78 <LL_ADC_IsEnabled>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4323      	orrs	r3, r4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d112      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bd6:	f023 030f 	bic.w	r3, r3, #15
 8003bda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bdc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bde:	e009      	b.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003bf2:	e000      	b.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bfe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	377c      	adds	r7, #124	; 0x7c
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd90      	pop	{r4, r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	50040000 	.word	0x50040000
 8003c10:	50040100 	.word	0x50040100
 8003c14:	50040300 	.word	0x50040300
 8003c18:	50040200 	.word	0x50040200

08003c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	60d3      	str	r3, [r2, #12]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <__NVIC_GetPriorityGrouping+0x18>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	f003 0307 	and.w	r3, r3, #7
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db0b      	blt.n	8003caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <__NVIC_EnableIRQ+0x38>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	db0a      	blt.n	8003ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	490c      	ldr	r1, [pc, #48]	; (8003d08 <__NVIC_SetPriority+0x4c>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce4:	e00a      	b.n	8003cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4908      	ldr	r1, [pc, #32]	; (8003d0c <__NVIC_SetPriority+0x50>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	761a      	strb	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f1c3 0307 	rsb	r3, r3, #7
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf28      	it	cs
 8003d2e:	2304      	movcs	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d902      	bls.n	8003d40 <NVIC_EncodePriority+0x30>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3b03      	subs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <NVIC_EncodePriority+0x32>
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	4313      	orrs	r3, r2
         );
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d88:	d301      	bcc.n	8003d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e00f      	b.n	8003dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <SysTick_Config+0x40>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d96:	210f      	movs	r1, #15
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	f7ff ff8e 	bl	8003cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <SysTick_Config+0x40>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <SysTick_Config+0x40>)
 8003da8:	2207      	movs	r2, #7
 8003daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	e000e010 	.word	0xe000e010

08003dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff29 	bl	8003c1c <__NVIC_SetPriorityGrouping>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003de4:	f7ff ff3e 	bl	8003c64 <__NVIC_GetPriorityGrouping>
 8003de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	6978      	ldr	r0, [r7, #20]
 8003df0:	f7ff ff8e 	bl	8003d10 <NVIC_EncodePriority>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff5d 	bl	8003cbc <__NVIC_SetPriority>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff31 	bl	8003c80 <__NVIC_EnableIRQ>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffa2 	bl	8003d78 <SysTick_Config>
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e014      	b.n	8003e7a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	791b      	ldrb	r3, [r3, #4]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fe f885 	bl	8001f70 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	795b      	ldrb	r3, [r3, #5]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DAC_Start_DMA+0x1e>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e09e      	b.n	8003fe0 <HAL_DAC_Start_DMA+0x15c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d12a      	bne.n	8003f0a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a4b      	ldr	r2, [pc, #300]	; (8003fe8 <HAL_DAC_Start_DMA+0x164>)
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <HAL_DAC_Start_DMA+0x168>)
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a49      	ldr	r2, [pc, #292]	; (8003ff0 <HAL_DAC_Start_DMA+0x16c>)
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eda:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d009      	beq.n	8003ef6 <HAL_DAC_Start_DMA+0x72>
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d00c      	beq.n	8003f00 <HAL_DAC_Start_DMA+0x7c>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d000      	beq.n	8003eec <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003eea:	e039      	b.n	8003f60 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	613b      	str	r3, [r7, #16]
        break;
 8003ef4:	e034      	b.n	8003f60 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	613b      	str	r3, [r7, #16]
        break;
 8003efe:	e02f      	b.n	8003f60 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3310      	adds	r3, #16
 8003f06:	613b      	str	r3, [r7, #16]
        break;
 8003f08:	e02a      	b.n	8003f60 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a39      	ldr	r2, [pc, #228]	; (8003ff4 <HAL_DAC_Start_DMA+0x170>)
 8003f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4a38      	ldr	r2, [pc, #224]	; (8003ff8 <HAL_DAC_Start_DMA+0x174>)
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4a37      	ldr	r2, [pc, #220]	; (8003ffc <HAL_DAC_Start_DMA+0x178>)
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d009      	beq.n	8003f4c <HAL_DAC_Start_DMA+0xc8>
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d00c      	beq.n	8003f56 <HAL_DAC_Start_DMA+0xd2>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d000      	beq.n	8003f42 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003f40:	e00e      	b.n	8003f60 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	613b      	str	r3, [r7, #16]
        break;
 8003f4a:	e009      	b.n	8003f60 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3318      	adds	r3, #24
 8003f52:	613b      	str	r3, [r7, #16]
        break;
 8003f54:	e004      	b.n	8003f60 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	331c      	adds	r3, #28
 8003f5c:	613b      	str	r3, [r7, #16]
        break;
 8003f5e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d111      	bne.n	8003f8a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6898      	ldr	r0, [r3, #8]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	f000 faea 	bl	8004558 <HAL_DMA_Start_IT>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]
 8003f88:	e010      	b.n	8003fac <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f98:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	68d8      	ldr	r0, [r3, #12]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	f000 fad8 	bl	8004558 <HAL_DMA_Start_IT>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10c      	bne.n	8003fd2 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e005      	b.n	8003fde <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	080042d3 	.word	0x080042d3
 8003fec:	080042f5 	.word	0x080042f5
 8003ff0:	08004311 	.word	0x08004311
 8003ff4:	0800437b 	.word	0x0800437b
 8003ff8:	0800439d 	.word	0x0800439d
 8003ffc:	080043b9 	.word	0x080043b9

08004000 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	400a      	ands	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2201      	movs	r2, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43da      	mvns	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	400a      	ands	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fae2 	bl	8004618 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e00c      	b.n	8004080 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fad4 	bl	8004618 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800407e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b088      	sub	sp, #32
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	795b      	ldrb	r3, [r3, #5]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_DAC_ConfigChannel+0x1c>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e107      	b.n	80042ca <HAL_DAC_ConfigChannel+0x22c>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2202      	movs	r2, #2
 80040c4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d174      	bne.n	80041b8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80040ce:	f7fe f9ff 	bl	80024d0 <HAL_GetTick>
 80040d2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d134      	bne.n	8004144 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040da:	e011      	b.n	8004100 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040dc:	f7fe f9f8 	bl	80024d0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d90a      	bls.n	8004100 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f043 0208 	orr.w	r2, r3, #8
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2203      	movs	r2, #3
 80040fa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0e4      	b.n	80042ca <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800410e:	2001      	movs	r0, #1
 8004110:	f7fe f9ea 	bl	80024e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	6992      	ldr	r2, [r2, #24]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
 800411e:	e01e      	b.n	800415e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004120:	f7fe f9d6 	bl	80024d0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d90a      	bls.n	8004144 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f043 0208 	orr.w	r2, r3, #8
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2203      	movs	r2, #3
 800413e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0c2      	b.n	80042ca <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	2b00      	cmp	r3, #0
 800414c:	dbe8      	blt.n	8004120 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800414e:	2001      	movs	r0, #1
 8004150:	f7fe f9ca 	bl	80024e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	6992      	ldr	r2, [r2, #24]
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	ea02 0103 	and.w	r1, r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	409a      	lsls	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	21ff      	movs	r1, #255	; 0xff
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	ea02 0103 	and.w	r1, r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d11d      	bne.n	80041fc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	221f      	movs	r2, #31
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2207      	movs	r2, #7
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	431a      	orrs	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6819      	ldr	r1, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43da      	mvns	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6819      	ldr	r1, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	22c0      	movs	r2, #192	; 0xc0
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43da      	mvns	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	400a      	ands	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7fd f829 	bl	8001338 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	711a      	strb	r2, [r3, #4]
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7fd f802 	bl	800130c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f043 0204 	orr.w	r2, r3, #4
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff fead 	bl	800408a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	711a      	strb	r2, [r3, #4]
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff ffd8 	bl	800433e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	711a      	strb	r2, [r3, #4]
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ffd1 	bl	8004352 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f043 0204 	orr.w	r2, r3, #4
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff ffc7 	bl	8004366 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	711a      	strb	r2, [r3, #4]
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e098      	b.n	800452c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	4b4d      	ldr	r3, [pc, #308]	; (8004538 <HAL_DMA_Init+0x150>)
 8004402:	429a      	cmp	r2, r3
 8004404:	d80f      	bhi.n	8004426 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	4b4b      	ldr	r3, [pc, #300]	; (800453c <HAL_DMA_Init+0x154>)
 800440e:	4413      	add	r3, r2
 8004410:	4a4b      	ldr	r2, [pc, #300]	; (8004540 <HAL_DMA_Init+0x158>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	009a      	lsls	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a48      	ldr	r2, [pc, #288]	; (8004544 <HAL_DMA_Init+0x15c>)
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
 8004424:	e00e      	b.n	8004444 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	4b46      	ldr	r3, [pc, #280]	; (8004548 <HAL_DMA_Init+0x160>)
 800442e:	4413      	add	r3, r2
 8004430:	4a43      	ldr	r2, [pc, #268]	; (8004540 <HAL_DMA_Init+0x158>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	009a      	lsls	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a42      	ldr	r2, [pc, #264]	; (800454c <HAL_DMA_Init+0x164>)
 8004442:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800449e:	d039      	beq.n	8004514 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <HAL_DMA_Init+0x15c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d11a      	bne.n	80044e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044aa:	4b29      	ldr	r3, [pc, #164]	; (8004550 <HAL_DMA_Init+0x168>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f003 031c 	and.w	r3, r3, #28
 80044b6:	210f      	movs	r1, #15
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	4924      	ldr	r1, [pc, #144]	; (8004550 <HAL_DMA_Init+0x168>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044c4:	4b22      	ldr	r3, [pc, #136]	; (8004550 <HAL_DMA_Init+0x168>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	f003 031c 	and.w	r3, r3, #28
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	491d      	ldr	r1, [pc, #116]	; (8004550 <HAL_DMA_Init+0x168>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]
 80044de:	e019      	b.n	8004514 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044e0:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <HAL_DMA_Init+0x16c>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	f003 031c 	and.w	r3, r3, #28
 80044ec:	210f      	movs	r1, #15
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	4917      	ldr	r1, [pc, #92]	; (8004554 <HAL_DMA_Init+0x16c>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044fa:	4b16      	ldr	r3, [pc, #88]	; (8004554 <HAL_DMA_Init+0x16c>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6859      	ldr	r1, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f003 031c 	and.w	r3, r3, #28
 800450a:	fa01 f303 	lsl.w	r3, r1, r3
 800450e:	4911      	ldr	r1, [pc, #68]	; (8004554 <HAL_DMA_Init+0x16c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40020407 	.word	0x40020407
 800453c:	bffdfff8 	.word	0xbffdfff8
 8004540:	cccccccd 	.word	0xcccccccd
 8004544:	40020000 	.word	0x40020000
 8004548:	bffdfbf8 	.word	0xbffdfbf8
 800454c:	40020400 	.word	0x40020400
 8004550:	400200a8 	.word	0x400200a8
 8004554:	400204a8 	.word	0x400204a8

08004558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_DMA_Start_IT+0x20>
 8004574:	2302      	movs	r3, #2
 8004576:	e04b      	b.n	8004610 <HAL_DMA_Start_IT+0xb8>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d13a      	bne.n	8004602 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f91e 	bl	80047f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 020e 	orr.w	r2, r2, #14
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e00f      	b.n	80045f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 020a 	orr.w	r2, r2, #10
 80045ee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e005      	b.n	800460e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800460a:	2302      	movs	r3, #2
 800460c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800460e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d008      	beq.n	8004642 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2204      	movs	r2, #4
 8004634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e022      	b.n	8004688 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 020e 	bic.w	r2, r2, #14
 8004650:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f003 021c 	and.w	r2, r3, #28
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2101      	movs	r1, #1
 8004670:	fa01 f202 	lsl.w	r2, r1, r2
 8004674:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	f003 031c 	and.w	r3, r3, #28
 80046b4:	2204      	movs	r2, #4
 80046b6:	409a      	lsls	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d026      	beq.n	800470e <HAL_DMA_IRQHandler+0x7a>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d021      	beq.n	800470e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d107      	bne.n	80046e8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	f003 021c 	and.w	r2, r3, #28
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	2104      	movs	r1, #4
 80046f6:	fa01 f202 	lsl.w	r2, r1, r2
 80046fa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	2b00      	cmp	r3, #0
 8004702:	d071      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800470c:	e06c      	b.n	80047e8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004712:	f003 031c 	and.w	r3, r3, #28
 8004716:	2202      	movs	r2, #2
 8004718:	409a      	lsls	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02e      	beq.n	8004780 <HAL_DMA_IRQHandler+0xec>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d029      	beq.n	8004780 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 020a 	bic.w	r2, r2, #10
 8004748:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f003 021c 	and.w	r2, r3, #28
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2102      	movs	r1, #2
 8004760:	fa01 f202 	lsl.w	r2, r1, r2
 8004764:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d038      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800477e:	e033      	b.n	80047e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	f003 031c 	and.w	r3, r3, #28
 8004788:	2208      	movs	r2, #8
 800478a:	409a      	lsls	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02a      	beq.n	80047ea <HAL_DMA_IRQHandler+0x156>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d025      	beq.n	80047ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 020e 	bic.w	r2, r2, #14
 80047ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f003 021c 	and.w	r2, r3, #28
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f202 	lsl.w	r2, r1, r2
 80047c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
}
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004804:	f003 021c 	and.w	r2, r3, #28
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	2101      	movs	r1, #1
 800480e:	fa01 f202 	lsl.w	r2, r1, r2
 8004812:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b10      	cmp	r3, #16
 8004822:	d108      	bne.n	8004836 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004834:	e007      	b.n	8004846 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004862:	e17f      	b.n	8004b64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2101      	movs	r1, #1
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8171 	beq.w	8004b5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d00b      	beq.n	800489c <HAL_GPIO_Init+0x48>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d007      	beq.n	800489c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004890:	2b11      	cmp	r3, #17
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b12      	cmp	r3, #18
 800489a:	d130      	bne.n	80048fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	2203      	movs	r2, #3
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d2:	2201      	movs	r2, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0201 	and.w	r2, r3, #1
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b03      	cmp	r3, #3
 8004908:	d118      	bne.n	800493c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004910:	2201      	movs	r2, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f003 0201 	and.w	r2, r3, #1
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2203      	movs	r2, #3
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4013      	ands	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x128>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b12      	cmp	r3, #18
 800497a:	d123      	bne.n	80049c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	08da      	lsrs	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3208      	adds	r2, #8
 8004984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	220f      	movs	r2, #15
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4013      	ands	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	08da      	lsrs	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3208      	adds	r2, #8
 80049be:	6939      	ldr	r1, [r7, #16]
 80049c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	2203      	movs	r2, #3
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4013      	ands	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80ac 	beq.w	8004b5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a06:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <HAL_GPIO_Init+0x32c>)
 8004a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0a:	4a5d      	ldr	r2, [pc, #372]	; (8004b80 <HAL_GPIO_Init+0x32c>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6613      	str	r3, [r2, #96]	; 0x60
 8004a12:	4b5b      	ldr	r3, [pc, #364]	; (8004b80 <HAL_GPIO_Init+0x32c>)
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a1e:	4a59      	ldr	r2, [pc, #356]	; (8004b84 <HAL_GPIO_Init+0x330>)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	3302      	adds	r3, #2
 8004a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	220f      	movs	r2, #15
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a48:	d025      	beq.n	8004a96 <HAL_GPIO_Init+0x242>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a4e      	ldr	r2, [pc, #312]	; (8004b88 <HAL_GPIO_Init+0x334>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01f      	beq.n	8004a92 <HAL_GPIO_Init+0x23e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a4d      	ldr	r2, [pc, #308]	; (8004b8c <HAL_GPIO_Init+0x338>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d019      	beq.n	8004a8e <HAL_GPIO_Init+0x23a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a4c      	ldr	r2, [pc, #304]	; (8004b90 <HAL_GPIO_Init+0x33c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_GPIO_Init+0x236>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a4b      	ldr	r2, [pc, #300]	; (8004b94 <HAL_GPIO_Init+0x340>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00d      	beq.n	8004a86 <HAL_GPIO_Init+0x232>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a4a      	ldr	r2, [pc, #296]	; (8004b98 <HAL_GPIO_Init+0x344>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <HAL_GPIO_Init+0x22e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a49      	ldr	r2, [pc, #292]	; (8004b9c <HAL_GPIO_Init+0x348>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <HAL_GPIO_Init+0x22a>
 8004a7a:	2306      	movs	r3, #6
 8004a7c:	e00c      	b.n	8004a98 <HAL_GPIO_Init+0x244>
 8004a7e:	2307      	movs	r3, #7
 8004a80:	e00a      	b.n	8004a98 <HAL_GPIO_Init+0x244>
 8004a82:	2305      	movs	r3, #5
 8004a84:	e008      	b.n	8004a98 <HAL_GPIO_Init+0x244>
 8004a86:	2304      	movs	r3, #4
 8004a88:	e006      	b.n	8004a98 <HAL_GPIO_Init+0x244>
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e004      	b.n	8004a98 <HAL_GPIO_Init+0x244>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e002      	b.n	8004a98 <HAL_GPIO_Init+0x244>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_GPIO_Init+0x244>
 8004a96:	2300      	movs	r3, #0
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	f002 0203 	and.w	r2, r2, #3
 8004a9e:	0092      	lsls	r2, r2, #2
 8004aa0:	4093      	lsls	r3, r2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004aa8:	4936      	ldr	r1, [pc, #216]	; (8004b84 <HAL_GPIO_Init+0x330>)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	3302      	adds	r3, #2
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ab6:	4b3a      	ldr	r3, [pc, #232]	; (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ada:	4a31      	ldr	r2, [pc, #196]	; (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	; (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4013      	ands	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b04:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b0a:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b34:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b58:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <HAL_GPIO_Init+0x34c>)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	3301      	adds	r3, #1
 8004b62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f47f ae78 	bne.w	8004864 <HAL_GPIO_Init+0x10>
  }
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40010000 	.word	0x40010000
 8004b88:	48000400 	.word	0x48000400
 8004b8c:	48000800 	.word	0x48000800
 8004b90:	48000c00 	.word	0x48000c00
 8004b94:	48001000 	.word	0x48001000
 8004b98:	48001400 	.word	0x48001400
 8004b9c:	48001800 	.word	0x48001800
 8004ba0:	40010400 	.word	0x40010400

08004ba4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004bb2:	e0cd      	b.n	8004d50 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80c0 	beq.w	8004d4a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004bca:	4a68      	ldr	r2, [pc, #416]	; (8004d6c <HAL_GPIO_DeInit+0x1c8>)
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	220f      	movs	r2, #15
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bf2:	d025      	beq.n	8004c40 <HAL_GPIO_DeInit+0x9c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a5e      	ldr	r2, [pc, #376]	; (8004d70 <HAL_GPIO_DeInit+0x1cc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d01f      	beq.n	8004c3c <HAL_GPIO_DeInit+0x98>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a5d      	ldr	r2, [pc, #372]	; (8004d74 <HAL_GPIO_DeInit+0x1d0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d019      	beq.n	8004c38 <HAL_GPIO_DeInit+0x94>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a5c      	ldr	r2, [pc, #368]	; (8004d78 <HAL_GPIO_DeInit+0x1d4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <HAL_GPIO_DeInit+0x90>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a5b      	ldr	r2, [pc, #364]	; (8004d7c <HAL_GPIO_DeInit+0x1d8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00d      	beq.n	8004c30 <HAL_GPIO_DeInit+0x8c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a5a      	ldr	r2, [pc, #360]	; (8004d80 <HAL_GPIO_DeInit+0x1dc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <HAL_GPIO_DeInit+0x88>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a59      	ldr	r2, [pc, #356]	; (8004d84 <HAL_GPIO_DeInit+0x1e0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_GPIO_DeInit+0x84>
 8004c24:	2306      	movs	r3, #6
 8004c26:	e00c      	b.n	8004c42 <HAL_GPIO_DeInit+0x9e>
 8004c28:	2307      	movs	r3, #7
 8004c2a:	e00a      	b.n	8004c42 <HAL_GPIO_DeInit+0x9e>
 8004c2c:	2305      	movs	r3, #5
 8004c2e:	e008      	b.n	8004c42 <HAL_GPIO_DeInit+0x9e>
 8004c30:	2304      	movs	r3, #4
 8004c32:	e006      	b.n	8004c42 <HAL_GPIO_DeInit+0x9e>
 8004c34:	2303      	movs	r3, #3
 8004c36:	e004      	b.n	8004c42 <HAL_GPIO_DeInit+0x9e>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e002      	b.n	8004c42 <HAL_GPIO_DeInit+0x9e>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <HAL_GPIO_DeInit+0x9e>
 8004c40:	2300      	movs	r3, #0
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	f002 0203 	and.w	r2, r2, #3
 8004c48:	0092      	lsls	r2, r2, #2
 8004c4a:	4093      	lsls	r3, r2
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d132      	bne.n	8004cb8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004c52:	4b4d      	ldr	r3, [pc, #308]	; (8004d88 <HAL_GPIO_DeInit+0x1e4>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	494b      	ldr	r1, [pc, #300]	; (8004d88 <HAL_GPIO_DeInit+0x1e4>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004c60:	4b49      	ldr	r3, [pc, #292]	; (8004d88 <HAL_GPIO_DeInit+0x1e4>)
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	4947      	ldr	r1, [pc, #284]	; (8004d88 <HAL_GPIO_DeInit+0x1e4>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004c6e:	4b46      	ldr	r3, [pc, #280]	; (8004d88 <HAL_GPIO_DeInit+0x1e4>)
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	4944      	ldr	r1, [pc, #272]	; (8004d88 <HAL_GPIO_DeInit+0x1e4>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004c7c:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <HAL_GPIO_DeInit+0x1e4>)
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	4940      	ldr	r1, [pc, #256]	; (8004d88 <HAL_GPIO_DeInit+0x1e4>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	220f      	movs	r2, #15
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c9a:	4a34      	ldr	r2, [pc, #208]	; (8004d6c <HAL_GPIO_DeInit+0x1c8>)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	43da      	mvns	r2, r3
 8004caa:	4830      	ldr	r0, [pc, #192]	; (8004d6c <HAL_GPIO_DeInit+0x1c8>)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	08da      	lsrs	r2, r3, #3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3208      	adds	r2, #8
 8004cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	220f      	movs	r2, #15
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	08d2      	lsrs	r2, r2, #3
 8004cec:	4019      	ands	r1, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3208      	adds	r2, #8
 8004cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	2103      	movs	r1, #3
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	401a      	ands	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	2101      	movs	r1, #1
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	2103      	movs	r1, #3
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	401a      	ands	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	401a      	ands	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f47f af2b 	bne.w	8004bb4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	48000400 	.word	0x48000400
 8004d74:	48000800 	.word	0x48000800
 8004d78:	48000c00 	.word	0x48000c00
 8004d7c:	48001000 	.word	0x48001000
 8004d80:	48001400 	.word	0x48001400
 8004d84:	48001800 	.word	0x48001800
 8004d88:	40010400 	.word	0x40010400

08004d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	807b      	strh	r3, [r7, #2]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d9c:	787b      	ldrb	r3, [r7, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004da8:	e002      	b.n	8004db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dc6:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d006      	beq.n	8004de0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dd2:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f806 	bl	8004dec <HAL_GPIO_EXTI_Callback>
  }
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40010400 	.word	0x40010400

08004dec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e081      	b.n	8004f18 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fd f90d 	bl	8002048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2224      	movs	r2, #36	; 0x24
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d107      	bne.n	8004e7c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	e006      	b.n	8004e8a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d104      	bne.n	8004e9c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ebe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	ea42 0103 	orr.w	r1, r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	021a      	lsls	r2, r3, #8
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69d9      	ldr	r1, [r3, #28]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0201 	orr.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e021      	b.n	8004f76 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2224      	movs	r2, #36	; 0x24
 8004f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd f8c0 	bl	80020d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	4608      	mov	r0, r1
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4603      	mov	r3, r0
 8004f90:	817b      	strh	r3, [r7, #10]
 8004f92:	460b      	mov	r3, r1
 8004f94:	813b      	strh	r3, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	f040 80f9 	bne.w	800519a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_I2C_Mem_Write+0x34>
 8004fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0ed      	b.n	800519c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_I2C_Mem_Write+0x4e>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e0e6      	b.n	800519c <HAL_I2C_Mem_Write+0x21c>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fd6:	f7fd fa7b 	bl	80024d0 <HAL_GetTick>
 8004fda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2319      	movs	r3, #25
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 fac3 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0d1      	b.n	800519c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2221      	movs	r2, #33	; 0x21
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2240      	movs	r2, #64	; 0x40
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005020:	88f8      	ldrh	r0, [r7, #6]
 8005022:	893a      	ldrh	r2, [r7, #8]
 8005024:	8979      	ldrh	r1, [r7, #10]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	4603      	mov	r3, r0
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f9d3 	bl	80053dc <I2C_RequestMemoryWrite>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0a9      	b.n	800519c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2bff      	cmp	r3, #255	; 0xff
 8005050:	d90e      	bls.n	8005070 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	b2da      	uxtb	r2, r3
 800505e:	8979      	ldrh	r1, [r7, #10]
 8005060:	2300      	movs	r3, #0
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fba5 	bl	80057b8 <I2C_TransferConfig>
 800506e:	e00f      	b.n	8005090 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507e:	b2da      	uxtb	r2, r3
 8005080:	8979      	ldrh	r1, [r7, #10]
 8005082:	2300      	movs	r3, #0
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fb94 	bl	80057b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 faad 	bl	80055f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e07b      	b.n	800519c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d034      	beq.n	8005148 <HAL_I2C_Mem_Write+0x1c8>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d130      	bne.n	8005148 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	2200      	movs	r2, #0
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fa3f 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e04d      	b.n	800519c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	2bff      	cmp	r3, #255	; 0xff
 8005108:	d90e      	bls.n	8005128 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	22ff      	movs	r2, #255	; 0xff
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005114:	b2da      	uxtb	r2, r3
 8005116:	8979      	ldrh	r1, [r7, #10]
 8005118:	2300      	movs	r3, #0
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fb49 	bl	80057b8 <I2C_TransferConfig>
 8005126:	e00f      	b.n	8005148 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	b2da      	uxtb	r2, r3
 8005138:	8979      	ldrh	r1, [r7, #10]
 800513a:	2300      	movs	r3, #0
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fb38 	bl	80057b8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d19e      	bne.n	8005090 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fa8c 	bl	8005674 <I2C_WaitOnSTOPFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e01a      	b.n	800519c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2220      	movs	r2, #32
 800516c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <HAL_I2C_Mem_Write+0x224>)
 800517a:	400b      	ands	r3, r1
 800517c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800519a:	2302      	movs	r3, #2
  }
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	fe00e800 	.word	0xfe00e800

080051a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	4608      	mov	r0, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	461a      	mov	r2, r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	817b      	strh	r3, [r7, #10]
 80051ba:	460b      	mov	r3, r1
 80051bc:	813b      	strh	r3, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	f040 80fd 	bne.w	80053ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_I2C_Mem_Read+0x34>
 80051d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0f1      	b.n	80053cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_I2C_Mem_Read+0x4e>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e0ea      	b.n	80053cc <HAL_I2C_Mem_Read+0x224>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051fe:	f7fd f967 	bl	80024d0 <HAL_GetTick>
 8005202:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	2319      	movs	r3, #25
 800520a:	2201      	movs	r2, #1
 800520c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f9af 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0d5      	b.n	80053cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2222      	movs	r2, #34	; 0x22
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2240      	movs	r2, #64	; 0x40
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a3a      	ldr	r2, [r7, #32]
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005248:	88f8      	ldrh	r0, [r7, #6]
 800524a:	893a      	ldrh	r2, [r7, #8]
 800524c:	8979      	ldrh	r1, [r7, #10]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	4603      	mov	r3, r0
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f913 	bl	8005484 <I2C_RequestMemoryRead>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0ad      	b.n	80053cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2bff      	cmp	r3, #255	; 0xff
 8005278:	d90e      	bls.n	8005298 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	22ff      	movs	r2, #255	; 0xff
 800527e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005284:	b2da      	uxtb	r2, r3
 8005286:	8979      	ldrh	r1, [r7, #10]
 8005288:	4b52      	ldr	r3, [pc, #328]	; (80053d4 <HAL_I2C_Mem_Read+0x22c>)
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fa91 	bl	80057b8 <I2C_TransferConfig>
 8005296:	e00f      	b.n	80052b8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	8979      	ldrh	r1, [r7, #10]
 80052aa:	4b4a      	ldr	r3, [pc, #296]	; (80053d4 <HAL_I2C_Mem_Read+0x22c>)
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fa80 	bl	80057b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	2200      	movs	r2, #0
 80052c0:	2104      	movs	r1, #4
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f956 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e07c      	b.n	80053cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d034      	beq.n	8005378 <HAL_I2C_Mem_Read+0x1d0>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005312:	2b00      	cmp	r3, #0
 8005314:	d130      	bne.n	8005378 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	2200      	movs	r2, #0
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f927 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e04d      	b.n	80053cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2bff      	cmp	r3, #255	; 0xff
 8005338:	d90e      	bls.n	8005358 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	22ff      	movs	r2, #255	; 0xff
 800533e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	b2da      	uxtb	r2, r3
 8005346:	8979      	ldrh	r1, [r7, #10]
 8005348:	2300      	movs	r3, #0
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fa31 	bl	80057b8 <I2C_TransferConfig>
 8005356:	e00f      	b.n	8005378 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005366:	b2da      	uxtb	r2, r3
 8005368:	8979      	ldrh	r1, [r7, #10]
 800536a:	2300      	movs	r3, #0
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fa20 	bl	80057b8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d19a      	bne.n	80052b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f974 	bl	8005674 <I2C_WaitOnSTOPFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e01a      	b.n	80053cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2220      	movs	r2, #32
 800539c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_I2C_Mem_Read+0x230>)
 80053aa:	400b      	ands	r3, r1
 80053ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	80002400 	.word	0x80002400
 80053d8:	fe00e800 	.word	0xfe00e800

080053dc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	817b      	strh	r3, [r7, #10]
 80053ee:	460b      	mov	r3, r1
 80053f0:	813b      	strh	r3, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	8979      	ldrh	r1, [r7, #10]
 80053fc:	4b20      	ldr	r3, [pc, #128]	; (8005480 <I2C_RequestMemoryWrite+0xa4>)
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f9d7 	bl	80057b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	69b9      	ldr	r1, [r7, #24]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f8f0 	bl	80055f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e02c      	b.n	8005478 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d105      	bne.n	8005430 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005424:	893b      	ldrh	r3, [r7, #8]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	629a      	str	r2, [r3, #40]	; 0x28
 800542e:	e015      	b.n	800545c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005430:	893b      	ldrh	r3, [r7, #8]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29b      	uxth	r3, r3
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f8d6 	bl	80055f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e012      	b.n	8005478 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005452:	893b      	ldrh	r3, [r7, #8]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2200      	movs	r2, #0
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f884 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	80002000 	.word	0x80002000

08005484 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	4608      	mov	r0, r1
 800548e:	4611      	mov	r1, r2
 8005490:	461a      	mov	r2, r3
 8005492:	4603      	mov	r3, r0
 8005494:	817b      	strh	r3, [r7, #10]
 8005496:	460b      	mov	r3, r1
 8005498:	813b      	strh	r3, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	8979      	ldrh	r1, [r7, #10]
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <I2C_RequestMemoryRead+0xa4>)
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	2300      	movs	r3, #0
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f984 	bl	80057b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	69b9      	ldr	r1, [r7, #24]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f89d 	bl	80055f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e02c      	b.n	800551e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054ca:	893b      	ldrh	r3, [r7, #8]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	629a      	str	r2, [r3, #40]	; 0x28
 80054d4:	e015      	b.n	8005502 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054d6:	893b      	ldrh	r3, [r7, #8]
 80054d8:	0a1b      	lsrs	r3, r3, #8
 80054da:	b29b      	uxth	r3, r3
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	69b9      	ldr	r1, [r7, #24]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f883 	bl	80055f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e012      	b.n	800551e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054f8:	893b      	ldrh	r3, [r7, #8]
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2200      	movs	r2, #0
 800550a:	2140      	movs	r1, #64	; 0x40
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f831 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	80002000 	.word	0x80002000

0800552c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b02      	cmp	r3, #2
 8005540:	d103      	bne.n	800554a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b01      	cmp	r3, #1
 8005556:	d007      	beq.n	8005568 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	619a      	str	r2, [r3, #24]
  }
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005584:	e022      	b.n	80055cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558c:	d01e      	beq.n	80055cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558e:	f7fc ff9f 	bl	80024d0 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d113      	bne.n	80055cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e00f      	b.n	80055ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d0cd      	beq.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005600:	e02c      	b.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f870 	bl	80056ec <I2C_IsAcknowledgeFailed>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e02a      	b.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d01e      	beq.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fc ff57 	bl	80024d0 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d113      	bne.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e007      	b.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d1cb      	bne.n	8005602 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005680:	e028      	b.n	80056d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f830 	bl	80056ec <I2C_IsAcknowledgeFailed>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e026      	b.n	80056e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005696:	f7fc ff1b 	bl	80024d0 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d302      	bcc.n	80056ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d113      	bne.n	80056d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e007      	b.n	80056e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d1cf      	bne.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b10      	cmp	r3, #16
 8005704:	d151      	bne.n	80057aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005706:	e022      	b.n	800574e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d01e      	beq.n	800574e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005710:	f7fc fede 	bl	80024d0 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	d302      	bcc.n	8005726 <I2C_IsAcknowledgeFailed+0x3a>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d113      	bne.n	800574e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e02e      	b.n	80057ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b20      	cmp	r3, #32
 800575a:	d1d5      	bne.n	8005708 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2210      	movs	r2, #16
 8005762:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2220      	movs	r2, #32
 800576a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff fedd 	bl	800552c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800577e:	400b      	ands	r3, r1
 8005780:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	f043 0204 	orr.w	r2, r3, #4
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	fe00e800 	.word	0xfe00e800

080057b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	817b      	strh	r3, [r7, #10]
 80057c6:	4613      	mov	r3, r2
 80057c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	0d5b      	lsrs	r3, r3, #21
 80057d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80057d8:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <I2C_TransferConfig+0x58>)
 80057da:	430b      	orrs	r3, r1
 80057dc:	43db      	mvns	r3, r3
 80057de:	ea02 0103 	and.w	r1, r2, r3
 80057e2:	897b      	ldrh	r3, [r7, #10]
 80057e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057e8:	7a7b      	ldrb	r3, [r7, #9]
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	03ff63ff 	.word	0x03ff63ff

08005814 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	d138      	bne.n	800589c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005834:	2302      	movs	r3, #2
 8005836:	e032      	b.n	800589e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2224      	movs	r2, #36	; 0x24
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005866:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6819      	ldr	r1, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d139      	bne.n	8005934 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e033      	b.n	8005936 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2224      	movs	r2, #36	; 0x24
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <HAL_PWREx_GetVoltageRange+0x18>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005950:	4618      	mov	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40007000 	.word	0x40007000

08005960 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596e:	d130      	bne.n	80059d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005970:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800597c:	d038      	beq.n	80059f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800597e:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005986:	4a1e      	ldr	r2, [pc, #120]	; (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800598c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800598e:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2232      	movs	r2, #50	; 0x32
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	0c9b      	lsrs	r3, r3, #18
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059a4:	e002      	b.n	80059ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059ac:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d102      	bne.n	80059c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f2      	bne.n	80059a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059cc:	d110      	bne.n	80059f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e00f      	b.n	80059f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80059d2:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059de:	d007      	beq.n	80059f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059e8:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40007000 	.word	0x40007000
 8005a04:	20000038 	.word	0x20000038
 8005a08:	431bde83 	.word	0x431bde83

08005a0c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005a14:	f7fc fd5c 	bl	80024d0 <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e063      	b.n	8005aec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fc fb6d 	bl	8002118 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005a3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 faf7 	bl	8006036 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	021a      	lsls	r2, r3, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 faef 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005a78:	7afb      	ldrb	r3, [r7, #11]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d131      	bne.n	8005ae2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a88:	f023 0310 	bic.w	r3, r3, #16
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6852      	ldr	r2, [r2, #4]
 8005a90:	0611      	lsls	r1, r2, #24
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	68d2      	ldr	r2, [r2, #12]
 8005a96:	4311      	orrs	r1, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <HAL_QSPI_Init+0xe8>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6912      	ldr	r2, [r2, #16]
 8005aae:	0411      	lsls	r1, r2, #16
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6952      	ldr	r2, [r2, #20]
 8005ab4:	4311      	orrs	r1, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6992      	ldr	r2, [r2, #24]
 8005aba:	4311      	orrs	r1, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005aea:	7afb      	ldrb	r3, [r7, #11]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	ffe0f8fe 	.word	0xffe0f8fe

08005af8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e016      	b.n	8005b38 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc fb40 	bl	80021a0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b4c:	f7fc fcc0 	bl	80024d0 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_QSPI_Command+0x22>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e048      	b.n	8005bf4 <HAL_QSPI_Command+0xb4>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d137      	bne.n	8005be6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2120      	movs	r1, #32
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fa5f 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d125      	bne.n	8005bea <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fa8c 	bl	80060c0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d115      	bne.n	8005bdc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	2102      	movs	r1, #2
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fa49 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10f      	bne.n	8005bea <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005bda:	e006      	b.n	8005bea <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005be4:	e001      	b.n	8005bea <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
 8005be8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005c0c:	f7fc fc60 	bl	80024d0 <HAL_GetTick>
 8005c10:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3320      	adds	r3, #32
 8005c18:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_QSPI_Transmit+0x2e>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e07b      	b.n	8005d22 <HAL_QSPI_Transmit+0x126>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d16a      	bne.n	8005d14 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d05b      	beq.n	8005d02 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2212      	movs	r2, #18
 8005c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005c7e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005c80:	e01b      	b.n	8005cba <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	2104      	movs	r1, #4
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f9e0 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005c96:	7ffb      	ldrb	r3, [r7, #31]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d113      	bne.n	8005cc4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1df      	bne.n	8005c82 <HAL_QSPI_Transmit+0x86>
 8005cc2:	e000      	b.n	8005cc6 <HAL_QSPI_Transmit+0xca>
          break;
 8005cc4:	bf00      	nop
      }

      if (status == HAL_OK)
 8005cc6:	7ffb      	ldrb	r3, [r7, #31]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d115      	bne.n	8005cf8 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f9bb 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005ce0:	7ffb      	ldrb	r3, [r7, #31]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d108      	bne.n	8005cf8 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2202      	movs	r2, #2
 8005cec:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f934 	bl	8005f5c <HAL_QSPI_Abort>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005d00:	e00a      	b.n	8005d18 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	f043 0208 	orr.w	r2, r3, #8
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	e001      	b.n	8005d18 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
 8005d16:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b08a      	sub	sp, #40	; 0x28
 8005d2e:	af02      	add	r7, sp, #8
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005d3a:	f7fc fbc9 	bl	80024d0 <HAL_GetTick>
 8005d3e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3320      	adds	r3, #32
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_QSPI_Receive+0x36>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e082      	b.n	8005e66 <HAL_QSPI_Receive+0x13c>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d171      	bne.n	8005e58 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d062      	beq.n	8005e46 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2222      	movs	r2, #34	; 0x22
 8005d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005db8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005dc2:	e01c      	b.n	8005dfe <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	2106      	movs	r1, #6
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f93f 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d114      	bne.n	8005e08 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	1e5a      	subs	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1de      	bne.n	8005dc4 <HAL_QSPI_Receive+0x9a>
 8005e06:	e000      	b.n	8005e0a <HAL_QSPI_Receive+0xe0>
          break;
 8005e08:	bf00      	nop
      }

      if (status == HAL_OK)
 8005e0a:	7ffb      	ldrb	r3, [r7, #31]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d115      	bne.n	8005e3c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2201      	movs	r2, #1
 8005e18:	2102      	movs	r1, #2
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f919 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005e24:	7ffb      	ldrb	r3, [r7, #31]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d108      	bne.n	8005e3c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f892 	bl	8005f5c <HAL_QSPI_Abort>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005e44:	e00a      	b.n	8005e5c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e001      	b.n	8005e5c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b088      	sub	sp, #32
 8005e72:	af02      	add	r7, sp, #8
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005e7c:	f7fc fb28 	bl	80024d0 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_QSPI_AutoPolling+0x24>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e060      	b.n	8005f54 <HAL_QSPI_AutoPolling+0xe6>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d14f      	bne.n	8005f46 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2242      	movs	r2, #66	; 0x42
 8005eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2120      	movs	r1, #32
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f8c7 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d13d      	bne.n	8005f4a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6852      	ldr	r2, [r2, #4]
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6892      	ldr	r2, [r2, #8]
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005f04:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005f0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f8d3 	bl	80060c0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2201      	movs	r2, #1
 8005f22:	2108      	movs	r1, #8
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f894 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005f44:	e001      	b.n	8005f4a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
 8005f48:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005f68:	f7fc fab2 	bl	80024d0 <HAL_GetTick>
 8005f6c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d056      	beq.n	800602c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d017      	beq.n	8005fc4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0204 	bic.w	r2, r2, #4
 8005fa2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe fb35 	bl	8004618 <HAL_DMA_Abort>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	f043 0204 	orr.w	r2, r3, #4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0202 	orr.w	r2, r2, #2
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2102      	movs	r1, #2
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f836 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10e      	bne.n	800600e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2200      	movs	r2, #0
 8006002:	2120      	movs	r1, #32
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f824 	bl	8006052 <QSPI_WaitFlagStateUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006022:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	4613      	mov	r3, r2
 8006060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006062:	e01a      	b.n	800609a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d016      	beq.n	800609a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606c:	f7fc fa30 	bl	80024d0 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	429a      	cmp	r2, r3
 800607a:	d302      	bcc.n	8006082 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2204      	movs	r2, #4
 8006086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608e:	f043 0201 	orr.w	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e00e      	b.n	80060b8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d1d6      	bne.n	8006064 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <QSPI_Config+0x28>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060da:	d005      	beq.n	80060e8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3a01      	subs	r2, #1
 80060e6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80b9 	beq.w	8006264 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d05f      	beq.n	80061ba <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	6892      	ldr	r2, [r2, #8]
 8006102:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d031      	beq.n	8006170 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	431a      	orrs	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	431a      	orrs	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	049b      	lsls	r3, r3, #18
 8006128:	431a      	orrs	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	431a      	orrs	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	431a      	orrs	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	431a      	orrs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	431a      	orrs	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	431a      	orrs	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	ea42 0103 	orr.w	r1, r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	430a      	orrs	r2, r1
 8006158:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006160:	f000 812e 	beq.w	80063c0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	6852      	ldr	r2, [r2, #4]
 800616c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800616e:	e127      	b.n	80063c0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	431a      	orrs	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617e:	431a      	orrs	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	431a      	orrs	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	049b      	lsls	r3, r3, #18
 800618c:	431a      	orrs	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	431a      	orrs	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	431a      	orrs	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	431a      	orrs	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	ea42 0103 	orr.w	r1, r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	615a      	str	r2, [r3, #20]
}
 80061b8:	e102      	b.n	80063c0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d02e      	beq.n	8006220 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	431a      	orrs	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	431a      	orrs	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	431a      	orrs	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	049b      	lsls	r3, r3, #18
 80061de:	431a      	orrs	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	431a      	orrs	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	ea42 0103 	orr.w	r1, r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	430a      	orrs	r2, r1
 8006208:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006210:	f000 80d6 	beq.w	80063c0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	6852      	ldr	r2, [r2, #4]
 800621c:	619a      	str	r2, [r3, #24]
}
 800621e:	e0cf      	b.n	80063c0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	431a      	orrs	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622e:	431a      	orrs	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	431a      	orrs	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	049b      	lsls	r3, r3, #18
 800623c:	431a      	orrs	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	431a      	orrs	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	431a      	orrs	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	431a      	orrs	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	ea42 0103 	orr.w	r1, r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	430a      	orrs	r2, r1
 8006260:	615a      	str	r2, [r3, #20]
}
 8006262:	e0ad      	b.n	80063c0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d058      	beq.n	800631e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	6892      	ldr	r2, [r2, #8]
 8006274:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d02d      	beq.n	80062da <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	431a      	orrs	r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628c:	431a      	orrs	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	431a      	orrs	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	049b      	lsls	r3, r3, #18
 800629a:	431a      	orrs	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	ea42 0103 	orr.w	r1, r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062cc:	d078      	beq.n	80063c0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	6852      	ldr	r2, [r2, #4]
 80062d6:	619a      	str	r2, [r3, #24]
}
 80062d8:	e072      	b.n	80063c0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	431a      	orrs	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	049b      	lsls	r3, r3, #18
 80062f6:	431a      	orrs	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	431a      	orrs	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	431a      	orrs	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	ea42 0103 	orr.w	r1, r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	430a      	orrs	r2, r1
 800631a:	615a      	str	r2, [r3, #20]
}
 800631c:	e050      	b.n	80063c0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02a      	beq.n	800637c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	431a      	orrs	r2, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	431a      	orrs	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	431a      	orrs	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	049b      	lsls	r3, r3, #18
 8006342:	431a      	orrs	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	431a      	orrs	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	431a      	orrs	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	431a      	orrs	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	ea42 0103 	orr.w	r1, r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	430a      	orrs	r2, r1
 8006366:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800636e:	d027      	beq.n	80063c0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	6852      	ldr	r2, [r2, #4]
 8006378:	619a      	str	r2, [r3, #24]
}
 800637a:	e021      	b.n	80063c0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01d      	beq.n	80063c0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	431a      	orrs	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006392:	431a      	orrs	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	431a      	orrs	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	049b      	lsls	r3, r3, #18
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	ea42 0103 	orr.w	r1, r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	430a      	orrs	r2, r1
 80063be:	615a      	str	r2, [r3, #20]
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e3d4      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063de:	4ba1      	ldr	r3, [pc, #644]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063e8:	4b9e      	ldr	r3, [pc, #632]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80e4 	beq.w	80065c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <HAL_RCC_OscConfig+0x4a>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b0c      	cmp	r3, #12
 800640a:	f040 808b 	bne.w	8006524 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b01      	cmp	r3, #1
 8006412:	f040 8087 	bne.w	8006524 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006416:	4b93      	ldr	r3, [pc, #588]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_RCC_OscConfig+0x62>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e3ac      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1a      	ldr	r2, [r3, #32]
 8006432:	4b8c      	ldr	r3, [pc, #560]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d004      	beq.n	8006448 <HAL_RCC_OscConfig+0x7c>
 800643e:	4b89      	ldr	r3, [pc, #548]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006446:	e005      	b.n	8006454 <HAL_RCC_OscConfig+0x88>
 8006448:	4b86      	ldr	r3, [pc, #536]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800644a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800644e:	091b      	lsrs	r3, r3, #4
 8006450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006454:	4293      	cmp	r3, r2
 8006456:	d223      	bcs.n	80064a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fd3f 	bl	8006ee0 <RCC_SetFlashLatencyFromMSIRange>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e38d      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800646c:	4b7d      	ldr	r3, [pc, #500]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a7c      	ldr	r2, [pc, #496]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006472:	f043 0308 	orr.w	r3, r3, #8
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	4b7a      	ldr	r3, [pc, #488]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	4977      	ldr	r1, [pc, #476]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006486:	4313      	orrs	r3, r2
 8006488:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800648a:	4b76      	ldr	r3, [pc, #472]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	4972      	ldr	r1, [pc, #456]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800649a:	4313      	orrs	r3, r2
 800649c:	604b      	str	r3, [r1, #4]
 800649e:	e025      	b.n	80064ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064a0:	4b70      	ldr	r3, [pc, #448]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a6f      	ldr	r2, [pc, #444]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80064a6:	f043 0308 	orr.w	r3, r3, #8
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	4b6d      	ldr	r3, [pc, #436]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	496a      	ldr	r1, [pc, #424]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064be:	4b69      	ldr	r3, [pc, #420]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	4965      	ldr	r1, [pc, #404]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fcff 	bl	8006ee0 <RCC_SetFlashLatencyFromMSIRange>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e34d      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064ec:	f000 fc36 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 80064f0:	4601      	mov	r1, r0
 80064f2:	4b5c      	ldr	r3, [pc, #368]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	4a5a      	ldr	r2, [pc, #360]	; (8006668 <HAL_RCC_OscConfig+0x29c>)
 80064fe:	5cd3      	ldrb	r3, [r2, r3]
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	fa21 f303 	lsr.w	r3, r1, r3
 8006508:	4a58      	ldr	r2, [pc, #352]	; (800666c <HAL_RCC_OscConfig+0x2a0>)
 800650a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800650c:	4b58      	ldr	r3, [pc, #352]	; (8006670 <HAL_RCC_OscConfig+0x2a4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fb ff8d 	bl	8002430 <HAL_InitTick>
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d052      	beq.n	80065c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	e331      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d032      	beq.n	8006592 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800652c:	4b4d      	ldr	r3, [pc, #308]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a4c      	ldr	r2, [pc, #304]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006538:	f7fb ffca 	bl	80024d0 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006540:	f7fb ffc6 	bl	80024d0 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e31a      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006552:	4b44      	ldr	r3, [pc, #272]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800655e:	4b41      	ldr	r3, [pc, #260]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a40      	ldr	r2, [pc, #256]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006564:	f043 0308 	orr.w	r3, r3, #8
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	4b3e      	ldr	r3, [pc, #248]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	493b      	ldr	r1, [pc, #236]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800657c:	4b39      	ldr	r3, [pc, #228]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	4936      	ldr	r1, [pc, #216]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800658c:	4313      	orrs	r3, r2
 800658e:	604b      	str	r3, [r1, #4]
 8006590:	e01a      	b.n	80065c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006592:	4b34      	ldr	r3, [pc, #208]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a33      	ldr	r2, [pc, #204]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006598:	f023 0301 	bic.w	r3, r3, #1
 800659c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800659e:	f7fb ff97 	bl	80024d0 <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065a6:	f7fb ff93 	bl	80024d0 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e2e7      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065b8:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <HAL_RCC_OscConfig+0x1da>
 80065c4:	e000      	b.n	80065c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d074      	beq.n	80066be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d005      	beq.n	80065e6 <HAL_RCC_OscConfig+0x21a>
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d10e      	bne.n	80065fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d10b      	bne.n	80065fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e6:	4b1f      	ldr	r3, [pc, #124]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d064      	beq.n	80066bc <HAL_RCC_OscConfig+0x2f0>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d160      	bne.n	80066bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e2c4      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006606:	d106      	bne.n	8006616 <HAL_RCC_OscConfig+0x24a>
 8006608:	4b16      	ldr	r3, [pc, #88]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a15      	ldr	r2, [pc, #84]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800660e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	e01d      	b.n	8006652 <HAL_RCC_OscConfig+0x286>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800661e:	d10c      	bne.n	800663a <HAL_RCC_OscConfig+0x26e>
 8006620:	4b10      	ldr	r3, [pc, #64]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a0f      	ldr	r2, [pc, #60]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0c      	ldr	r2, [pc, #48]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	e00b      	b.n	8006652 <HAL_RCC_OscConfig+0x286>
 800663a:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	4b07      	ldr	r3, [pc, #28]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a06      	ldr	r2, [pc, #24]	; (8006664 <HAL_RCC_OscConfig+0x298>)
 800664c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006650:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01c      	beq.n	8006694 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665a:	f7fb ff39 	bl	80024d0 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006660:	e011      	b.n	8006686 <HAL_RCC_OscConfig+0x2ba>
 8006662:	bf00      	nop
 8006664:	40021000 	.word	0x40021000
 8006668:	08008bc8 	.word	0x08008bc8
 800666c:	20000038 	.word	0x20000038
 8006670:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006674:	f7fb ff2c 	bl	80024d0 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	; 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e280      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006686:	4baf      	ldr	r3, [pc, #700]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0x2a8>
 8006692:	e014      	b.n	80066be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fb ff1c 	bl	80024d0 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800669c:	f7fb ff18 	bl	80024d0 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e26c      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066ae:	4ba5      	ldr	r3, [pc, #660]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x2d0>
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d060      	beq.n	800678c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d005      	beq.n	80066dc <HAL_RCC_OscConfig+0x310>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b0c      	cmp	r3, #12
 80066d4:	d119      	bne.n	800670a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d116      	bne.n	800670a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066dc:	4b99      	ldr	r3, [pc, #612]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_RCC_OscConfig+0x328>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e249      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f4:	4b93      	ldr	r3, [pc, #588]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	061b      	lsls	r3, r3, #24
 8006702:	4990      	ldr	r1, [pc, #576]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006704:	4313      	orrs	r3, r2
 8006706:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006708:	e040      	b.n	800678c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d023      	beq.n	800675a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006712:	4b8c      	ldr	r3, [pc, #560]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a8b      	ldr	r2, [pc, #556]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671e:	f7fb fed7 	bl	80024d0 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006726:	f7fb fed3 	bl	80024d0 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e227      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006738:	4b82      	ldr	r3, [pc, #520]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006744:	4b7f      	ldr	r3, [pc, #508]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	497c      	ldr	r1, [pc, #496]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
 8006758:	e018      	b.n	800678c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800675a:	4b7a      	ldr	r3, [pc, #488]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a79      	ldr	r2, [pc, #484]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006766:	f7fb feb3 	bl	80024d0 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800676e:	f7fb feaf 	bl	80024d0 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e203      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006780:	4b70      	ldr	r3, [pc, #448]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f0      	bne.n	800676e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b00      	cmp	r3, #0
 8006796:	d03c      	beq.n	8006812 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01c      	beq.n	80067da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a0:	4b68      	ldr	r3, [pc, #416]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80067a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067a6:	4a67      	ldr	r2, [pc, #412]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80067a8:	f043 0301 	orr.w	r3, r3, #1
 80067ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b0:	f7fb fe8e 	bl	80024d0 <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b8:	f7fb fe8a 	bl	80024d0 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e1de      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067ca:	4b5e      	ldr	r3, [pc, #376]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80067cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0ef      	beq.n	80067b8 <HAL_RCC_OscConfig+0x3ec>
 80067d8:	e01b      	b.n	8006812 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067da:	4b5a      	ldr	r3, [pc, #360]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80067dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067e0:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ea:	f7fb fe71 	bl	80024d0 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f2:	f7fb fe6d 	bl	80024d0 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e1c1      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006804:	4b4f      	ldr	r3, [pc, #316]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1ef      	bne.n	80067f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80a6 	beq.w	800696c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006820:	2300      	movs	r3, #0
 8006822:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006824:	4b47      	ldr	r3, [pc, #284]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10d      	bne.n	800684c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006830:	4b44      	ldr	r3, [pc, #272]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006834:	4a43      	ldr	r2, [pc, #268]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683a:	6593      	str	r3, [r2, #88]	; 0x58
 800683c:	4b41      	ldr	r3, [pc, #260]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 800683e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006848:	2301      	movs	r3, #1
 800684a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800684c:	4b3e      	ldr	r3, [pc, #248]	; (8006948 <HAL_RCC_OscConfig+0x57c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d118      	bne.n	800688a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006858:	4b3b      	ldr	r3, [pc, #236]	; (8006948 <HAL_RCC_OscConfig+0x57c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a3a      	ldr	r2, [pc, #232]	; (8006948 <HAL_RCC_OscConfig+0x57c>)
 800685e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006862:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006864:	f7fb fe34 	bl	80024d0 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686c:	f7fb fe30 	bl	80024d0 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e184      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800687e:	4b32      	ldr	r3, [pc, #200]	; (8006948 <HAL_RCC_OscConfig+0x57c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d108      	bne.n	80068a4 <HAL_RCC_OscConfig+0x4d8>
 8006892:	4b2c      	ldr	r3, [pc, #176]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006898:	4a2a      	ldr	r2, [pc, #168]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068a2:	e024      	b.n	80068ee <HAL_RCC_OscConfig+0x522>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2b05      	cmp	r3, #5
 80068aa:	d110      	bne.n	80068ce <HAL_RCC_OscConfig+0x502>
 80068ac:	4b25      	ldr	r3, [pc, #148]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b2:	4a24      	ldr	r2, [pc, #144]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80068b4:	f043 0304 	orr.w	r3, r3, #4
 80068b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068bc:	4b21      	ldr	r3, [pc, #132]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c2:	4a20      	ldr	r2, [pc, #128]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068cc:	e00f      	b.n	80068ee <HAL_RCC_OscConfig+0x522>
 80068ce:	4b1d      	ldr	r3, [pc, #116]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80068d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d4:	4a1b      	ldr	r2, [pc, #108]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068de:	4b19      	ldr	r3, [pc, #100]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80068e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e4:	4a17      	ldr	r2, [pc, #92]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 80068e6:	f023 0304 	bic.w	r3, r3, #4
 80068ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fb fdeb 	bl	80024d0 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fe:	f7fb fde7 	bl	80024d0 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	; 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e139      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <HAL_RCC_OscConfig+0x578>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0ed      	beq.n	80068fe <HAL_RCC_OscConfig+0x532>
 8006922:	e01a      	b.n	800695a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006924:	f7fb fdd4 	bl	80024d0 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800692a:	e00f      	b.n	800694c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692c:	f7fb fdd0 	bl	80024d0 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	f241 3288 	movw	r2, #5000	; 0x1388
 800693a:	4293      	cmp	r3, r2
 800693c:	d906      	bls.n	800694c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e122      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
 8006942:	bf00      	nop
 8006944:	40021000 	.word	0x40021000
 8006948:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800694c:	4b90      	ldr	r3, [pc, #576]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e8      	bne.n	800692c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800695a:	7ffb      	ldrb	r3, [r7, #31]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d105      	bne.n	800696c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006960:	4b8b      	ldr	r3, [pc, #556]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006964:	4a8a      	ldr	r2, [pc, #552]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8108 	beq.w	8006b86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	2b02      	cmp	r3, #2
 800697c:	f040 80d0 	bne.w	8006b20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006980:	4b83      	ldr	r3, [pc, #524]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f003 0203 	and.w	r2, r3, #3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	429a      	cmp	r2, r3
 8006992:	d130      	bne.n	80069f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	3b01      	subs	r3, #1
 80069a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d127      	bne.n	80069f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d11f      	bne.n	80069f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069c0:	2a07      	cmp	r2, #7
 80069c2:	bf14      	ite	ne
 80069c4:	2201      	movne	r2, #1
 80069c6:	2200      	moveq	r2, #0
 80069c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d113      	bne.n	80069f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	3b01      	subs	r3, #1
 80069dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80069de:	429a      	cmp	r2, r3
 80069e0:	d109      	bne.n	80069f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	085b      	lsrs	r3, r3, #1
 80069ee:	3b01      	subs	r3, #1
 80069f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d06e      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b0c      	cmp	r3, #12
 80069fa:	d069      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80069fc:	4b64      	ldr	r3, [pc, #400]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d105      	bne.n	8006a14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006a08:	4b61      	ldr	r3, [pc, #388]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0b7      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a18:	4b5d      	ldr	r3, [pc, #372]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a5c      	ldr	r2, [pc, #368]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a24:	f7fb fd54 	bl	80024d0 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a2c:	f7fb fd50 	bl	80024d0 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e0a4      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3e:	4b54      	ldr	r3, [pc, #336]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f0      	bne.n	8006a2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a4a:	4b51      	ldr	r3, [pc, #324]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	4b51      	ldr	r3, [pc, #324]	; (8006b94 <HAL_RCC_OscConfig+0x7c8>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a5a:	3a01      	subs	r2, #1
 8006a5c:	0112      	lsls	r2, r2, #4
 8006a5e:	4311      	orrs	r1, r2
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a64:	0212      	lsls	r2, r2, #8
 8006a66:	4311      	orrs	r1, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a6c:	0852      	lsrs	r2, r2, #1
 8006a6e:	3a01      	subs	r2, #1
 8006a70:	0552      	lsls	r2, r2, #21
 8006a72:	4311      	orrs	r1, r2
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a78:	0852      	lsrs	r2, r2, #1
 8006a7a:	3a01      	subs	r2, #1
 8006a7c:	0652      	lsls	r2, r2, #25
 8006a7e:	4311      	orrs	r1, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a84:	0912      	lsrs	r2, r2, #4
 8006a86:	0452      	lsls	r2, r2, #17
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	4941      	ldr	r1, [pc, #260]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a90:	4b3f      	ldr	r3, [pc, #252]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a3e      	ldr	r2, [pc, #248]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a9c:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4a3b      	ldr	r2, [pc, #236]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006aa8:	f7fb fd12 	bl	80024d0 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab0:	f7fb fd0e 	bl	80024d0 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e062      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ac2:	4b33      	ldr	r3, [pc, #204]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ace:	e05a      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e059      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad4:	4b2e      	ldr	r3, [pc, #184]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d152      	bne.n	8006b86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ae0:	4b2b      	ldr	r3, [pc, #172]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a2a      	ldr	r2, [pc, #168]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006aec:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4a27      	ldr	r2, [pc, #156]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006af6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006af8:	f7fb fcea 	bl	80024d0 <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b00:	f7fb fce6 	bl	80024d0 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e03a      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b12:	4b1f      	ldr	r3, [pc, #124]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f0      	beq.n	8006b00 <HAL_RCC_OscConfig+0x734>
 8006b1e:	e032      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d02d      	beq.n	8006b82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b26:	4b1a      	ldr	r3, [pc, #104]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a19      	ldr	r2, [pc, #100]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006b32:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b44:	f023 0303 	bic.w	r3, r3, #3
 8006b48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5a:	f7fb fcb9 	bl	80024d0 <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b62:	f7fb fcb5 	bl	80024d0 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e009      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_RCC_OscConfig+0x7c4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f0      	bne.n	8006b62 <HAL_RCC_OscConfig+0x796>
 8006b80:	e001      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40021000 	.word	0x40021000
 8006b94:	f99d808c 	.word	0xf99d808c

08006b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0c8      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bac:	4b66      	ldr	r3, [pc, #408]	; (8006d48 <HAL_RCC_ClockConfig+0x1b0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d910      	bls.n	8006bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bba:	4b63      	ldr	r3, [pc, #396]	; (8006d48 <HAL_RCC_ClockConfig+0x1b0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f023 0207 	bic.w	r2, r3, #7
 8006bc2:	4961      	ldr	r1, [pc, #388]	; (8006d48 <HAL_RCC_ClockConfig+0x1b0>)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bca:	4b5f      	ldr	r3, [pc, #380]	; (8006d48 <HAL_RCC_ClockConfig+0x1b0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d001      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0b0      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d04c      	beq.n	8006c82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d107      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf0:	4b56      	ldr	r3, [pc, #344]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d121      	bne.n	8006c40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e09e      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d107      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c08:	4b50      	ldr	r3, [pc, #320]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d115      	bne.n	8006c40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e092      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c20:	4b4a      	ldr	r3, [pc, #296]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e086      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c30:	4b46      	ldr	r3, [pc, #280]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e07e      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c40:	4b42      	ldr	r3, [pc, #264]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f023 0203 	bic.w	r2, r3, #3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	493f      	ldr	r1, [pc, #252]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c52:	f7fb fc3d 	bl	80024d0 <HAL_GetTick>
 8006c56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c58:	e00a      	b.n	8006c70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c5a:	f7fb fc39 	bl	80024d0 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e066      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c70:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 020c 	and.w	r2, r3, #12
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d1eb      	bne.n	8006c5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c8e:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	492c      	ldr	r1, [pc, #176]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca0:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <HAL_RCC_ClockConfig+0x1b0>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d210      	bcs.n	8006cd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <HAL_RCC_ClockConfig+0x1b0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 0207 	bic.w	r2, r3, #7
 8006cb6:	4924      	ldr	r1, [pc, #144]	; (8006d48 <HAL_RCC_ClockConfig+0x1b0>)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <HAL_RCC_ClockConfig+0x1b0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e036      	b.n	8006d3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cdc:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4918      	ldr	r1, [pc, #96]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4910      	ldr	r1, [pc, #64]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d0e:	f000 f825 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 8006d12:	4601      	mov	r1, r0
 8006d14:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <HAL_RCC_ClockConfig+0x1b4>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	4a0c      	ldr	r2, [pc, #48]	; (8006d50 <HAL_RCC_ClockConfig+0x1b8>)
 8006d20:	5cd3      	ldrb	r3, [r2, r3]
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	fa21 f303 	lsr.w	r3, r1, r3
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fb fb7c 	bl	8002430 <HAL_InitTick>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	40022000 	.word	0x40022000
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	08008bc8 	.word	0x08008bc8
 8006d54:	20000038 	.word	0x20000038
 8006d58:	2000003c 	.word	0x2000003c

08006d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b089      	sub	sp, #36	; 0x24
 8006d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	2300      	movs	r3, #0
 8006d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d6a:	4b3d      	ldr	r3, [pc, #244]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 030c 	and.w	r3, r3, #12
 8006d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d74:	4b3a      	ldr	r3, [pc, #232]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <HAL_RCC_GetSysClockFreq+0x34>
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b0c      	cmp	r3, #12
 8006d88:	d121      	bne.n	8006dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d11e      	bne.n	8006dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d90:	4b33      	ldr	r3, [pc, #204]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d9c:	4b30      	ldr	r3, [pc, #192]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006da2:	0a1b      	lsrs	r3, r3, #8
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	e005      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006dac:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006db8:	4a2a      	ldr	r2, [pc, #168]	; (8006e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10d      	bne.n	8006de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006dcc:	e00a      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d102      	bne.n	8006dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006dd4:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006dd6:	61bb      	str	r3, [r7, #24]
 8006dd8:	e004      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006de0:	4b22      	ldr	r3, [pc, #136]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8006de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2b0c      	cmp	r3, #12
 8006de8:	d133      	bne.n	8006e52 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d002      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0xa4>
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d003      	beq.n	8006e06 <HAL_RCC_GetSysClockFreq+0xaa>
 8006dfe:	e005      	b.n	8006e0c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e00:	4b19      	ldr	r3, [pc, #100]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e02:	617b      	str	r3, [r7, #20]
      break;
 8006e04:	e005      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006e06:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8006e08:	617b      	str	r3, [r7, #20]
      break;
 8006e0a:	e002      	b.n	8006e12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	617b      	str	r3, [r7, #20]
      break;
 8006e10:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e12:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	0a1b      	lsrs	r3, r3, #8
 8006e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	fb02 f203 	mul.w	r2, r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e36:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e38:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	0e5b      	lsrs	r3, r3, #25
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	3301      	adds	r3, #1
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e52:	69bb      	ldr	r3, [r7, #24]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3724      	adds	r7, #36	; 0x24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40021000 	.word	0x40021000
 8006e64:	08008be0 	.word	0x08008be0
 8006e68:	00f42400 	.word	0x00f42400
 8006e6c:	007a1200 	.word	0x007a1200

08006e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e74:	4b03      	ldr	r3, [pc, #12]	; (8006e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e76:	681b      	ldr	r3, [r3, #0]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20000038 	.word	0x20000038

08006e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e8c:	f7ff fff0 	bl	8006e70 <HAL_RCC_GetHCLKFreq>
 8006e90:	4601      	mov	r1, r0
 8006e92:	4b06      	ldr	r3, [pc, #24]	; (8006eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ea0:	f003 031f 	and.w	r3, r3, #31
 8006ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	08008bd8 	.word	0x08008bd8

08006eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006eb8:	f7ff ffda 	bl	8006e70 <HAL_RCC_GetHCLKFreq>
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	0adb      	lsrs	r3, r3, #11
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	4a04      	ldr	r2, [pc, #16]	; (8006edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006eca:	5cd3      	ldrb	r3, [r2, r3]
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	08008bd8 	.word	0x08008bd8

08006ee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006eec:	4b2a      	ldr	r3, [pc, #168]	; (8006f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ef8:	f7fe fd24 	bl	8005944 <HAL_PWREx_GetVoltageRange>
 8006efc:	6178      	str	r0, [r7, #20]
 8006efe:	e014      	b.n	8006f2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f00:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f04:	4a24      	ldr	r2, [pc, #144]	; (8006f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f0c:	4b22      	ldr	r3, [pc, #136]	; (8006f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f18:	f7fe fd14 	bl	8005944 <HAL_PWREx_GetVoltageRange>
 8006f1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f1e:	4b1e      	ldr	r3, [pc, #120]	; (8006f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f22:	4a1d      	ldr	r2, [pc, #116]	; (8006f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f30:	d10b      	bne.n	8006f4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b80      	cmp	r3, #128	; 0x80
 8006f36:	d919      	bls.n	8006f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2ba0      	cmp	r3, #160	; 0xa0
 8006f3c:	d902      	bls.n	8006f44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f3e:	2302      	movs	r3, #2
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	e013      	b.n	8006f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f44:	2301      	movs	r3, #1
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	e010      	b.n	8006f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b80      	cmp	r3, #128	; 0x80
 8006f4e:	d902      	bls.n	8006f56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f50:	2303      	movs	r3, #3
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	e00a      	b.n	8006f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b80      	cmp	r3, #128	; 0x80
 8006f5a:	d102      	bne.n	8006f62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	e004      	b.n	8006f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b70      	cmp	r3, #112	; 0x70
 8006f66:	d101      	bne.n	8006f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f68:	2301      	movs	r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f023 0207 	bic.w	r2, r3, #7
 8006f74:	4909      	ldr	r1, [pc, #36]	; (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f7c:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d001      	beq.n	8006f8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40022000 	.word	0x40022000

08006fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fa8:	2300      	movs	r3, #0
 8006faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fac:	2300      	movs	r3, #0
 8006fae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d03f      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fc4:	d01c      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fca:	d802      	bhi.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00e      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006fd0:	e01f      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006fd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fdc:	d01c      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006fde:	e018      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fe0:	4b85      	ldr	r3, [pc, #532]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	4a84      	ldr	r2, [pc, #528]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fec:	e015      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fab9 	bl	800756c <RCCEx_PLLSAI1_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ffe:	e00c      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3320      	adds	r3, #32
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fba0 	bl	800774c <RCCEx_PLLSAI2_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007010:	e003      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	74fb      	strb	r3, [r7, #19]
      break;
 8007016:	e000      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800701a:	7cfb      	ldrb	r3, [r7, #19]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10b      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007020:	4b75      	ldr	r3, [pc, #468]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800702e:	4972      	ldr	r1, [pc, #456]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007036:	e001      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007038:	7cfb      	ldrb	r3, [r7, #19]
 800703a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d03f      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800704c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007050:	d01c      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007052:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007056:	d802      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00e      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800705c:	e01f      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800705e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007068:	d01c      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800706a:	e018      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800706c:	4b62      	ldr	r3, [pc, #392]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4a61      	ldr	r2, [pc, #388]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007076:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007078:	e015      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3304      	adds	r3, #4
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fa73 	bl	800756c <RCCEx_PLLSAI1_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800708a:	e00c      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3320      	adds	r3, #32
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fb5a 	bl	800774c <RCCEx_PLLSAI2_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800709c:	e003      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	74fb      	strb	r3, [r7, #19]
      break;
 80070a2:	e000      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80070a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a6:	7cfb      	ldrb	r3, [r7, #19]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80070ac:	4b52      	ldr	r3, [pc, #328]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ba:	494f      	ldr	r1, [pc, #316]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070c2:	e001      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c4:	7cfb      	ldrb	r3, [r7, #19]
 80070c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a0 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070d6:	2300      	movs	r3, #0
 80070d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070da:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80070dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00d      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070f0:	4b41      	ldr	r3, [pc, #260]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80070f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f4:	4a40      	ldr	r2, [pc, #256]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80070f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070fa:	6593      	str	r3, [r2, #88]	; 0x58
 80070fc:	4b3e      	ldr	r3, [pc, #248]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80070fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007108:	2301      	movs	r3, #1
 800710a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800710c:	4b3b      	ldr	r3, [pc, #236]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a3a      	ldr	r2, [pc, #232]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007118:	f7fb f9da 	bl	80024d0 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800711e:	e009      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007120:	f7fb f9d6 	bl	80024d0 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d902      	bls.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	74fb      	strb	r3, [r7, #19]
        break;
 8007132:	e005      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007134:	4b31      	ldr	r3, [pc, #196]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0ef      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8007140:	7cfb      	ldrb	r3, [r7, #19]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d15c      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007146:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01f      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	429a      	cmp	r2, r3
 8007162:	d019      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007164:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007170:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007176:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800717c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007180:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	4a1c      	ldr	r2, [pc, #112]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800718c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007190:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d016      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a2:	f7fb f995 	bl	80024d0 <HAL_GetTick>
 80071a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a8:	e00b      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071aa:	f7fb f991 	bl	80024d0 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d902      	bls.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	74fb      	strb	r3, [r7, #19]
            break;
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071c2:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0ec      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10c      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e6:	4904      	ldr	r1, [pc, #16]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071ee:	e009      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	74bb      	strb	r3, [r7, #18]
 80071f4:	e006      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007200:	7cfb      	ldrb	r3, [r7, #19]
 8007202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007204:	7c7b      	ldrb	r3, [r7, #17]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d105      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800720a:	4b9e      	ldr	r3, [pc, #632]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800720c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720e:	4a9d      	ldr	r2, [pc, #628]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007222:	4b98      	ldr	r3, [pc, #608]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007228:	f023 0203 	bic.w	r2, r3, #3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	4994      	ldr	r1, [pc, #592]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007232:	4313      	orrs	r3, r2
 8007234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007244:	4b8f      	ldr	r3, [pc, #572]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724a:	f023 020c 	bic.w	r2, r3, #12
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	498c      	ldr	r1, [pc, #560]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007266:	4b87      	ldr	r3, [pc, #540]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	4983      	ldr	r1, [pc, #524]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007288:	4b7e      	ldr	r3, [pc, #504]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	497b      	ldr	r1, [pc, #492]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0310 	and.w	r3, r3, #16
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072aa:	4b76      	ldr	r3, [pc, #472]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b8:	4972      	ldr	r1, [pc, #456]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072cc:	4b6d      	ldr	r3, [pc, #436]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072da:	496a      	ldr	r1, [pc, #424]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ee:	4b65      	ldr	r3, [pc, #404]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fc:	4961      	ldr	r1, [pc, #388]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007310:	4b5c      	ldr	r3, [pc, #368]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731e:	4959      	ldr	r1, [pc, #356]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007332:	4b54      	ldr	r3, [pc, #336]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007338:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	4950      	ldr	r1, [pc, #320]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007354:	4b4b      	ldr	r3, [pc, #300]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007362:	4948      	ldr	r1, [pc, #288]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007364:	4313      	orrs	r3, r2
 8007366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007376:	4b43      	ldr	r3, [pc, #268]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007384:	493f      	ldr	r1, [pc, #252]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d028      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007398:	4b3a      	ldr	r3, [pc, #232]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a6:	4937      	ldr	r1, [pc, #220]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073b6:	d106      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073b8:	4b32      	ldr	r3, [pc, #200]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4a31      	ldr	r2, [pc, #196]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073c2:	60d3      	str	r3, [r2, #12]
 80073c4:	e011      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ce:	d10c      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	2101      	movs	r1, #1
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f8c8 	bl	800756c <RCCEx_PLLSAI1_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073e0:	7cfb      	ldrb	r3, [r7, #19]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80073e6:	7cfb      	ldrb	r3, [r7, #19]
 80073e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d028      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073f6:	4b23      	ldr	r3, [pc, #140]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	491f      	ldr	r1, [pc, #124]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007414:	d106      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007416:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	4a1a      	ldr	r2, [pc, #104]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800741c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007420:	60d3      	str	r3, [r2, #12]
 8007422:	e011      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800742c:	d10c      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3304      	adds	r3, #4
 8007432:	2101      	movs	r1, #1
 8007434:	4618      	mov	r0, r3
 8007436:	f000 f899 	bl	800756c <RCCEx_PLLSAI1_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800743e:	7cfb      	ldrb	r3, [r7, #19]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8007444:	7cfb      	ldrb	r3, [r7, #19]
 8007446:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02b      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007454:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007462:	4908      	ldr	r1, [pc, #32]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007464:	4313      	orrs	r3, r2
 8007466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007472:	d109      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007474:	4b03      	ldr	r3, [pc, #12]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	4a02      	ldr	r2, [pc, #8]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800747a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800747e:	60d3      	str	r3, [r2, #12]
 8007480:	e014      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007482:	bf00      	nop
 8007484:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007490:	d10c      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3304      	adds	r3, #4
 8007496:	2101      	movs	r1, #1
 8007498:	4618      	mov	r0, r3
 800749a:	f000 f867 	bl	800756c <RCCEx_PLLSAI1_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074a2:	7cfb      	ldrb	r3, [r7, #19]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d02f      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074b8:	4b2b      	ldr	r3, [pc, #172]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c6:	4928      	ldr	r1, [pc, #160]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074d6:	d10d      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	2102      	movs	r1, #2
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f844 	bl	800756c <RCCEx_PLLSAI1_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074e8:	7cfb      	ldrb	r3, [r7, #19]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d014      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80074ee:	7cfb      	ldrb	r3, [r7, #19]
 80074f0:	74bb      	strb	r3, [r7, #18]
 80074f2:	e011      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074fc:	d10c      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3320      	adds	r3, #32
 8007502:	2102      	movs	r1, #2
 8007504:	4618      	mov	r0, r3
 8007506:	f000 f921 	bl	800774c <RCCEx_PLLSAI2_Config>
 800750a:	4603      	mov	r3, r0
 800750c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800750e:	7cfb      	ldrb	r3, [r7, #19]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007514:	7cfb      	ldrb	r3, [r7, #19]
 8007516:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007524:	4b10      	ldr	r3, [pc, #64]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007532:	490d      	ldr	r1, [pc, #52]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007546:	4b08      	ldr	r3, [pc, #32]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007556:	4904      	ldr	r1, [pc, #16]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800755e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40021000 	.word	0x40021000

0800756c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800757a:	4b73      	ldr	r3, [pc, #460]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d018      	beq.n	80075b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007586:	4b70      	ldr	r3, [pc, #448]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f003 0203 	and.w	r2, r3, #3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d10d      	bne.n	80075b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
       ||
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800759e:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
       ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d044      	beq.n	800763c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
 80075b6:	e041      	b.n	800763c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d00c      	beq.n	80075da <RCCEx_PLLSAI1_Config+0x6e>
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d013      	beq.n	80075ec <RCCEx_PLLSAI1_Config+0x80>
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d120      	bne.n	800760a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075c8:	4b5f      	ldr	r3, [pc, #380]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d11d      	bne.n	8007610 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075d8:	e01a      	b.n	8007610 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075da:	4b5b      	ldr	r3, [pc, #364]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d116      	bne.n	8007614 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ea:	e013      	b.n	8007614 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075ec:	4b56      	ldr	r3, [pc, #344]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10f      	bne.n	8007618 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075f8:	4b53      	ldr	r3, [pc, #332]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d109      	bne.n	8007618 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007608:	e006      	b.n	8007618 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
      break;
 800760e:	e004      	b.n	800761a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007610:	bf00      	nop
 8007612:	e002      	b.n	800761a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007614:	bf00      	nop
 8007616:	e000      	b.n	800761a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007618:	bf00      	nop
    }

    if(status == HAL_OK)
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10d      	bne.n	800763c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007620:	4b49      	ldr	r3, [pc, #292]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6819      	ldr	r1, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	430b      	orrs	r3, r1
 8007636:	4944      	ldr	r1, [pc, #272]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007638:	4313      	orrs	r3, r2
 800763a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d17d      	bne.n	800773e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007642:	4b41      	ldr	r3, [pc, #260]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a40      	ldr	r2, [pc, #256]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007648:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800764c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764e:	f7fa ff3f 	bl	80024d0 <HAL_GetTick>
 8007652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007654:	e009      	b.n	800766a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007656:	f7fa ff3b 	bl	80024d0 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d902      	bls.n	800766a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	73fb      	strb	r3, [r7, #15]
        break;
 8007668:	e005      	b.n	8007676 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800766a:	4b37      	ldr	r3, [pc, #220]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1ef      	bne.n	8007656 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d160      	bne.n	800773e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d111      	bne.n	80076a6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007682:	4b31      	ldr	r3, [pc, #196]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800768a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6892      	ldr	r2, [r2, #8]
 8007692:	0211      	lsls	r1, r2, #8
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	68d2      	ldr	r2, [r2, #12]
 8007698:	0912      	lsrs	r2, r2, #4
 800769a:	0452      	lsls	r2, r2, #17
 800769c:	430a      	orrs	r2, r1
 800769e:	492a      	ldr	r1, [pc, #168]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	610b      	str	r3, [r1, #16]
 80076a4:	e027      	b.n	80076f6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d112      	bne.n	80076d2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076ac:	4b26      	ldr	r3, [pc, #152]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80076b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6892      	ldr	r2, [r2, #8]
 80076bc:	0211      	lsls	r1, r2, #8
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6912      	ldr	r2, [r2, #16]
 80076c2:	0852      	lsrs	r2, r2, #1
 80076c4:	3a01      	subs	r2, #1
 80076c6:	0552      	lsls	r2, r2, #21
 80076c8:	430a      	orrs	r2, r1
 80076ca:	491f      	ldr	r1, [pc, #124]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	610b      	str	r3, [r1, #16]
 80076d0:	e011      	b.n	80076f6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076d2:	4b1d      	ldr	r3, [pc, #116]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80076da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6892      	ldr	r2, [r2, #8]
 80076e2:	0211      	lsls	r1, r2, #8
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6952      	ldr	r2, [r2, #20]
 80076e8:	0852      	lsrs	r2, r2, #1
 80076ea:	3a01      	subs	r2, #1
 80076ec:	0652      	lsls	r2, r2, #25
 80076ee:	430a      	orrs	r2, r1
 80076f0:	4915      	ldr	r1, [pc, #84]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80076f6:	4b14      	ldr	r3, [pc, #80]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a13      	ldr	r2, [pc, #76]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 80076fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007700:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007702:	f7fa fee5 	bl	80024d0 <HAL_GetTick>
 8007706:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007708:	e009      	b.n	800771e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800770a:	f7fa fee1 	bl	80024d0 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d902      	bls.n	800771e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	73fb      	strb	r3, [r7, #15]
          break;
 800771c:	e005      	b.n	800772a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800771e:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0ef      	beq.n	800770a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d106      	bne.n	800773e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	4903      	ldr	r1, [pc, #12]	; (8007748 <RCCEx_PLLSAI1_Config+0x1dc>)
 800773a:	4313      	orrs	r3, r2
 800773c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800773e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40021000 	.word	0x40021000

0800774c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800775a:	4b68      	ldr	r3, [pc, #416]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d018      	beq.n	8007798 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007766:	4b65      	ldr	r3, [pc, #404]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f003 0203 	and.w	r2, r3, #3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d10d      	bne.n	8007792 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
       ||
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800777e:	4b5f      	ldr	r3, [pc, #380]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	091b      	lsrs	r3, r3, #4
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
       ||
 800778e:	429a      	cmp	r2, r3
 8007790:	d044      	beq.n	800781c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
 8007796:	e041      	b.n	800781c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d00c      	beq.n	80077ba <RCCEx_PLLSAI2_Config+0x6e>
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d013      	beq.n	80077cc <RCCEx_PLLSAI2_Config+0x80>
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d120      	bne.n	80077ea <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80077a8:	4b54      	ldr	r3, [pc, #336]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d11d      	bne.n	80077f0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077b8:	e01a      	b.n	80077f0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077ba:	4b50      	ldr	r3, [pc, #320]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d116      	bne.n	80077f4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077ca:	e013      	b.n	80077f4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077cc:	4b4b      	ldr	r3, [pc, #300]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10f      	bne.n	80077f8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077d8:	4b48      	ldr	r3, [pc, #288]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077e8:	e006      	b.n	80077f8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
      break;
 80077ee:	e004      	b.n	80077fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80077f0:	bf00      	nop
 80077f2:	e002      	b.n	80077fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80077f4:	bf00      	nop
 80077f6:	e000      	b.n	80077fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80077f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10d      	bne.n	800781c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007800:	4b3e      	ldr	r3, [pc, #248]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6819      	ldr	r1, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	430b      	orrs	r3, r1
 8007816:	4939      	ldr	r1, [pc, #228]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007818:	4313      	orrs	r3, r2
 800781a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d167      	bne.n	80078f2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007822:	4b36      	ldr	r3, [pc, #216]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a35      	ldr	r2, [pc, #212]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800782c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782e:	f7fa fe4f 	bl	80024d0 <HAL_GetTick>
 8007832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007834:	e009      	b.n	800784a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007836:	f7fa fe4b 	bl	80024d0 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d902      	bls.n	800784a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	73fb      	strb	r3, [r7, #15]
        break;
 8007848:	e005      	b.n	8007856 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800784a:	4b2c      	ldr	r3, [pc, #176]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1ef      	bne.n	8007836 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d14a      	bne.n	80078f2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d111      	bne.n	8007886 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007862:	4b26      	ldr	r3, [pc, #152]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800786a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6892      	ldr	r2, [r2, #8]
 8007872:	0211      	lsls	r1, r2, #8
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	68d2      	ldr	r2, [r2, #12]
 8007878:	0912      	lsrs	r2, r2, #4
 800787a:	0452      	lsls	r2, r2, #17
 800787c:	430a      	orrs	r2, r1
 800787e:	491f      	ldr	r1, [pc, #124]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007880:	4313      	orrs	r3, r2
 8007882:	614b      	str	r3, [r1, #20]
 8007884:	e011      	b.n	80078aa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007886:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800788e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6892      	ldr	r2, [r2, #8]
 8007896:	0211      	lsls	r1, r2, #8
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6912      	ldr	r2, [r2, #16]
 800789c:	0852      	lsrs	r2, r2, #1
 800789e:	3a01      	subs	r2, #1
 80078a0:	0652      	lsls	r2, r2, #25
 80078a2:	430a      	orrs	r2, r1
 80078a4:	4915      	ldr	r1, [pc, #84]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80078aa:	4b14      	ldr	r3, [pc, #80]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a13      	ldr	r2, [pc, #76]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80078b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b6:	f7fa fe0b 	bl	80024d0 <HAL_GetTick>
 80078ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078bc:	e009      	b.n	80078d2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078be:	f7fa fe07 	bl	80024d0 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d902      	bls.n	80078d2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	73fb      	strb	r3, [r7, #15]
          break;
 80078d0:	e005      	b.n	80078de <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078d2:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0ef      	beq.n	80078be <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80078e6:	695a      	ldr	r2, [r3, #20]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	4903      	ldr	r1, [pc, #12]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40021000 	.word	0x40021000

08007900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e049      	b.n	80079a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fa fc58 	bl	80021dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f000 fab0 	bl	8007ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d001      	beq.n	80079c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e04f      	b.n	8007a68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0201 	orr.w	r2, r2, #1
 80079de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a23      	ldr	r2, [pc, #140]	; (8007a74 <HAL_TIM_Base_Start_IT+0xc4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x76>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f2:	d018      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x76>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a1f      	ldr	r2, [pc, #124]	; (8007a78 <HAL_TIM_Base_Start_IT+0xc8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x76>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a1e      	ldr	r2, [pc, #120]	; (8007a7c <HAL_TIM_Base_Start_IT+0xcc>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00e      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x76>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1c      	ldr	r2, [pc, #112]	; (8007a80 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d009      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x76>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a1b      	ldr	r2, [pc, #108]	; (8007a84 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x76>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a19      	ldr	r2, [pc, #100]	; (8007a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d115      	bne.n	8007a52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	4b17      	ldr	r3, [pc, #92]	; (8007a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b06      	cmp	r3, #6
 8007a36:	d015      	beq.n	8007a64 <HAL_TIM_Base_Start_IT+0xb4>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3e:	d011      	beq.n	8007a64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a50:	e008      	b.n	8007a64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0201 	orr.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e000      	b.n	8007a66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	40012c00 	.word	0x40012c00
 8007a78:	40000400 	.word	0x40000400
 8007a7c:	40000800 	.word	0x40000800
 8007a80:	40000c00 	.word	0x40000c00
 8007a84:	40013400 	.word	0x40013400
 8007a88:	40014000 	.word	0x40014000
 8007a8c:	00010007 	.word	0x00010007

08007a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d122      	bne.n	8007aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d11b      	bne.n	8007aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0202 	mvn.w	r2, #2
 8007abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9c8 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007ad8:	e005      	b.n	8007ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9ba 	bl	8007e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f9cb 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d122      	bne.n	8007b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d11b      	bne.n	8007b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0204 	mvn.w	r2, #4
 8007b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2202      	movs	r2, #2
 8007b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f99e 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007b2c:	e005      	b.n	8007b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f990 	bl	8007e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9a1 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d122      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d11b      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0208 	mvn.w	r2, #8
 8007b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2204      	movs	r2, #4
 8007b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f974 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007b80:	e005      	b.n	8007b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f966 	bl	8007e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f977 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d122      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b10      	cmp	r3, #16
 8007bae:	d11b      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f06f 0210 	mvn.w	r2, #16
 8007bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2208      	movs	r2, #8
 8007bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f94a 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007bd4:	e005      	b.n	8007be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f93c 	bl	8007e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f94d 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d10e      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d107      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0201 	mvn.w	r2, #1
 8007c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f916 	bl	8007e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1e:	2b80      	cmp	r3, #128	; 0x80
 8007c20:	d10e      	bne.n	8007c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d107      	bne.n	8007c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 faf8 	bl	8008230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	d10e      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5a:	2b80      	cmp	r3, #128	; 0x80
 8007c5c:	d107      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 faeb 	bl	8008244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b40      	cmp	r3, #64	; 0x40
 8007c7a:	d10e      	bne.n	8007c9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d107      	bne.n	8007c9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8fb 	bl	8007e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	d10e      	bne.n	8007cc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d107      	bne.n	8007cc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f06f 0220 	mvn.w	r2, #32
 8007cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 faab 	bl	800821c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_TIM_ConfigClockSource+0x18>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e0a8      	b.n	8007e38 <HAL_TIM_ConfigClockSource+0x16a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d08:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d10:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d067      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0x124>
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d80b      	bhi.n	8007d3e <HAL_TIM_ConfigClockSource+0x70>
 8007d26:	2b10      	cmp	r3, #16
 8007d28:	d073      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x144>
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d802      	bhi.n	8007d34 <HAL_TIM_ConfigClockSource+0x66>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d06f      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d32:	e078      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d06c      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x144>
 8007d38:	2b30      	cmp	r3, #48	; 0x30
 8007d3a:	d06a      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007d3c:	e073      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007d3e:	2b70      	cmp	r3, #112	; 0x70
 8007d40:	d00d      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x90>
 8007d42:	2b70      	cmp	r3, #112	; 0x70
 8007d44:	d804      	bhi.n	8007d50 <HAL_TIM_ConfigClockSource+0x82>
 8007d46:	2b50      	cmp	r3, #80	; 0x50
 8007d48:	d033      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0xe4>
 8007d4a:	2b60      	cmp	r3, #96	; 0x60
 8007d4c:	d041      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007d4e:	e06a      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d54:	d066      	beq.n	8007e24 <HAL_TIM_ConfigClockSource+0x156>
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5a:	d017      	beq.n	8007d8c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007d5c:	e063      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6899      	ldr	r1, [r3, #8]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f000 f9ad 	bl	80080cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	609a      	str	r2, [r3, #8]
      break;
 8007d8a:	e04c      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6899      	ldr	r1, [r3, #8]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f000 f996 	bl	80080cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dae:	609a      	str	r2, [r3, #8]
      break;
 8007db0:	e039      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6859      	ldr	r1, [r3, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f000 f90a 	bl	8007fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2150      	movs	r1, #80	; 0x50
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f963 	bl	8008096 <TIM_ITRx_SetConfig>
      break;
 8007dd0:	e029      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6859      	ldr	r1, [r3, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f000 f929 	bl	8008036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2160      	movs	r1, #96	; 0x60
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 f953 	bl	8008096 <TIM_ITRx_SetConfig>
      break;
 8007df0:	e019      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	6859      	ldr	r1, [r3, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f000 f8ea 	bl	8007fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2140      	movs	r1, #64	; 0x40
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f943 	bl	8008096 <TIM_ITRx_SetConfig>
      break;
 8007e10:	e009      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	f000 f93a 	bl	8008096 <TIM_ITRx_SetConfig>
        break;
 8007e22:	e000      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007e24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a40      	ldr	r2, [pc, #256]	; (8007fb8 <TIM_Base_SetConfig+0x114>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d013      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec2:	d00f      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a3d      	ldr	r2, [pc, #244]	; (8007fbc <TIM_Base_SetConfig+0x118>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00b      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a3c      	ldr	r2, [pc, #240]	; (8007fc0 <TIM_Base_SetConfig+0x11c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d007      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a3b      	ldr	r2, [pc, #236]	; (8007fc4 <TIM_Base_SetConfig+0x120>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a3a      	ldr	r2, [pc, #232]	; (8007fc8 <TIM_Base_SetConfig+0x124>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d108      	bne.n	8007ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a2f      	ldr	r2, [pc, #188]	; (8007fb8 <TIM_Base_SetConfig+0x114>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d01f      	beq.n	8007f3e <TIM_Base_SetConfig+0x9a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f04:	d01b      	beq.n	8007f3e <TIM_Base_SetConfig+0x9a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a2c      	ldr	r2, [pc, #176]	; (8007fbc <TIM_Base_SetConfig+0x118>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d017      	beq.n	8007f3e <TIM_Base_SetConfig+0x9a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a2b      	ldr	r2, [pc, #172]	; (8007fc0 <TIM_Base_SetConfig+0x11c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <TIM_Base_SetConfig+0x9a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2a      	ldr	r2, [pc, #168]	; (8007fc4 <TIM_Base_SetConfig+0x120>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00f      	beq.n	8007f3e <TIM_Base_SetConfig+0x9a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a29      	ldr	r2, [pc, #164]	; (8007fc8 <TIM_Base_SetConfig+0x124>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00b      	beq.n	8007f3e <TIM_Base_SetConfig+0x9a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a28      	ldr	r2, [pc, #160]	; (8007fcc <TIM_Base_SetConfig+0x128>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d007      	beq.n	8007f3e <TIM_Base_SetConfig+0x9a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a27      	ldr	r2, [pc, #156]	; (8007fd0 <TIM_Base_SetConfig+0x12c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d003      	beq.n	8007f3e <TIM_Base_SetConfig+0x9a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a26      	ldr	r2, [pc, #152]	; (8007fd4 <TIM_Base_SetConfig+0x130>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d108      	bne.n	8007f50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <TIM_Base_SetConfig+0x114>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00f      	beq.n	8007f9c <TIM_Base_SetConfig+0xf8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a12      	ldr	r2, [pc, #72]	; (8007fc8 <TIM_Base_SetConfig+0x124>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00b      	beq.n	8007f9c <TIM_Base_SetConfig+0xf8>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <TIM_Base_SetConfig+0x128>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d007      	beq.n	8007f9c <TIM_Base_SetConfig+0xf8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a10      	ldr	r2, [pc, #64]	; (8007fd0 <TIM_Base_SetConfig+0x12c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_Base_SetConfig+0xf8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a0f      	ldr	r2, [pc, #60]	; (8007fd4 <TIM_Base_SetConfig+0x130>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d103      	bne.n	8007fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	615a      	str	r2, [r3, #20]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	40000800 	.word	0x40000800
 8007fc4:	40000c00 	.word	0x40000c00
 8007fc8:	40013400 	.word	0x40013400
 8007fcc:	40014000 	.word	0x40014000
 8007fd0:	40014400 	.word	0x40014400
 8007fd4:	40014800 	.word	0x40014800

08007fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f023 0201 	bic.w	r2, r3, #1
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f023 030a 	bic.w	r3, r3, #10
 8008014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008036:	b480      	push	{r7}
 8008038:	b087      	sub	sp, #28
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f023 0210 	bic.w	r2, r3, #16
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	031b      	lsls	r3, r3, #12
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f043 0307 	orr.w	r3, r3, #7
 80080b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	609a      	str	r2, [r3, #8]
}
 80080c0:	bf00      	nop
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	021a      	lsls	r2, r3, #8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	609a      	str	r2, [r3, #8]
}
 8008100:	bf00      	nop
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008120:	2302      	movs	r3, #2
 8008122:	e068      	b.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a2e      	ldr	r2, [pc, #184]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d004      	beq.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a2d      	ldr	r2, [pc, #180]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d108      	bne.n	800816a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800815e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1e      	ldr	r2, [pc, #120]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d01d      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008196:	d018      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1b      	ldr	r2, [pc, #108]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d013      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a1a      	ldr	r2, [pc, #104]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d00e      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a18      	ldr	r2, [pc, #96]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d009      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a13      	ldr	r2, [pc, #76]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d004      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a14      	ldr	r2, [pc, #80]	; (8008218 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d10c      	bne.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40013400 	.word	0x40013400
 800820c:	40000400 	.word	0x40000400
 8008210:	40000800 	.word	0x40000800
 8008214:	40000c00 	.word	0x40000c00
 8008218:	40014000 	.word	0x40014000

0800821c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e040      	b.n	80082ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7f9 ffd2 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2224      	movs	r2, #36	; 0x24
 8008284:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0201 	bic.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f82c 	bl	80082f4 <UART_SetConfig>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e022      	b.n	80082ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 faaa 	bl	8008808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fb31 	bl	800894c <UART_CheckIdleState>
 80082ea:	4603      	mov	r3, r0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80082f8:	b088      	sub	sp, #32
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	4313      	orrs	r3, r2
 8008318:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4bac      	ldr	r3, [pc, #688]	; (80085d4 <UART_SetConfig+0x2e0>)
 8008322:	4013      	ands	r3, r2
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6812      	ldr	r2, [r2, #0]
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	430b      	orrs	r3, r1
 800832c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4aa2      	ldr	r2, [pc, #648]	; (80085d8 <UART_SetConfig+0x2e4>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d004      	beq.n	800835e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	4313      	orrs	r3, r2
 800835c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	69fa      	ldr	r2, [r7, #28]
 800836e:	430a      	orrs	r2, r1
 8008370:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a99      	ldr	r2, [pc, #612]	; (80085dc <UART_SetConfig+0x2e8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d121      	bne.n	80083c0 <UART_SetConfig+0xcc>
 800837c:	4b98      	ldr	r3, [pc, #608]	; (80085e0 <UART_SetConfig+0x2ec>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	2b03      	cmp	r3, #3
 8008388:	d816      	bhi.n	80083b8 <UART_SetConfig+0xc4>
 800838a:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <UART_SetConfig+0x9c>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080083a1 	.word	0x080083a1
 8008394:	080083ad 	.word	0x080083ad
 8008398:	080083a7 	.word	0x080083a7
 800839c:	080083b3 	.word	0x080083b3
 80083a0:	2301      	movs	r3, #1
 80083a2:	76fb      	strb	r3, [r7, #27]
 80083a4:	e0e8      	b.n	8008578 <UART_SetConfig+0x284>
 80083a6:	2302      	movs	r3, #2
 80083a8:	76fb      	strb	r3, [r7, #27]
 80083aa:	e0e5      	b.n	8008578 <UART_SetConfig+0x284>
 80083ac:	2304      	movs	r3, #4
 80083ae:	76fb      	strb	r3, [r7, #27]
 80083b0:	e0e2      	b.n	8008578 <UART_SetConfig+0x284>
 80083b2:	2308      	movs	r3, #8
 80083b4:	76fb      	strb	r3, [r7, #27]
 80083b6:	e0df      	b.n	8008578 <UART_SetConfig+0x284>
 80083b8:	2310      	movs	r3, #16
 80083ba:	76fb      	strb	r3, [r7, #27]
 80083bc:	bf00      	nop
 80083be:	e0db      	b.n	8008578 <UART_SetConfig+0x284>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a87      	ldr	r2, [pc, #540]	; (80085e4 <UART_SetConfig+0x2f0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d134      	bne.n	8008434 <UART_SetConfig+0x140>
 80083ca:	4b85      	ldr	r3, [pc, #532]	; (80085e0 <UART_SetConfig+0x2ec>)
 80083cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d0:	f003 030c 	and.w	r3, r3, #12
 80083d4:	2b0c      	cmp	r3, #12
 80083d6:	d829      	bhi.n	800842c <UART_SetConfig+0x138>
 80083d8:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0xec>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	08008415 	.word	0x08008415
 80083e4:	0800842d 	.word	0x0800842d
 80083e8:	0800842d 	.word	0x0800842d
 80083ec:	0800842d 	.word	0x0800842d
 80083f0:	08008421 	.word	0x08008421
 80083f4:	0800842d 	.word	0x0800842d
 80083f8:	0800842d 	.word	0x0800842d
 80083fc:	0800842d 	.word	0x0800842d
 8008400:	0800841b 	.word	0x0800841b
 8008404:	0800842d 	.word	0x0800842d
 8008408:	0800842d 	.word	0x0800842d
 800840c:	0800842d 	.word	0x0800842d
 8008410:	08008427 	.word	0x08008427
 8008414:	2300      	movs	r3, #0
 8008416:	76fb      	strb	r3, [r7, #27]
 8008418:	e0ae      	b.n	8008578 <UART_SetConfig+0x284>
 800841a:	2302      	movs	r3, #2
 800841c:	76fb      	strb	r3, [r7, #27]
 800841e:	e0ab      	b.n	8008578 <UART_SetConfig+0x284>
 8008420:	2304      	movs	r3, #4
 8008422:	76fb      	strb	r3, [r7, #27]
 8008424:	e0a8      	b.n	8008578 <UART_SetConfig+0x284>
 8008426:	2308      	movs	r3, #8
 8008428:	76fb      	strb	r3, [r7, #27]
 800842a:	e0a5      	b.n	8008578 <UART_SetConfig+0x284>
 800842c:	2310      	movs	r3, #16
 800842e:	76fb      	strb	r3, [r7, #27]
 8008430:	bf00      	nop
 8008432:	e0a1      	b.n	8008578 <UART_SetConfig+0x284>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a6b      	ldr	r2, [pc, #428]	; (80085e8 <UART_SetConfig+0x2f4>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d120      	bne.n	8008480 <UART_SetConfig+0x18c>
 800843e:	4b68      	ldr	r3, [pc, #416]	; (80085e0 <UART_SetConfig+0x2ec>)
 8008440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008444:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008448:	2b10      	cmp	r3, #16
 800844a:	d00f      	beq.n	800846c <UART_SetConfig+0x178>
 800844c:	2b10      	cmp	r3, #16
 800844e:	d802      	bhi.n	8008456 <UART_SetConfig+0x162>
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <UART_SetConfig+0x16c>
 8008454:	e010      	b.n	8008478 <UART_SetConfig+0x184>
 8008456:	2b20      	cmp	r3, #32
 8008458:	d005      	beq.n	8008466 <UART_SetConfig+0x172>
 800845a:	2b30      	cmp	r3, #48	; 0x30
 800845c:	d009      	beq.n	8008472 <UART_SetConfig+0x17e>
 800845e:	e00b      	b.n	8008478 <UART_SetConfig+0x184>
 8008460:	2300      	movs	r3, #0
 8008462:	76fb      	strb	r3, [r7, #27]
 8008464:	e088      	b.n	8008578 <UART_SetConfig+0x284>
 8008466:	2302      	movs	r3, #2
 8008468:	76fb      	strb	r3, [r7, #27]
 800846a:	e085      	b.n	8008578 <UART_SetConfig+0x284>
 800846c:	2304      	movs	r3, #4
 800846e:	76fb      	strb	r3, [r7, #27]
 8008470:	e082      	b.n	8008578 <UART_SetConfig+0x284>
 8008472:	2308      	movs	r3, #8
 8008474:	76fb      	strb	r3, [r7, #27]
 8008476:	e07f      	b.n	8008578 <UART_SetConfig+0x284>
 8008478:	2310      	movs	r3, #16
 800847a:	76fb      	strb	r3, [r7, #27]
 800847c:	bf00      	nop
 800847e:	e07b      	b.n	8008578 <UART_SetConfig+0x284>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a59      	ldr	r2, [pc, #356]	; (80085ec <UART_SetConfig+0x2f8>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d120      	bne.n	80084cc <UART_SetConfig+0x1d8>
 800848a:	4b55      	ldr	r3, [pc, #340]	; (80085e0 <UART_SetConfig+0x2ec>)
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008490:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008494:	2b40      	cmp	r3, #64	; 0x40
 8008496:	d00f      	beq.n	80084b8 <UART_SetConfig+0x1c4>
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d802      	bhi.n	80084a2 <UART_SetConfig+0x1ae>
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <UART_SetConfig+0x1b8>
 80084a0:	e010      	b.n	80084c4 <UART_SetConfig+0x1d0>
 80084a2:	2b80      	cmp	r3, #128	; 0x80
 80084a4:	d005      	beq.n	80084b2 <UART_SetConfig+0x1be>
 80084a6:	2bc0      	cmp	r3, #192	; 0xc0
 80084a8:	d009      	beq.n	80084be <UART_SetConfig+0x1ca>
 80084aa:	e00b      	b.n	80084c4 <UART_SetConfig+0x1d0>
 80084ac:	2300      	movs	r3, #0
 80084ae:	76fb      	strb	r3, [r7, #27]
 80084b0:	e062      	b.n	8008578 <UART_SetConfig+0x284>
 80084b2:	2302      	movs	r3, #2
 80084b4:	76fb      	strb	r3, [r7, #27]
 80084b6:	e05f      	b.n	8008578 <UART_SetConfig+0x284>
 80084b8:	2304      	movs	r3, #4
 80084ba:	76fb      	strb	r3, [r7, #27]
 80084bc:	e05c      	b.n	8008578 <UART_SetConfig+0x284>
 80084be:	2308      	movs	r3, #8
 80084c0:	76fb      	strb	r3, [r7, #27]
 80084c2:	e059      	b.n	8008578 <UART_SetConfig+0x284>
 80084c4:	2310      	movs	r3, #16
 80084c6:	76fb      	strb	r3, [r7, #27]
 80084c8:	bf00      	nop
 80084ca:	e055      	b.n	8008578 <UART_SetConfig+0x284>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a47      	ldr	r2, [pc, #284]	; (80085f0 <UART_SetConfig+0x2fc>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d124      	bne.n	8008520 <UART_SetConfig+0x22c>
 80084d6:	4b42      	ldr	r3, [pc, #264]	; (80085e0 <UART_SetConfig+0x2ec>)
 80084d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e4:	d012      	beq.n	800850c <UART_SetConfig+0x218>
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ea:	d802      	bhi.n	80084f2 <UART_SetConfig+0x1fe>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d007      	beq.n	8008500 <UART_SetConfig+0x20c>
 80084f0:	e012      	b.n	8008518 <UART_SetConfig+0x224>
 80084f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f6:	d006      	beq.n	8008506 <UART_SetConfig+0x212>
 80084f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084fc:	d009      	beq.n	8008512 <UART_SetConfig+0x21e>
 80084fe:	e00b      	b.n	8008518 <UART_SetConfig+0x224>
 8008500:	2300      	movs	r3, #0
 8008502:	76fb      	strb	r3, [r7, #27]
 8008504:	e038      	b.n	8008578 <UART_SetConfig+0x284>
 8008506:	2302      	movs	r3, #2
 8008508:	76fb      	strb	r3, [r7, #27]
 800850a:	e035      	b.n	8008578 <UART_SetConfig+0x284>
 800850c:	2304      	movs	r3, #4
 800850e:	76fb      	strb	r3, [r7, #27]
 8008510:	e032      	b.n	8008578 <UART_SetConfig+0x284>
 8008512:	2308      	movs	r3, #8
 8008514:	76fb      	strb	r3, [r7, #27]
 8008516:	e02f      	b.n	8008578 <UART_SetConfig+0x284>
 8008518:	2310      	movs	r3, #16
 800851a:	76fb      	strb	r3, [r7, #27]
 800851c:	bf00      	nop
 800851e:	e02b      	b.n	8008578 <UART_SetConfig+0x284>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a2c      	ldr	r2, [pc, #176]	; (80085d8 <UART_SetConfig+0x2e4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d124      	bne.n	8008574 <UART_SetConfig+0x280>
 800852a:	4b2d      	ldr	r3, [pc, #180]	; (80085e0 <UART_SetConfig+0x2ec>)
 800852c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008538:	d012      	beq.n	8008560 <UART_SetConfig+0x26c>
 800853a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853e:	d802      	bhi.n	8008546 <UART_SetConfig+0x252>
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <UART_SetConfig+0x260>
 8008544:	e012      	b.n	800856c <UART_SetConfig+0x278>
 8008546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800854a:	d006      	beq.n	800855a <UART_SetConfig+0x266>
 800854c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008550:	d009      	beq.n	8008566 <UART_SetConfig+0x272>
 8008552:	e00b      	b.n	800856c <UART_SetConfig+0x278>
 8008554:	2300      	movs	r3, #0
 8008556:	76fb      	strb	r3, [r7, #27]
 8008558:	e00e      	b.n	8008578 <UART_SetConfig+0x284>
 800855a:	2302      	movs	r3, #2
 800855c:	76fb      	strb	r3, [r7, #27]
 800855e:	e00b      	b.n	8008578 <UART_SetConfig+0x284>
 8008560:	2304      	movs	r3, #4
 8008562:	76fb      	strb	r3, [r7, #27]
 8008564:	e008      	b.n	8008578 <UART_SetConfig+0x284>
 8008566:	2308      	movs	r3, #8
 8008568:	76fb      	strb	r3, [r7, #27]
 800856a:	e005      	b.n	8008578 <UART_SetConfig+0x284>
 800856c:	2310      	movs	r3, #16
 800856e:	76fb      	strb	r3, [r7, #27]
 8008570:	bf00      	nop
 8008572:	e001      	b.n	8008578 <UART_SetConfig+0x284>
 8008574:	2310      	movs	r3, #16
 8008576:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a16      	ldr	r2, [pc, #88]	; (80085d8 <UART_SetConfig+0x2e4>)
 800857e:	4293      	cmp	r3, r2
 8008580:	f040 8087 	bne.w	8008692 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008584:	7efb      	ldrb	r3, [r7, #27]
 8008586:	2b08      	cmp	r3, #8
 8008588:	d836      	bhi.n	80085f8 <UART_SetConfig+0x304>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <UART_SetConfig+0x29c>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085b5 	.word	0x080085b5
 8008594:	080085f9 	.word	0x080085f9
 8008598:	080085bd 	.word	0x080085bd
 800859c:	080085f9 	.word	0x080085f9
 80085a0:	080085c3 	.word	0x080085c3
 80085a4:	080085f9 	.word	0x080085f9
 80085a8:	080085f9 	.word	0x080085f9
 80085ac:	080085f9 	.word	0x080085f9
 80085b0:	080085cb 	.word	0x080085cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b4:	f7fe fc68 	bl	8006e88 <HAL_RCC_GetPCLK1Freq>
 80085b8:	6178      	str	r0, [r7, #20]
        break;
 80085ba:	e022      	b.n	8008602 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <UART_SetConfig+0x300>)
 80085be:	617b      	str	r3, [r7, #20]
        break;
 80085c0:	e01f      	b.n	8008602 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c2:	f7fe fbcb 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 80085c6:	6178      	str	r0, [r7, #20]
        break;
 80085c8:	e01b      	b.n	8008602 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ce:	617b      	str	r3, [r7, #20]
        break;
 80085d0:	e017      	b.n	8008602 <UART_SetConfig+0x30e>
 80085d2:	bf00      	nop
 80085d4:	efff69f3 	.word	0xefff69f3
 80085d8:	40008000 	.word	0x40008000
 80085dc:	40013800 	.word	0x40013800
 80085e0:	40021000 	.word	0x40021000
 80085e4:	40004400 	.word	0x40004400
 80085e8:	40004800 	.word	0x40004800
 80085ec:	40004c00 	.word	0x40004c00
 80085f0:	40005000 	.word	0x40005000
 80085f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	76bb      	strb	r3, [r7, #26]
        break;
 8008600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 80f1 	beq.w	80087ec <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	4413      	add	r3, r2
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	429a      	cmp	r2, r3
 8008618:	d305      	bcc.n	8008626 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	429a      	cmp	r2, r3
 8008624:	d902      	bls.n	800862c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	76bb      	strb	r3, [r7, #26]
 800862a:	e0df      	b.n	80087ec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	4619      	mov	r1, r3
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	f04f 0400 	mov.w	r4, #0
 800863c:	0214      	lsls	r4, r2, #8
 800863e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008642:	020b      	lsls	r3, r1, #8
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6852      	ldr	r2, [r2, #4]
 8008648:	0852      	lsrs	r2, r2, #1
 800864a:	4611      	mov	r1, r2
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	eb13 0b01 	adds.w	fp, r3, r1
 8008654:	eb44 0c02 	adc.w	ip, r4, r2
 8008658:	4658      	mov	r0, fp
 800865a:	4661      	mov	r1, ip
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f04f 0400 	mov.w	r4, #0
 8008664:	461a      	mov	r2, r3
 8008666:	4623      	mov	r3, r4
 8008668:	f7f7 fdae 	bl	80001c8 <__aeabi_uldivmod>
 800866c:	4603      	mov	r3, r0
 800866e:	460c      	mov	r4, r1
 8008670:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008678:	d308      	bcc.n	800868c <UART_SetConfig+0x398>
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008680:	d204      	bcs.n	800868c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	60da      	str	r2, [r3, #12]
 800868a:	e0af      	b.n	80087ec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	76bb      	strb	r3, [r7, #26]
 8008690:	e0ac      	b.n	80087ec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800869a:	d15b      	bne.n	8008754 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800869c:	7efb      	ldrb	r3, [r7, #27]
 800869e:	2b08      	cmp	r3, #8
 80086a0:	d827      	bhi.n	80086f2 <UART_SetConfig+0x3fe>
 80086a2:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <UART_SetConfig+0x3b4>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086d5 	.word	0x080086d5
 80086b0:	080086dd 	.word	0x080086dd
 80086b4:	080086f3 	.word	0x080086f3
 80086b8:	080086e3 	.word	0x080086e3
 80086bc:	080086f3 	.word	0x080086f3
 80086c0:	080086f3 	.word	0x080086f3
 80086c4:	080086f3 	.word	0x080086f3
 80086c8:	080086eb 	.word	0x080086eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086cc:	f7fe fbdc 	bl	8006e88 <HAL_RCC_GetPCLK1Freq>
 80086d0:	6178      	str	r0, [r7, #20]
        break;
 80086d2:	e013      	b.n	80086fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086d4:	f7fe fbee 	bl	8006eb4 <HAL_RCC_GetPCLK2Freq>
 80086d8:	6178      	str	r0, [r7, #20]
        break;
 80086da:	e00f      	b.n	80086fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086dc:	4b49      	ldr	r3, [pc, #292]	; (8008804 <UART_SetConfig+0x510>)
 80086de:	617b      	str	r3, [r7, #20]
        break;
 80086e0:	e00c      	b.n	80086fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086e2:	f7fe fb3b 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 80086e6:	6178      	str	r0, [r7, #20]
        break;
 80086e8:	e008      	b.n	80086fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ee:	617b      	str	r3, [r7, #20]
        break;
 80086f0:	e004      	b.n	80086fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	76bb      	strb	r3, [r7, #26]
        break;
 80086fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d074      	beq.n	80087ec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	005a      	lsls	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	441a      	add	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	fbb2 f3f3 	udiv	r3, r2, r3
 8008716:	b29b      	uxth	r3, r3
 8008718:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b0f      	cmp	r3, #15
 800871e:	d916      	bls.n	800874e <UART_SetConfig+0x45a>
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008726:	d212      	bcs.n	800874e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	b29b      	uxth	r3, r3
 800872c:	f023 030f 	bic.w	r3, r3, #15
 8008730:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	085b      	lsrs	r3, r3, #1
 8008736:	b29b      	uxth	r3, r3
 8008738:	f003 0307 	and.w	r3, r3, #7
 800873c:	b29a      	uxth	r2, r3
 800873e:	89fb      	ldrh	r3, [r7, #14]
 8008740:	4313      	orrs	r3, r2
 8008742:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	89fa      	ldrh	r2, [r7, #14]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	e04e      	b.n	80087ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	76bb      	strb	r3, [r7, #26]
 8008752:	e04b      	b.n	80087ec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008754:	7efb      	ldrb	r3, [r7, #27]
 8008756:	2b08      	cmp	r3, #8
 8008758:	d827      	bhi.n	80087aa <UART_SetConfig+0x4b6>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <UART_SetConfig+0x46c>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008785 	.word	0x08008785
 8008764:	0800878d 	.word	0x0800878d
 8008768:	08008795 	.word	0x08008795
 800876c:	080087ab 	.word	0x080087ab
 8008770:	0800879b 	.word	0x0800879b
 8008774:	080087ab 	.word	0x080087ab
 8008778:	080087ab 	.word	0x080087ab
 800877c:	080087ab 	.word	0x080087ab
 8008780:	080087a3 	.word	0x080087a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008784:	f7fe fb80 	bl	8006e88 <HAL_RCC_GetPCLK1Freq>
 8008788:	6178      	str	r0, [r7, #20]
        break;
 800878a:	e013      	b.n	80087b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800878c:	f7fe fb92 	bl	8006eb4 <HAL_RCC_GetPCLK2Freq>
 8008790:	6178      	str	r0, [r7, #20]
        break;
 8008792:	e00f      	b.n	80087b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008794:	4b1b      	ldr	r3, [pc, #108]	; (8008804 <UART_SetConfig+0x510>)
 8008796:	617b      	str	r3, [r7, #20]
        break;
 8008798:	e00c      	b.n	80087b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800879a:	f7fe fadf 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 800879e:	6178      	str	r0, [r7, #20]
        break;
 80087a0:	e008      	b.n	80087b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a6:	617b      	str	r3, [r7, #20]
        break;
 80087a8:	e004      	b.n	80087b4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	76bb      	strb	r3, [r7, #26]
        break;
 80087b2:	bf00      	nop
    }

    if (pclk != 0U)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d018      	beq.n	80087ec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	085a      	lsrs	r2, r3, #1
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	441a      	add	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	2b0f      	cmp	r3, #15
 80087d4:	d908      	bls.n	80087e8 <UART_SetConfig+0x4f4>
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087dc:	d204      	bcs.n	80087e8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	e001      	b.n	80087ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80087f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3720      	adds	r7, #32
 80087fe:	46bd      	mov	sp, r7
 8008800:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008804:	00f42400 	.word	0x00f42400

08008808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00a      	beq.n	8008876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	f003 0308 	and.w	r3, r3, #8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00a      	beq.n	80088ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01a      	beq.n	800891e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008906:	d10a      	bne.n	800891e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	605a      	str	r2, [r3, #4]
  }
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800895a:	f7f9 fdb9 	bl	80024d0 <HAL_GetTick>
 800895e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b08      	cmp	r3, #8
 800896c:	d10e      	bne.n	800898c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800896e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f82a 	bl	80089d6 <UART_WaitOnFlagUntilTimeout>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e020      	b.n	80089ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0304 	and.w	r3, r3, #4
 8008996:	2b04      	cmp	r3, #4
 8008998:	d10e      	bne.n	80089b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800899a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f814 	bl	80089d6 <UART_WaitOnFlagUntilTimeout>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e00a      	b.n	80089ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2220      	movs	r2, #32
 80089bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	603b      	str	r3, [r7, #0]
 80089e2:	4613      	mov	r3, r2
 80089e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e6:	e05d      	b.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ee:	d059      	beq.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089f0:	f7f9 fd6e 	bl	80024d0 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d302      	bcc.n	8008a06 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d11b      	bne.n	8008a3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f022 0201 	bic.w	r2, r2, #1
 8008a24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e042      	b.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0304 	and.w	r3, r3, #4
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d02b      	beq.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a5a:	d123      	bne.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a74:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0201 	bic.w	r2, r2, #1
 8008a84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2220      	movs	r2, #32
 8008a96:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e00f      	b.n	8008ac4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69da      	ldr	r2, [r3, #28]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4013      	ands	r3, r2
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	bf0c      	ite	eq
 8008ab4:	2301      	moveq	r3, #1
 8008ab6:	2300      	movne	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d092      	beq.n	80089e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <arm_sin_f32>:
 8008acc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b4c <arm_sin_f32+0x80>
 8008ad0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008ad4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008adc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008ae0:	d504      	bpl.n	8008aec <arm_sin_f32+0x20>
 8008ae2:	ee17 3a90 	vmov	r3, s15
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	ee07 3a90 	vmov	s15, r3
 8008aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008af0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008b50 <arm_sin_f32+0x84>
 8008af4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008af8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008afc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008b00:	ee17 3a90 	vmov	r3, s15
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b0a:	d21a      	bcs.n	8008b42 <arm_sin_f32+0x76>
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b14:	1c59      	adds	r1, r3, #1
 8008b16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008b1a:	4a0e      	ldr	r2, [pc, #56]	; (8008b54 <arm_sin_f32+0x88>)
 8008b1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008b20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b24:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008b28:	ed93 7a00 	vldr	s14, [r3]
 8008b2c:	edd2 6a00 	vldr	s13, [r2]
 8008b30:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008b34:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b3c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008b40:	4770      	bx	lr
 8008b42:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008b46:	2101      	movs	r1, #1
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e7e6      	b.n	8008b1a <arm_sin_f32+0x4e>
 8008b4c:	3e22f983 	.word	0x3e22f983
 8008b50:	44000000 	.word	0x44000000
 8008b54:	08008c10 	.word	0x08008c10

08008b58 <__libc_init_array>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	4e0d      	ldr	r6, [pc, #52]	; (8008b90 <__libc_init_array+0x38>)
 8008b5c:	4c0d      	ldr	r4, [pc, #52]	; (8008b94 <__libc_init_array+0x3c>)
 8008b5e:	1ba4      	subs	r4, r4, r6
 8008b60:	10a4      	asrs	r4, r4, #2
 8008b62:	2500      	movs	r5, #0
 8008b64:	42a5      	cmp	r5, r4
 8008b66:	d109      	bne.n	8008b7c <__libc_init_array+0x24>
 8008b68:	4e0b      	ldr	r6, [pc, #44]	; (8008b98 <__libc_init_array+0x40>)
 8008b6a:	4c0c      	ldr	r4, [pc, #48]	; (8008b9c <__libc_init_array+0x44>)
 8008b6c:	f000 f820 	bl	8008bb0 <_init>
 8008b70:	1ba4      	subs	r4, r4, r6
 8008b72:	10a4      	asrs	r4, r4, #2
 8008b74:	2500      	movs	r5, #0
 8008b76:	42a5      	cmp	r5, r4
 8008b78:	d105      	bne.n	8008b86 <__libc_init_array+0x2e>
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
 8008b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b80:	4798      	blx	r3
 8008b82:	3501      	adds	r5, #1
 8008b84:	e7ee      	b.n	8008b64 <__libc_init_array+0xc>
 8008b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b8a:	4798      	blx	r3
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	e7f2      	b.n	8008b76 <__libc_init_array+0x1e>
 8008b90:	0800941c 	.word	0x0800941c
 8008b94:	0800941c 	.word	0x0800941c
 8008b98:	0800941c 	.word	0x0800941c
 8008b9c:	08009420 	.word	0x08009420

08008ba0 <memset>:
 8008ba0:	4402      	add	r2, r0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d100      	bne.n	8008baa <memset+0xa>
 8008ba8:	4770      	bx	lr
 8008baa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bae:	e7f9      	b.n	8008ba4 <memset+0x4>

08008bb0 <_init>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	bf00      	nop
 8008bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb6:	bc08      	pop	{r3}
 8008bb8:	469e      	mov	lr, r3
 8008bba:	4770      	bx	lr

08008bbc <_fini>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	bf00      	nop
 8008bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc2:	bc08      	pop	{r3}
 8008bc4:	469e      	mov	lr, r3
 8008bc6:	4770      	bx	lr
